======
Fields
======


XMLSnippet
==========

The XML snipped is a text field which contains a defined subset of XML as
unicode. For testing we use the default CMS subset which only allows italic and
links.

Converting and validating
+++++++++++++++++++++++++

Create a field:

>>> import zeit.cms.content.field
>>> snippet = zeit.cms.content.field.XMLSnippet()


Converting from unicode
-----------------------

The `fromUnicode` method makes sure that the value is sane and parsable.

>>> snippet.fromUnicode(u'foo <em>b\xfcrf</em>')
u'foo <em>b\xfcrf</em>'

It also replaces tags which are replaced, like italic with the more general
emphasis tag:

>>> snippet.fromUnicode(u'foo <i>b\xfcrf</i>')
u'foo <em>b\xfcrf</em>'


Invalid input is mostly "repaired":

>>> snippet.fromUnicode(u'foo <i>b\xfcrf')
u'foo <em>b\xfcrf</em>'
>>> snippet.fromUnicode(u'foo <i>b\xfc<b>rf')
u'foo <em>b\xfc&lt;b&gt;rf</em>'
>>> snippet.fromUnicode(u'a < b')
u'a &lt; b'

Links are also supported:

>>> snippet.fromUnicode(
...     u'Gehe zu  <a href="http://zeit.de">zeit <i>online</i></a>')
u'Gehe zu  <a href="http://zeit.de">zeit <em>online</em></a>'

Only href and target ar acceptable attributes. If other attributes are given,
the tag is quoted:

>>> snippet.fromUnicode(u'<a class="error">booh!</a>')
u'&lt;a class=&quot;error&quot;&gt;booh!'

``<br/>`` is also supported:

>>> snippet.fromUnicode(
...     u'Gehe ins<br/>Gefaengins')
u'Gehe ins<br/>Gefaengins'
>>> snippet.fromUnicode(
...     u'Gehe ins<br>Gefaengins')
u'Gehe ins<br/>Gefaengins'

Apparently some codeblocks put None into fromUnicode. That yields a useful
error message:

>>> snippet.fromUnicode(None)
Traceback (most recent call last):
    ...
TypeError: Expected unicode, got <type 'NoneType'>


Validation
----------

The XMLSnippet field is valid, when the validated value equals a value
`fromUnicode` would have produced. So invalid XML is not valid:

>>> snippet.validate(u'foo <i>b\xfcrf')
Traceback (most recent call last):
    ...
InvalidXML

A valid structure passes:

>>> snippet.validate(u'foo <em>b\xfcrf</em>')

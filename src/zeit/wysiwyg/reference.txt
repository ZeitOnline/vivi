===================
 Inline references
===================

Setup
=====

>>> from zeit.cms.testcontenttype.testcontenttype import TestContentType
>>> import StringIO
>>> import lxml
>>> import zeit.cms.testing
>>> import zeit.wysiwyg.html
>>> import zeit.wysiwyg.interfaces
>>> import zeit.wysiwyg.testing
>>> import zope.component

>>> zeit.cms.testing.set_site()
>>> principal = zeit.cms.testing.create_interaction()

>>> zope.component.getSiteManager().registerAdapter(
...     zeit.wysiwyg.testing.HTMLContent)

References to images inside a HTML part are added to the zeit.cms.relation
catalog, and thus the article is updated whenever the image metadata is
changed.

Create an article that contains an image:

>>> source = u'''\
... <article>
...   <head/>
...   <body>
...     <title>Title</title>
...     <p>Aus winzigen embryonalen ...</p>
...     <p>Fuer menschliche</p>
...      <image type="jpg" expires="2100-01-01"
...         src="http://xml.zeit.de/2006/DSC00109_2.JPG"
...         layout="infobox"
...         align="right">
...         BILD </image>
...         <p>Zellen ist das toll.</p>
...         <p>Selbst wenn </p>
...     </body>
... </article>'''
>>> article = TestContentType(
...     xml_source=StringIO.StringIO(source))

After checking in the article, its references are added to the index.

>>> import zeit.cms.checkout.interfaces
>>> import zeit.cms.repository.interfaces
>>> repository = zope.component.getUtility(
...     zeit.cms.repository.interfaces.IRepository)
>>> repository['test'] = article
>>> article = repository['test']
>>> checked_out = zeit.cms.checkout.interfaces.ICheckoutManager(
...     article).checkout()
>>> article = zeit.cms.checkout.interfaces.ICheckinManager(
...     checked_out).checkin()

Change the image metadata and check in:

>>> image = repository['2006']['DSC00109_2.JPG']
>>> image = zeit.cms.checkout.interfaces.ICheckoutManager(image).checkout()
>>> metadata = zeit.content.image.interfaces.IImageMetadata(image)
>>> metadata.copyrights = ((u'ZEIT ONLINE', u'http://zeit.de'),)
>>> metadata.caption = u'Cap cap cap'
>>> image = zeit.cms.checkout.interfaces.ICheckinManager(image).checkin()

Now the changes are propagated to the article:

>>> import gocept.async.tests
>>> gocept.async.tests.process('events')
>>> article = repository['test']
>>> print lxml.etree.tostring(article.xml['body'], pretty_print=True)
<...<image...<bu...>Cap cap cap</bu>...

Here we check that each type of possible references is found:

Images
======

>>> source = u'''\
... <article>
...   <head/>
...   <body>
...     <title>Title</title>
...     <p>Aus winzigen embryonalen ...</p>
...     <p>Fuer menschliche</p>
...      <image type="jpg" expires="2100-01-01"
...         src="http://xml.zeit.de/2006/DSC00109_2.JPG"
...         layout="infobox"
...         align="right">
...         BILD </image>
...         <p>Zellen ist das toll.</p>
...         <p>Selbst wenn </p>
...     </body>
... </article>'''
>>> article = TestContentType(
...     xml_source=StringIO.StringIO(source))
>>> zeit.wysiwyg.interfaces.IHTMLContent(article).references
[<zeit.content.image.image.RepositoryImage...>]

An invalid ID is ignored:

>>> source = u'''\
... <article>
...   <head/>
...   <body>
...     <title>Title</title>
...     <p>Aus winzigen embryonalen ...</p>
...     <p>Fuer menschliche
...      <image type="jpg" expires="2100-01-01"
...         src="http://xml.zeit.de/invalid"
...         layout="infobox"
...         align="right">
...         BILD </image> Zellen ist das toll.</p>
...         <p>Selbst wenn </p>
...     </body>
... </article>'''
>>> article = TestContentType(
...     xml_source=StringIO.StringIO(source))
>>> zeit.wysiwyg.interfaces.IHTMLContent(article).references
[]

Galleries
=========

(PortraitBoxes and InfoBoxes are handled by the same code)

>>> import zeit.content.gallery.gallery
>>> repository['2006']['gal'] = zeit.content.gallery.gallery.Gallery()

>>> source = u'''\
... <article>
...   <head/>
...   <body>
...     <gallery href="http://xml.zeit.de/2006/gal"/>
...   </body>
... </article>'''
>>> article = zeit.cms.testcontenttype.testcontenttype.TestContentType(
...     xml_source=StringIO.StringIO(source))
>>> zeit.wysiwyg.interfaces.IHTMLContent(article).references
[<zeit.content.gallery.gallery.Gallery...>]


Empty galleries should not break references:

>>> source = u'''\
... <article>
...   <head/>
...   <body>
...     <gallery/>
...   </body>
... </article>'''
>>> article = zeit.cms.testcontenttype.testcontenttype.TestContentType(
...     xml_source=StringIO.StringIO(source))
>>> zeit.wysiwyg.interfaces.IHTMLContent(article).references
[]

Teardown
========

>>> zope.component.getSiteManager().unregisterAdapter(
...     zeit.wysiwyg.testing.HTMLContent)
True

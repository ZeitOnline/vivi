===============================
WebDAV-Cache aktiv invalidieren
===============================

WebDAV-Ressourcen werden momentan im CMS in einem persistenten Cache in der
ZODB vorgehalten um die Kommunikation mit dem Repository zu beschleunigen.

Momentan kann der Cache nicht seine volle Effektivität entfalten, da immernoch
mindestens ein, meist aber mehrere Anfragen an den WebDAV-Server gestellt
werden müssen, obwohl sich nichts geändert hat. Hier würden wir gerne besser
werden.

Als Ziel der Änderung stellen wir uns vor, dass im optimalen Fall keine
Anfrage an den WebDAV-Server gestellt werden muss.

Knackpunkt des Problems ist die passive Validierung des Caches, indem bei
jedem Zugriff auf Propertys der Server angefragt werden muss. Wenn der
WebDAV-Server das System bei Änderungen aktiv benachrichtigt, können wir
gecachte Objekte einfach verwenden.

Eine Invalidierungsnachricht sollte folgende Eigenschaften haben:

  - ID der Ressource
  - Art der Änderung: Änderung einer Property oder des Bodys

Protokoll
=========

Als Protokoll schlagen wir XML-RPC vor. Wir würden die Methode `invalidate` im
CMS implementieren, die die folgenden Parameter akzeptiert:

  1. uniqueID (der geänderten Ressource)
  2. change ("body" oder "property")

Der WebDAV-Server sollte bei Änderungen unverzüglich eine Nachricht an das CMS
verschicken.

CMS offline
===========

Der WebDAV-Server sollte damit rechnen, dass der CMS-Server nicht online ist
und die Invalidierung in diesem Fall ignorieren.

Wenn das CMS wieder online ist wird der Cache vom CMS vollständig als
veraltet betrachtet werden. Validierungen müssen daher nicht nachgeholt werden.

Race conditions
===============

Die Transaktionsintegration mit Zope wird nicht sauber sein, da eine
systematische Race-Condition bzgl. der Interaktion von HTTP und Transaktionen
im allgemeinen besteht. Diese Race-Condition existiert aber sowiesο und wird
daher ignoriert werden.

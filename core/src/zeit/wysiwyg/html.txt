Converting to HTML
==================

The HTML representation ...


We need the functional test setup and an interaction:

>>> import zope.security.management
>>> import zope.security.testing
>>> import zope.publisher.browser
>>> import zope.app.component.hooks
>>> import zeit.cms.testing
>>> zeit.cms.testing.set_site()
>>> principal = zeit.cms.testing.create_interaction()

Create an XML structure containing a body:

>>> source = '''\
... <article>
...   <head/>
...   <body>
...     <title>Title</title>
...     <p>A paragraph</p>
...     <p>Another <em>paragraph</em></p>
...     <teaser/>
...   </body>
... </article>'''

Instanciate a test content:
>>> import StringIO
>>> import zeit.cms.testcontenttype.testcontenttype
>>> article = zeit.cms.testcontenttype.testcontenttype.TestContentType(
...     xml_source=StringIO.StringIO(source))

Manually adapt to HTML:

>>> import zope.publisher.browser
>>> import zeit.wysiwyg.html
>>> converter = zeit.wysiwyg.html.HTMLConverter(article)
>>> converter
<zeit.wysiwyg.html.HTMLConverter object at 0x...>

Get the HTML representation:

>>> print converter.to_html(article.xml['body'])
<p>A paragraph</p>
<p>Another <em>paragraph</em></p>


The original article xml is of course unmodifed so far:

>>> import lxml.etree
>>> print lxml.etree.tostring(article.xml, pretty_print=True)
<article>
  <head/>
  <body>
    <title>Title</title>
    <p>A paragraph</p>
    <p>Another <em>paragraph</em></p>
    <teaser/>
  </body>
</article>


Now for something more complex, the intertitle:

>>> source = '''\
... <article>
...   <head/>
...   <body>
...     <title>Title</title>
...     <p>A paragraph</p>
...     <intertitle>Paragraphs are nice</intertitle>
...     <p>Another <em>paragraph</em></p>
...     <teaser/>
...   </body>
... </article>'''
>>> article = zeit.cms.testcontenttype.testcontenttype.TestContentType(
...     xml_source=StringIO.StringIO(source))
>>> converter = zeit.wysiwyg.html.HTMLConverter(article)

In the html `intertitle` becomes an `h3`:
>>> print converter.to_html(article.xml['body'])
<p>A paragraph</p>
<h3>Paragraphs are nice</h3>
<p>Another <em>paragraph</em></p>


Now we change the HTML and see the reflection in the article XML. The `h3` in
the html becomes an `intertitle` again:

>>> converter.from_html(article.xml['body'], """\
...   <p>A paragraph with more <em>markup</em></p>
...   <h3>Paragraphs are nice</h3>
...   <p>Another <em>paragraph</em></p>
...   <p>Bla bla bla</p>
... """)

>>> print lxml.etree.tostring(article.xml, pretty_print=True)
<article>
  <head/>
  <body>
    <title>Title</title>
    <teaser/>
    <p>A paragraph with more <em>markup</em></p>
    <intertitle>Paragraphs are nice</intertitle>
    <p>Another <em>paragraph</em></p>
    <p>Bla bla bla</p>
  </body>
</article>


HTML-entities are replaced by the real character, but XML entities are not:

>>> converter.from_html(article.xml['body'], """\
...   <p>&mdash;&gt;&lt;</p>
... """)

>>> print lxml.etree.tostring(article.xml, pretty_print=True, encoding='utf8')
<article>
  <head/>
  <body>
    <title>Title</title>
    <teaser/>
    <p>â€”&gt;&lt;</p>
  </body>
</article>

Empty p-tags and tags containing nothing but whitespace will be removed on
saving. br's inside a <p> are kept:

>>> converter.from_html(article.xml['body'],
...     '<p>Foo</p><h3/><foo/><p/><p> </p><p><b>bar<br/></b></p>')
>>> print lxml.etree.tostring(article.xml, pretty_print=True, encoding='utf8')
<article>
  <head/>
  <body>
    <title>Title</title>
    <teaser/>
    <p>Foo</p>
    <p>
      <b>bar<br/></b>
    </p>
  </body>
</article>

Also all "root"-tags we don't know are converted to <p>. The "remove empty p"
rule is applied after that:

>>> converter.from_html(article.xml['body'],
...     '<p>Foo</p><div>blah</div><div/><foo>bluba</foo>')
>>> print lxml.etree.tostring(article.xml, pretty_print=True, encoding='utf8')
<article>
  <head/>
  <body>
    <title>Title</title>
    <teaser/>
    <p>Foo</p>
    <p>blah</p>
    <p>bluba</p>
  </body>
</article>


Make sure the adapter also works with very short texts:

>>> source = '''\
... <article>
...   <head/>
...   <body>
...     <p>foo</p>bar
...   </body>
... </article>'''
>>> small = zeit.cms.testcontenttype.testcontenttype.TestContentType(
...     xml_source=StringIO.StringIO(source))
>>> small_c = zeit.wysiwyg.html.HTMLConverter(small)
>>> print small_c.to_html(small.xml['body']),
<p>foo</p>bar


Nested paragraphs
-----------------

The converter tries to be smart in regard to fixing nested paragraphs:


>>> converter.from_html(article.xml['body'], """\
... <p>
...   <p>Anleitung zum Gemeinsein</p>
...   <p>Der Kuenstler Erwin Wurm hat ...</p>
... </p>""")
>>> print lxml.etree.tostring(article.xml, pretty_print=True, encoding='utf8'),
<article>
  <head/>
  <body>
    <title>Title</title>
    <teaser/>
    <p>Anleitung zum Gemeinsein</p>
    <p>Der Kuenstler Erwin Wurm hat ...</p>
  </body>
</article>



Lists
-----

Lists are <ul> and <ol>. They're supported as root tag:

>>> converter.from_html(article.xml['body'],
...     '<p>Foo</p><ul><li>bar</li><li>baz</li></ul>')
>>> print lxml.etree.tostring(article.xml, pretty_print=True, encoding='utf8')
<article>
  <head/>
  <body>
    <title>Title</title>
    <teaser/>
    <p>Foo</p>
    <ul>
      <li>bar</li>
      <li>baz</li>
    </ul>
  </body>
</article>

Of course the other way round works as well:

>>> print converter.to_html(article.xml['body'])
<p>Foo</p>
<ul>
  <li>bar</li>
  <li>baz</li>
</ul>

<ol> also works:

>>> converter.from_html(article.xml['body'],
...     '<p>Foo</p><ol><li>bar</li><li>baz</li></ol>')
>>> print lxml.etree.tostring(article.xml, pretty_print=True, encoding='utf8')
<article>
  <head/>
  <body>
    <title>Title</title>
    <teaser/>
    <p>Foo</p>
    <ol>
      <li>bar</li>
      <li>baz</li>
    </ol>
  </body>
</article>

Of course the other way round works as well:

>>> print converter.to_html(article.xml['body'])
<p>Foo</p>
<ol>
  <li>bar</li>
  <li>baz</li>
</ol>

Mapping of cms urls to unique id and vice versa
-----------------------------------------------

The converter has a helper method to convert urls which point to the cms to a
unique id:

>>> step = zeit.wysiwyg.html.URLStep(article)

>>> step._url_to_id('http://127.0.0.1/repository/wirtschaft.feed')
u'http://xml.zeit.de/wirtschaft.feed'
>>> step._url_to_id('http://127.0.0.1/repository/online/2007/01/Somalia')
u'http://xml.zeit.de/online/2007/01/Somalia'

When the url doesn't point to an existing object in the repository, the url is
returned:

>>> step._url_to_id('http://127.0.0.1/repository/online/2020/hamwanich')
'http://127.0.0.1/repository/online/2020/hamwanich'
>>> step._url_to_id('http://127.0.0.1/flubber')
'http://127.0.0.1/flubber'

The url is also just returned if it is completely unrelated:
>>> step._url_to_id('http://gocept.com')
'http://gocept.com'


The method `_id_to_url` handles the other way round:

>>> step._id_to_url('http://xml.zeit.de/wirtschaft.feed')
'http://127.0.0.1/repository/wirtschaft.feed'
>>> step._id_to_url('http://xml.zeit.de/online/2007/01/Somalia')
'http://127.0.0.1/repository/online/2007/01/Somalia'

When the id doesn't point to an existing object in the repository, the id is
returned:

>>> step._id_to_url('http://xml.zeit.de/online/2020/hamwanich')
'http://xml.zeit.de/online/2020/hamwanich'
>>> step._id_to_url('http://xml.zeit.de/flubber')
'http://xml.zeit.de/flubber'

The url is also just returned if it is completely unrelated:

>>> step._id_to_url('http://gocept.com')
'http://gocept.com'


We map all <a href=..."> according to the schema above:

>>> source = u'''\
... <article xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
...   <head/>
...   <body>
...     <title>Title</title>
...     <p>Aus winzigen embryonalen ...</p>
...     <p>Fuer <a href="http://xml.zeit.de/online/2007/01/Somalia">
...         menschliche</a></p>
...     <p>Selbst wenn </p>
...     </body>
... </article>'''
>>> article = zeit.cms.testcontenttype.testcontenttype.TestContentType(
...     xml_source=StringIO.StringIO(source))
>>> converter = zeit.wysiwyg.html.HTMLConverter(article)
>>> print converter.to_html(article.xml['body'])
<p>Aus winzigen embryonalen ...</p>
<p>Fuer <a href="http://127.0.0.1/repository/online/2007/01/Somalia">
        menschliche</a></p>
<p>Selbst wenn </p>

The other way round:

>>> converter.from_html(article.xml['body'], """\
...     <p>Aus winzigen embryonalen ...</p>
...     <p>Fuer <a
...         href="http://127.0.0.1/repository/online/2007/01/eta-zapatero">
...     menschliche</a></p>
...     <p>Selbst wenn </p>""")
>>> print lxml.etree.tostring(article.xml, pretty_print=True)
<article ...>
  <head/>
  <body>
    <title>Title</title>
    <p>Aus winzigen embryonalen ...</p>
    <p>Fuer <a href="http://xml.zeit.de/online/2007/01/eta-zapatero">
    menschliche</a></p>
    <p>Selbst wenn </p>
  </body>
</article>


Images
------

Articles can have inline images[#copyright-and-bu]_. This looks as follows:

>>> source = u'''\
... <article xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
...   <head/>
...   <body>
...     <title>Title</title>
...     <p>Aus winzigen embryonalen ...</p>
...     <p>Fuer menschliche
...      <image type="jpg" expires="2100-01-01"
...         src="http://xml.zeit.de/2006/DSC00109_2.JPG"
...         layout="infobox"
...         align="right">
...         <bu>Der erste Schritt zum Klon</bu>
...         <copyright>jemand</copyright> BILD </image> Zellen ist das toll.</p>
...         <p>Selbst wenn </p>
...     </body>
... </article>'''
>>> article = zeit.cms.testcontenttype.testcontenttype.TestContentType(
...     xml_source=StringIO.StringIO(source))
>>> converter = zeit.wysiwyg.html.HTMLConverter(article)

So the image is included in a paragraph. When creating html we'll get an <img>
tag. The layout is transferred to the title tag:

>>> print converter.to_html(article.xml['body'])
<p>Aus winzigen embryonalen ...</p>
<p>Fuer menschliche
 <img src="http://127.0.0.1/repository/2006/DSC00109_2.JPG" title="infobox"/>
  Zellen ist das toll.</p>
<p>Selbst wenn </p>

The conversion operates in-place but on a copy, so the article's XML is
unchanged (even for nested tags, so it's not only a shallow copy).
Thus, we can still see the <image> tag in the original XML:

>>> print lxml.etree.tostring(article.xml['body'], pretty_print=True)
<...<p>...<image...>...

Setting an img in html creates an image tag. This copies the data from the
image:

>>> converter.from_html(article.xml['body'], '''\
... <p>Fuer menschliche
...  <img src="http://127.0.0.1/repository/2006/DSC00109_2.JPG" title="large"/>
...   Zellen ist das toll.</p>
... <p>Aus winzigen embryonalen ...</p>
... <p>Selbst wenn </p>''')
>>> print lxml.etree.tostring(article.xml, pretty_print=True)
<article ...>
  <head/>
  <body>
    <title>Title</title>
    <p>Fuer menschliche
 <image src="http://xml.zeit.de/2006/DSC00109_2.JPG" type="JPG" ...layout="large"><bu>Cap cap cap</bu><copyright py:pytype="str" link="http://zeit.de">ZEIT ONLINE</copyright></image>
  Zellen ist das toll.</p>
    <p>Aus winzigen embryonalen ...</p>
    <p>Selbst wenn </p>
  </body>
</article>

Just re-check the conversion to HTML:

>>> print converter.to_html(article.xml['body'])
<p>Fuer menschliche
 <img src="http://127.0.0.1/repository/2006/DSC00109_2.JPG" title="large"/>
  Zellen ist das toll.</p>
<BLANKLINE>
<p>Aus winzigen embryonalen ...</p>
<BLANKLINE>
<p>Selbst wenn </p>



We are greedy against old paths in the XML:

>>> source = u'''\
... <article xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
...   <head/>
...   <body>
...     <p>Fuer menschliche
...      <image type="jpg" expires="2100-01-01"
...         src="/cms/work/2006/DSC00109_2.JPG"
...         align="right">
...         <bu>Der erste Schritt zum Klon</bu>
...         <copyright>jemand</copyright> BILD </image></p>
...         <p>Selbst wenn </p>
...     </body>
... </article>'''
>>> article = zeit.cms.testcontenttype.testcontenttype.TestContentType(
...     xml_source=StringIO.StringIO(source))
>>> converter = zeit.wysiwyg.html.HTMLConverter(article)
>>> print converter.to_html(article.xml['body'])
<p>Fuer menschliche
 <img src="http://127.0.0.1/repository/2006/DSC00109_2.JPG"/></p>
<p>Selbst wenn </p>


If the image does not longer exists, we render an img-tag with the unique id:

>>> source = u'''\
... <article xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
...   <head/>
...   <body>
...     <p>Fuer menschliche
...      <image type="jpg" expires="2100-01-01"
...         src="http://xml.zeit.de/bilder/asdf.jpg"
...         align="right">
...         <bu>Der erste Schritt zum Klon</bu>
...         <copyright>jemand</copyright> BILD </image></p>
...         <p>Selbst wenn </p>
...     </body>
... </article>'''
>>> article = zeit.cms.testcontenttype.testcontenttype.TestContentType(
...     xml_source=StringIO.StringIO(source))
>>> converter = zeit.wysiwyg.html.HTMLConverter(article)
>>> print converter.to_html(article.xml['body'])
<p>Fuer menschliche
 <img src="http://xml.zeit.de/bilder/asdf.jpg"/></p>
<p>Selbst wenn </p>


When the url doesn't belong to the CMS it is put out directly, as well:

>>> source = u'''\
... <article xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
...   <head/>
...   <body>
...     <p>Fuer menschliche
...      <image type="jpg" expires="2100-01-01"
...         src="http://images.gocept.com/bilder/asdf.jpg"
...         align="right">
...         <bu>Der erste Schritt zum Klon</bu>
...         <copyright>jemand</copyright> BILD </image></p>
...         <p>Selbst wenn </p>
...     </body>
... </article>'''
>>> article = zeit.cms.testcontenttype.testcontenttype.TestContentType(
...     xml_source=StringIO.StringIO(source))
>>> converter = zeit.wysiwyg.html.HTMLConverter(article)
>>> print converter.to_html(article.xml['body'])
<p>Fuer menschliche
 <img src="http://images.gocept.com/bilder/asdf.jpg"/></p>
<p>Selbst wenn </p>


When setting an image with an url outsite of the cms or otherwise unknown to
the cms, a simple <image src="..."> element is created:


>>> converter.from_html(article.xml['body'], '''\
...     <p>Fuer menschliche
...     <img src="http://images.gocept.com/bilder/asdf.jpg"/></p>
...     <p>Selbst wenn </p>''')
>>> print lxml.etree.tostring(article.xml, pretty_print=True)
<article xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <head/>
  <body>
    <p>Fuer menschliche
    <image src="http://images.gocept.com/bilder/asdf.jpg"/></p>
    <p>Selbst wenn </p>
  </body>
</article>

Make sure this works also when the url starts with the repository url:


>>> converter.from_html(article.xml['body'], '''\
...     <p>Fuer menschliche
...     <img src="http://127.0.0.1/repository/bilder/asdf.jpg"/></p>
...     <p>Selbst wenn </p>''')
>>> print lxml.etree.tostring(article.xml, pretty_print=True)
<article xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <head/>
  <body>
    <p>Fuer menschliche
    <image src="http://127.0.0.1/repository/bilder/asdf.jpg"/></p>
    <p>Selbst wenn </p>
  </body>
</article>

When a non-image resource is referenced a simpele <image> tag is generated,
too:

>>> converter.from_html(article.xml['body'], '''\
...     <p>Fuer menschliche
...     <img src="http://127.0.0.1/repository/politik.feed"/></p>
...     <p>Selbst wenn </p>''')
>>> print lxml.etree.tostring(article.xml, pretty_print=True)
<article xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <head/>
  <body>
    <p>Fuer menschliche
    <image src="http://127.0.0.1/repository/politik.feed"/></p>
    <p>Selbst wenn </p>
  </body>
</article>

Bug: ``<p><strong><img`` was not recognised correctly:


>>> converter.from_html(article.xml['body'], '''\
...     <p><strong><img src="http://127.0.0.1/repository/2006/DSC00109_2.JPG"/>
...            Hurz</strong> foobar </p>
...     <p>Selbst wenn </p>''')
>>> print lxml.etree.tostring(article.xml, pretty_print=True)
<article xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <head/>
  <body>
    <p><strong><image src="http://xml.zeit.de/2006/DSC00109_2.JPG" type="JPG" ...><bu>Cap cap cap</bu><copyright py:pytype="str" link="http://zeit.de">ZEIT ONLINE</copyright></image>
           Hurz</strong> foobar </p>
    <p>Selbst wenn </p>
  </body>
</article>


Recheck the conversion to HTML:

>>> print converter.to_html(article.xml['body'])
<p><strong><img src="http://127.0.0.1/repository/2006/DSC00109_2.JPG"/>
           Hurz</strong> foobar </p>
<p>Selbst wenn </p>


Bug: ``<img/>`` without src attribute:

>>> converter.from_html(article.xml['body'], '''\
...     <p><img/></p>
...     <p>Selbst wenn </p>''')
>>> print lxml.etree.tostring(article.xml, pretty_print=True)
<...<p> <image/>...
>>> print converter.to_html(article.xml['body']),
<p>
  <img/>
</p>
<p>Selbst wenn </p>


Embedding videos
----------------

Videos are represented with the ``<video>`` tag in XML:

>>> source = u'''\
... <article xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
...   <head/>
...   <body>
...     <p>No bo po co to.</p>
...     <video videoID="20080402334ddf" expires="2000-11-30T12:00:00Z"
...        format="large"/>
...     <p>Foo bar</p>
...     </body>
... </article>'''
>>> article = zeit.cms.testcontenttype.testcontenttype.TestContentType(
...     xml_source=StringIO.StringIO(source))
>>> converter = zeit.wysiwyg.html.HTMLConverter(article)

The HTML used for editing is a ``<div>`` tag which contains all the necessary
information:

>>> print converter.to_html(article.xml['body'])
<p>No bo po co to.</p>
<div class="inline-element video">
  <div class="videoId">20080402334ddf</div>
  <div class="videoId2"></div>
  <div class="player">vid</div>
  <div class="player2">vid</div>
  <div class="expires">2000-11-30 13:00</div>
  <div class="format">large</div>
</div>
<p>Â </p>
<p>Foo bar</p>

When there is no expires or format, or empty ones, empty divs are rendered:

>>> source = u'''\
... <article xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
...   <head/>
...   <body>
...     <p>No bo po co to.</p>
...     <video videoID="20080402334ddf"/>
...     <p>Foo bar</p>
...     </body>
... </article>'''
>>> article = zeit.cms.testcontenttype.testcontenttype.TestContentType(
...     xml_source=StringIO.StringIO(source))
>>> converter = zeit.wysiwyg.html.HTMLConverter(article)
>>> print converter.to_html(article.xml['body'])
<p>No bo po co to.</p>
<div class="inline-element video">
  <div class="videoId">20080402334ddf</div>
  <div class="videoId2"></div>
  <div class="player">vid</div>
  <div class="player2">vid</div>
  <div class="expires"></div>
  <div class="format"></div>
</div>
<p>Â </p>
<p>Foo bar</p>

On the way back the divs become a video node:

>>> converter.from_html(article.xml['body'], '''\
...     <p>No bo po co to.</p>
...     <div class="inline-element video">
...       <div class="videoId">my-fine-videoid</div>
...       <div class="player">pls</div>
...       <div class="expires">2009-01-01 00:00</div>
...     </div>
...     <p>Foo bar</p>''')

>>> print lxml.etree.tostring(article.xml, pretty_print=True),
<article ...>
  <head/>
  <body>
    <p>No bo po co to.</p>
     <video player2="vid" player="pls" videoID2="" format=""
        expires="2009-01-01T00:00:00+01:00" videoID="my-fine-videoid"/>
    <p>Foo bar</p>
  </body>
</article>

Double video
~~~~~~~~~~~~

>>> source = u'''\
... <article xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
...   <head/>
...   <body>
...     <video videoID="20080402334ddf" videoID2="2009second"/>
...     </body>
... </article>'''
>>> article = zeit.cms.testcontenttype.testcontenttype.TestContentType(
...     xml_source=StringIO.StringIO(source))
>>> converter = zeit.wysiwyg.html.HTMLConverter(article)
>>> print converter.to_html(article.xml['body'])
<div class="inline-element video">
  <div class="videoId">20080402334ddf</div>
  <div class="videoId2">2009second</div>
  <div class="player">vid</div>
  <div class="player2">vid</div>
  <div class="expires"></div>
  <div class="format"></div>
</div>
<p>Â </p>


>>> converter.from_html(article.xml['body'], '''\
...     <div class="inline-element video">
...       <div class="videoId">my-fine-videoid</div>
...       <div class="player">pls</div>
...       <div class="videoId2">second</div>
...       <div class="player2">pls</div>
...       <div class="expires">2009-01-01 00:00</div>
...     </div>''')

>>> print lxml.etree.tostring(article.xml, pretty_print=True),
<article ...>
  <head/>
  <body>
   <video player2="pls" player="pls" videoID2="second" format=""
    expires="2009-01-01T00:00:00+01:00" videoID="my-fine-videoid"/>
  </body>
</article>


Embedding audio
---------------

Audio is represented with the ``<audio>`` tag in XML:

>>> source = u'''\
... <article xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
...   <head/>
...   <body>
...     <p>No bo po co to.</p>
...     <audio audioID="20080402334ddf" expires="2000-11-30T12:00:00Z"/>
...     <p>Foo bar</p>
...     </body>
... </article>'''
>>> article = zeit.cms.testcontenttype.testcontenttype.TestContentType(
...     xml_source=StringIO.StringIO(source))
>>> converter = zeit.wysiwyg.html.HTMLConverter(article)

The HTML used for editing is a ``<div>`` tag which contains all the necessary
information:

>>> print converter.to_html(article.xml['body'])
<p>No bo po co to.</p>
<div class="inline-element audio">
  <div class="audioId">20080402334ddf</div>
  <div class="expires">2000-11-30 13:00</div>
</div>
<p>Â </p>
<p>Foo bar</p>


When there is no expires or empty ones, empty divs are rendered:

>>> source = u'''\
... <article xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
...   <head/>
...   <body>
...     <p>No bo po co to.</p>
...     <audio audioID="20080402334ddf"/>
...     <p>Foo bar</p>
...     </body>
... </article>'''
>>> article = zeit.cms.testcontenttype.testcontenttype.TestContentType(
...     xml_source=StringIO.StringIO(source))
>>> converter = zeit.wysiwyg.html.HTMLConverter(article)
>>> print converter.to_html(article.xml['body'])
<p>No bo po co to.</p>
<div class="inline-element audio">
  <div class="audioId">20080402334ddf</div>
  <div class="expires"></div>
</div>
<p>Â </p>
<p>Foo bar</p>


On the way back the divs become an audio node:

>>> converter.from_html(article.xml['body'], '''\
...     <p>No bo po co to.</p>
...     <div class="inline-element audio">
...       <div class="audioId">my-fine-audioid</div>
...       <div class="expires">2009-01-01 00:00</div>
...     </div>
...     <p>Foo bar</p>''')

>>> print lxml.etree.tostring(article.xml, pretty_print=True),
<article ...>
  <head/>
  <body>
    <p>No bo po co to.</p>
    <audio audioID="my-fine-audioid" expires="2009-01-01T00:00:00+01:00"/>
    <p>Foo bar</p>
  </body>
</article>


``article_extra``
-----------------

There are several hooks in the XSLTs which are triggered with the
``article_extra`` tag.

Videos used to be referenced by something like `<article_extra
id="video_article" videoID="20080402334ddf"/>`:

>>> source = u'''\
... <article xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
...   <head/>
...   <body>
...     <p>No bo po co to.</p>
...     <article_extra id="video_article" videoID="20080402334ddf"/>
...     <p>Foo bar</p>
...     </body>
... </article>'''
>>> article = zeit.cms.testcontenttype.testcontenttype.TestContentType(
...     xml_source=StringIO.StringIO(source))
>>> converter = zeit.wysiwyg.html.HTMLConverter(article)

For videos the HTML is the same as for the ``video`` tag. That also means that,
after saving there is no more ``article_extra`` for a video:

>>> print converter.to_html(article.xml['body'])
<p>No bo po co to.</p>
<div class="inline-element video">
  <div class="videoId">20080402334ddf</div>
  <div class="videoId2"></div>
  <div class="player">vid</div>
  <div class="player2">vid</div>
  <div class="expires"></div>
  <div class="format"></div>
</div>
<p>Â </p>
<p>Foo bar</p>


Attributes only
+++++++++++++++

When there is no : in the value just the attributes are set:

>>> converter.from_html(article.xml['body'], '''\
...     <p>No bo po co to.</p>
...     <p><input type="text" name="" value="foo=bar"/></p>
...     <p>Foo bar</p>''')
>>> print lxml.etree.tostring(article.xml, pretty_print=True)
<article xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <head/>
  <body>
    <p>No bo po co to.</p>
    <article_extra foo="bar"/>
    <p>Foo bar</p>
  </body>
</article>


>>> print converter.to_html(article.xml['body'])
<p>No bo po co to.</p>
<p>
  <input type="text" name="" value="foo=bar" size="60"/>
</p>
<p>Foo bar</p>



Multiple attributes
+++++++++++++++++++

It is possible to set multiple attributes:

>>> converter.from_html(article.xml['body'], '''\
...     <p>No bo po co to.</p>
...     <p><input type="text" name="" value="anid=another-id foo=bar" /></p>
...     <p>Foo bar</p>''')
>>> print lxml.etree.tostring(article.xml, pretty_print=True)
<article xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <head/>
  <body>
    <p>No bo po co to.</p>
    <article_extra anid="another-id" foo="bar"/>
    <p>Foo bar</p>
  </body>
</article>

>>> print converter.to_html(article.xml['body'])
<p>No bo po co to.</p>
<p>
  <input type="text" name="" value="anid=another-id foo=bar" size="60"/>
</p>
<p>Foo bar</p>


No attributes
-------------

It is also possible to just set the id, as for the mailformular:

>>> converter.from_html(article.xml['body'], '''\
...  <p>No bo po co to.</p>
...  <p>
...   <input type="text" name="" value="mailformular" size="60"/>
...  </p>
...  <p>Foo bar</p>''')
>>> print lxml.etree.tostring(article.xml, pretty_print=True)
<article xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <head/>
  <body>
    <p>No bo po co to.</p>
    <article_extra id="mailformular"/>
    <p>Foo bar</p>
  </body>
</article>

>>> print converter.to_html(article.xml['body'])
<p>No bo po co to.</p>
<p>
  <input type="text" name="" value="mailformular" size="60"/>
</p>
<p>Foo bar</p>



Faulty value
++++++++++++

When there is more than one : in the key, ``invalid`` attributes will be
created:

>>> converter.from_html(article.xml['body'], '''\
...     <p>No bo po co to.</p>
...     <p><input type="text" name="" value="foo:another:videoid foo:bar=baz" /></p>
...     <p>Foo bar</p>''')
>>> print lxml.etree.tostring(article.xml, pretty_print=True)
<article xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <head/>
  <body>
    <p>No bo po co to.</p>
    <article_extra invalid1="foo:bar=baz" id="foo"
        invalid2="another:videoid=another:videoid"/>
    <p>Foo bar</p>
  </body>
</article>

>>> print converter.to_html(article.xml['body'])
<p>No bo po co to.</p>
<p>
  <input type="text" name="" value="foo: invalid2=another:videoid=another:videoid invalid1=foo:bar=baz" size="60"/>
</p>
<p>Foo bar</p>

The text field is not required, so the converter must be able to eat "None":

>>> converter.from_html(article.xml['body'], None)
>>> print lxml.etree.tostring(article.xml, pretty_print=True)
<article xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <head/>
  <body/>
</article>

Raw HTML
--------

It is possible to enter RAW html in the editor. In the XML it is marked up with
the ``<raw>`` tag:

>>> source = u'''\
... <article xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
...   <head/>
...   <body>
...     <p>No bo po co to.</p>
...     <raw><embed foo="bar"/><b>booh</b></raw>
...     <p>Foo bar</p>
...     </body>
... </article>'''
>>> article = zeit.cms.testcontenttype.testcontenttype.TestContentType(
...     xml_source=StringIO.StringIO(source))

The HTML-Representation used for editing really displays the HTML (i.e. the
source contains entities:

>>> converter = zeit.wysiwyg.html.HTMLConverter(article)
>>> print converter.to_html(article.xml['body'])
<p>No bo po co to.</p>
<div ...class="inline-element raw">&lt;embed foo="bar"/&gt;
&lt;b&gt;booh&lt;/b&gt;
</div>
<p>Â </p>
<p>Foo bar</p>

The other way round converts a ``<div class="raw">`` to a ``<raw>`` tag:

>>> converter.from_html(article.xml['body'], """\
... <p>No bo po co to.</p>
... <div class="inline-element raw">&lt;embed baz="bar"/&gt;
... &lt;strong&gt;booh&lt;/strong&gt;
... </div>
... <p>Foo bar</p>""")
>>> print lxml.etree.tostring(article.xml, pretty_print=True)
<article...>
  <head/>
  <body>
    <p>No bo po co to.</p>
    <raw>
      <embed baz="bar"/>
      <strong>booh</strong>
    </raw>
    <p>Foo bar</p>
    </body>
</article>

When there are other element nodes in the div, everything after will be
discarded:

>>> converter.from_html(article.xml['body'], """\
... <p>No bo po co to.</p>
... <div class="raw inline-element">&lt;embed baz="bar"/&gt;<foo/>
... &lt;strong&gt;booh&lt;/strong&gt;
... </div>
... <p>Foo bar</p>""")
>>> print lxml.etree.tostring(article.xml, pretty_print=True)
<article...>
  <head/>
  <body>
    <p>No bo po co to.</p>
    <raw>
      <embed baz="bar"/>
    </raw>
    <p>Foo bar</p>
    </body>
</article>

Tables
------

>>> source = u'''\
... <article xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
...   <head/>
...   <body>
...     <table>
...       <tbody>
...         <tr><td>foo</td><td>bar</td></tr>
...       </tbody>
...     </table>
...     </body>
... </article>'''
>>> article = zeit.cms.testcontenttype.testcontenttype.TestContentType(
...     xml_source=StringIO.StringIO(source))
>>> converter = zeit.wysiwyg.html.HTMLConverter(article)
>>> print converter.to_html(article.xml['body'])
<table>
  <tbody>
    <tr>
      <td>foo</td>
      <td>bar</td>
    </tr>
  </tbody>
</table>

>>> converter.from_html(article.xml['body'], """\
... <table width="200" cellspacing="1" cellpadding="1" border="1">
... <tbody>
...     <tr>
...         <td>asdf <strong>asdf</strong> asdf</td>
...         <td>
...         <ul>
...             <li>poiu</li>
...             <li>poiu</li>
...         </ul>
...         </td>
...     </tr>
...     <tr>
...         <td>c</td>
...         <td>d</td>
...     </tr>
... </tbody>
... </table>""")
>>> print lxml.etree.tostring(article.xml, pretty_print=True)
<article...>
  <head/>
  <body>
    <table>
      <tbody>
        <tr>
          <td>asdf <strong>asdf</strong> asdf</td>
          <td>
            <ul>
              <li>poiu</li>
              <li>poiu</li>
            </ul>
          </td>
        </tr>
        <tr>
          <td>c</td>
          <td>d</td>
        </tr>
      </tbody>
    </table>
  </body>
</article>


Portraitbox
-----------

>>> import zeit.content.portraitbox.portraitbox
>>> repository['2006']['pb'] = zeit.content.portraitbox.portraitbox.Portraitbox()

>>> source = u'''\
... <article xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
...   <head/>
...   <body>
...     <portraitbox href="http://xml.zeit.de/2006/pb" layout="short"/>
...   </body>
... </article>'''
>>> article = zeit.cms.testcontenttype.testcontenttype.TestContentType(
...     xml_source=StringIO.StringIO(source))
>>> converter = zeit.wysiwyg.html.HTMLConverter(article)
>>> print converter.to_html(article.xml['body'])
<div class="inline-element portraitbox">
  <div class="href">http://xml.zeit.de/2006/pb</div>
  <div class="layout">short</div>
</div>
<p>Â </p>

>>> converter.from_html(article.xml['body'], """\
... <div class="inline-element portraitbox">
...   <div class="href">http://xml.zeit.de/2006/pb</div>
...   <div class="layout">short</div>
... </div>""")
>>> print lxml.etree.tostring(article.xml, pretty_print=True)
<article...>
  <head/>
  <body>
    <portraitbox href="http://xml.zeit.de/2006/pb"
      ...layout="short">
      <references/>
    </portraitbox>
  </body>
</article>

When the HTML contains a reference to a portrait box which doesn't exist,
nothing bad happens:

>>> converter.from_html(article.xml['body'], """\
... <div class="inline-element portraitbox">
...   <div class="href">http://xml.zeit.de/2006/pb-not-there</div>
...   <div class="layout">short</div>
... </div>""")
>>> print lxml.etree.tostring(article.xml, pretty_print=True)
<article...>
  <head/>
  <body>
    <portraitbox href="http://xml.zeit.de/2006/pb-not-there" layout="short"/>
  </body>
</article>



Infobox
-------

>>> import zeit.content.infobox.infobox
>>> repository['2006']['ib'] = zeit.content.infobox.infobox.Infobox()

>>> source = u'''\
... <article xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
...   <head/>
...   <body>
...     <infobox href="http://xml.zeit.de/2006/ib"/>
...   </body>
... </article>'''
>>> article = zeit.cms.testcontenttype.testcontenttype.TestContentType(
...     xml_source=StringIO.StringIO(source))
>>> converter = zeit.wysiwyg.html.HTMLConverter(article)
>>> print converter.to_html(article.xml['body'])
<div class="inline-element infobox">
  <div class="href">http://xml.zeit.de/2006/ib</div>
</div>
<p>Â </p>

>>> converter.from_html(article.xml['body'], """\
... <div class="inline-element infobox">
...   <div class="href">http://xml.zeit.de/2006/ib</div>
... </div>""")
>>> print lxml.etree.tostring(article.xml, pretty_print=True)
<article...>
  <head/>
  <body>
    <infobox href="http://xml.zeit.de/2006/ib"...>
      <references/>
    </infobox>
  </body>
</article>

Gallery
-------

>>> import zeit.content.gallery.gallery
>>> repository['2006']['gal'] = zeit.content.gallery.gallery.Gallery()

>>> source = u'''\
... <article xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
...   <head/>
...   <body>
...     <gallery href="http://xml.zeit.de/2006/gal"/>
...   </body>
... </article>'''
>>> article = zeit.cms.testcontenttype.testcontenttype.TestContentType(
...     xml_source=StringIO.StringIO(source))
>>> converter = zeit.wysiwyg.html.HTMLConverter(article)
>>> print converter.to_html(article.xml['body'])
<div class="inline-element gallery">
  <div class="href">http://xml.zeit.de/2006/gal</div>
</div>
<p>Â </p>

>>> converter.from_html(article.xml['body'], """\
... <div class="inline-element gallery">
...   <div class="href">http://xml.zeit.de/2006/gal</div>
... </div>""")
>>> print lxml.etree.tostring(article.xml, pretty_print=True)
<article...>
  <head/>
  <body>
    <gallery href="http://xml.zeit.de/2006/gal" ...>
      <supertitle...
      <references/>
    </gallery>
  </body>
</article>

Citation
--------

>>> source = u'''\
... <article xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
...   <head/>
...   <body>
...     <citation text="Gallia est omnis divisa in partes tres"
...               attribution="Julius Caesar" url="http://caesar.it/"
...               text2="Four apples a day" attribution2="Proverb" url2="url2"
...               layout="short"
...     />
...   </body>
... </article>'''
>>> article = zeit.cms.testcontenttype.testcontenttype.TestContentType(
...     xml_source=StringIO.StringIO(source))
>>> converter = zeit.wysiwyg.html.HTMLConverter(article)
>>> print converter.to_html(article.xml['body'])
<div class="inline-element citation">
  <div class="text">Gallia est omnis divisa in partes tres</div>
  <div class="text2">Four apples a day</div>
  <div class="attribution">Julius Caesar</div>
  <div class="attribution2">Proverb</div>
  <div class="url">http://caesar.it/</div>
  <div class="url2">url2</div>
  <div class="layout">short</div>
</div>
<p>Â </p>

>>> converter.from_html(article.xml['body'], """\
... <div class="inline-element citation">
...   <div class="text">Gallia est omnis divisa in partes tres</div>
...   <div class="text2">Four apples a day</div>
...   <div class="attribution">Julius Caesar</div>
...   <div class="attribution2">Proverb</div>
...   <div class="url">http://caesar.it/</div>
...   <div class="url2">url2</div>
...   <div class="layout">short</div>
... </div>""")
>>> print lxml.etree.tostring(article.xml, pretty_print=True)
<article...>
  <head/>
  <body>
    <citation text2="Four apples a day"
              attribution2="Proverb" attribution="Julius Caesar"
              url2="url2" url="http://caesar.it/"
              text="Gallia est omnis divisa in partes tres"
              layout="short"/>
  </body>
</article>


List of relateds
----------------

>>> source = u'''\
... <article xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
...   <head/>
...   <body>
...     <relateds/>
...   </body>
... </article>'''
>>> article = zeit.cms.testcontenttype.testcontenttype.TestContentType(
...     xml_source=StringIO.StringIO(source))
>>> converter = zeit.wysiwyg.html.HTMLConverter(article)
>>> print converter.to_html(article.xml['body'])
<div class="inline-element relateds">
</div>
<p>Â </p>

>>> converter.from_html(article.xml['body'], """\
... <div class="inline-element relateds">
... </div>""")
>>> print lxml.etree.tostring(article.xml, pretty_print=True)
<article...>
  <head/>
  <body>
    <relateds/>
  </body>
</article>



.. [#copyright-and-bu] Set a copyright and a BU for the image

    >>> import zeit.cms.repository.interfaces
    >>> repository = zope.component.getUtility(
    ...     zeit.cms.repository.interfaces.IRepository)
    >>> image = repository['2006']['DSC00109_2.JPG']
    >>> import zeit.cms.checkout.interfaces
    >>> image = zeit.cms.checkout.interfaces.ICheckoutManager(image).checkout()
    >>> metadata = zeit.content.image.interfaces.IImageMetadata(image)
    >>> metadata.copyrights = ((u'ZEIT ONLINE', u'http://zeit.de'),)
    >>> metadata.caption = u'Cap cap cap'
    >>> image = zeit.cms.checkout.interfaces.ICheckinManager(image).checkin()

==================
Structural Classes
==================


XInclude
========

The XInclude class represents an <xi:include> element. It is an adapter from
an objectified element. Create a little tree for testing:

>>> import lxml.objectify
>>> xml = lxml.objectify.fromstring("""\
...   <root xmlns:xi="http://www.w3.org/2001/XInclude">
...       <xi:include href="/tmp/first">
...           <xi:fallback>First Fallback Text</xi:fallback>
...       </xi:include>
...       <xi:include href="/tmp/second">
...           <xi:fallback>Second Fallback Text</xi:fallback>
...       </xi:include>
...   </root>""")


When we create an EditableStructure from the <xi:include> node we can access
the data href and fallback:

>>> from zeit.xmleditor.structure import XInclude
>>> include_node = xml['{http://www.w3.org/2001/XInclude}include'][0]
>>> include_node
<Element {http://www.w3.org/2001/XInclude}include at ...>
>>> include = XInclude(include_node)
>>> include.href
u'/tmp/first'
>>> include.fallback
u'First Fallback Text'


Changing values is reflected in the xml:

>>> include.href = 'new/path'
>>> import lxml.etree
>>> print lxml.etree.tostring(xml, pretty_print=True)
<root xmlns:xi="http://www.w3.org/2001/XInclude">
  <xi:include href="new/path">
    <xi:fallback>First Fallback Text</xi:fallback>
  </xi:include>
  <xi:include href="/tmp/second">
    <xi:fallback>Second Fallback Text</xi:fallback>
  </xi:include>
</root>


Block
=====

As for the XInclude's there is an EditableStructure for <block> elements:

>>> xml = lxml.objectify.fromstring("""\
...   <root>
...       <block priority="100" />
...       <block/>
...       <block id="myid">
...           <a/>
...       </block>
...   </root>""")
>>> from zeit.xmleditor.structure import Block
>>> block = Block(xml.block[0])
>>> block
<zeit.xmleditor.structure.Block object at 0x...>
>>> print block.priority
100
>>> print block.layout
None
>>> print block.id
None

TODO: verify changes are reflected

Text
====

There is an EditableStructure for general text content nodes:

>>> xml = lxml.objectify.fromstring("""\
...   <root>
...       <byline>von Elvis Presley</byline>
...   </root>""")
>>> from zeit.xmleditor.structure import Text
>>> text = Text(xml.byline[0])
>>> text 
<zeit.xmleditor.structure.Text object at 0x...>
>>> text.text
u'von Elvis Presley'


Changing the text works just by assinging a new value to the `text` attribute:

>>> text.text = 'von The King'
>>> print lxml.etree.tostring(xml, pretty_print=True)
<root>
   <byline xmlns:py="http://codespeak.net/lxml/objectify/pytype" py:pytype="str">von The King</byline>
</root>

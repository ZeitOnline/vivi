Locking tests
=============

Simple case
+++++++++++

>>> import os
>>> import StringIO
>>> import zeit.connector.connector
>>> import zeit.connector.resource
>>> connector = zeit.connector.connector.Connector(roots={
...       "default": os.environ['connector-url']})

>>> id = 'http://xml.zeit.de/testing/lt1'
>>> res = zeit.connector.resource.Resource(
...     id, 'lt1', 'text',
...     StringIO.StringIO('Pop goes the weasel!'),
...     contentType='text/plain')
>>> connector.add(res)
>>> connector.lock(res.id, 'frodo', until=None)
'opaquelocktoken:...'

>>> connector.lock(res.id, 'gandalf', until=None)
Traceback (most recent call last):
    ...
LockingError: http://xml.zeit.de/testing/lt1 is already locked.

>>> connector.unlock(res.id)
u'opaquelocktoken:...'
>>> del connector[res.id]

Timeout of locks
++++++++++++++++

When a lock times out at the server, we don't consider a resource locked any
more:

>>> res.id = 'http://xml.zeit.de/lock-timeout'
>>> import datetime
>>> import pytz
>>> until = datetime.datetime.now(pytz.UTC) + datetime.timedelta(seconds=3)
>>> connector.lock(res.id, 'gandalf', until)
'opaquelocktoken:...'
>>> connector.locked(res.id)
(u'gandalf', datetime.datetime(..., tzinfo=<UTC>), True)
>>> import time
>>> time.sleep(3)
>>> connector.locked(res.id)
(None, None, False)


Edge case 1: We think a resource is locked but it isn't
+++++++++++++++++++++++++++++++++++++++++++++++++++++++

We unlock the resource under the hood and of course expect that we can add it:

>>> res.id = 'http://xml.zeit.de/testing/edge1'
>>> parent = 'http://xml.zeit.de/testing'
>>> token = connector.lock(res.id, 'saruman', until=None)
>>> ignore = connector[res.id]  # fill cache again
>>> url = connector._id2loc(res.id)
>>> dummy = connector.get_connection().unlock(url, token)
>>> connector.add(res)
>>> connector.unlock(res.id)
>>> del connector[res.id]

Edge case 1.1: With existing resource:

>>> res.id = 'http://xml.zeit.de/testing/edge1.1'
>>> connector.add(res)
>>> token = connector.lock(res.id, 'saruman', until=None)
>>> ignore = connector[res.id]  # fill cache again
>>> url = connector._id2loc(res.id)
>>> dummy = connector.get_connection().unlock(url, token)
>>> connector.add(res)
>>> connector.unlock(res.id)
>>> del connector[res.id]

Edge case 1.2: Unlocking:

>>> res.id = 'http://xml.zeit.de/testing/edge1.2'
>>> connector.add(res)
>>> token = connector.lock(res.id, 'saruman', until=None)
>>> ignore = connector[res.id]  # fill cache again
>>> url = connector._id2loc(res.id)
>>> dummy = connector.get_connection().unlock(url, token)
>>> connector.unlock(res.id)
>>> del connector[res.id]


Edge case 2: We think a resource is not locked, but it is
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Lock the resoruce under the hood; we get a useful error:

>>> res.id = 'http://xml.zeit.de/testing/edge2'
>>> url = connector._id2loc(res.id)
>>> token = connector.get_connection().lock(
...     url, owner='gimli', depth=0, timeout=20)
>>> connector.add(res)
Traceback (most recent call last):
    ...
LockedByOtherSystemError: (u'gimli', datetime.datetime(...))
>>> connector.unlock(res.id, token)
'opaquelocktoken:...'

Edge case 2.1: With existing resource:

>>> res.id = 'http://xml.zeit.de/testing/edge2.1'
>>> connector.add(res)
>>> ignore = connector[res.id]  # fill cache again
>>> url = connector._id2loc(res.id)
>>> token = connector.get_connection().lock(
...     url, owner='gimli', depth=0, timeout=20)
>>> connector.add(res)
Traceback (most recent call last):
    ...
LockedByOtherSystemError: (u'gimli', datetime.datetime(...))
>>> connector.unlock(res.id, token)
'opaquelocktoken:...'
>>> del connector[res.id]

Edge case 2.2: Locking

>>> res.id = 'http://xml.zeit.de/testing/edge2.2'
>>> connector.add(res)
>>> ignore = connector[res.id]  # fill cache again
>>> url = connector._id2loc(res.id)
>>> token = connector.get_connection().lock(
...     url, owner='gimli', depth=0, timeout=20)
>>> connector.lock(res.id, 'saruman', until=None)
Traceback (most recent call last):
    ...
LockingError: http://xml.zeit.de/testing/edge2.2 is already locked.
>>> connector.unlock(res.id, token)
'opaquelocktoken:...'
>>> del connector[res.id]

Edge case 2.3: PROPATCH

>>> res.id = 'http://xml.zeit.de/testing/edge2.3'
>>> connector.add(res)
>>> ignore = connector[res.id]  # fill cache again
>>> url = connector._id2loc(res.id)
>>> token = connector.get_connection().lock(
...     url, owner='gimli', depth=0, timeout=20)
>>> connector.changeProperties(res.id, {('foo', 'bar'): 'baz'})
Traceback (most recent call last):
    ...
DAVLockedError: (423, 'Locked',
    u'http://zip6.zeit.de:9000/cms/work/testing/edge2.3',
    '<!DOCTYPE...')

>>> connector.unlock(res.id, token)
'opaquelocktoken:...'
>>> del connector[res.id]



Edge case 3: Locked resource w/o locking user
+++++++++++++++++++++++++++++++++++++++++++++

When a resource is locked for instance with cadaver the connector was telling
the resource would not be locked. Verify the bug is fixed. We need the internal
API to create an anonymous lock. Create a resource first:

>>> res.id = 'http://xml.zeit.de/testing/edge3'
>>> connector.add(res)
>>> ignore = connector[res.id]  # fill cache again

Now lock:

>>> dav_url = connector._id2loc(connector._get_cannonical_id(res.id))
>>> token = connector.get_connection().lock(dav_url)

Deleting the resource now will yield a `LockedByOtherSystemError`:

>>> del connector[res.id]
Traceback (most recent call last):
    ...
LockedByOtherSystemError: (None, datetime.datetime(9998, 12, 31, 23, 59, 59, 999999, tzinfo=<UTC>))

Unlock the resource and remove it:

>>> dummy = connector.get_connection().unlock(dav_url, token)
>>> del connector[res.id]


Edge case 4: We think the resource is locked but it is by somebody else
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

>>> res.id = 'http://xml.zeit.de/testing/edge4'
>>> connector.add(res)
>>> ignore = connector[res.id]  # fill cache again
>>> token = connector.lock(res.id, 'saruman', until=None)
>>> r2 = connector[res.id]
>>> url = connector._id2loc(res.id)
>>> dummy = connector.get_connection().unlock(url, token)
>>> new_token = connector.get_connection().lock(
...     url, owner='gimli', depth=0, timeout=20)
>>> connector.add(res)
Traceback (most recent call last):
    ...
LockedByOtherSystemError: (u'gimli', datetime.datetime(...))
>>> connector.unlock(res.id)
u'opaquelocktoken:...'
>>> connector.add(res)
>>> del connector[res.id]

Edge case 5: Null resouce locks
+++++++++++++++++++++++++++++++

>>> res.id = 'http://xml.zeit.de/testing/edge5'
>>> connector.lock(res.id, 'frodo', until=None)
'opaquelocktoken:...'
>>> connector[res.id].data
<cStringIO.StringI object at 0x...>
>>> connector.unlock(res.id)
u'opaquelocktoken:...'


Locking with timeout:

>>> import datetime
>>> import pytz
>>> res.id = 'http://xml.zeit.de/testing/edge6'
>>> connector.add(res)
>>> connector.lock(res.id, 'frodo', 
...     datetime.datetime.now(pytz.UTC) + datetime.timedelta(seconds=120))
'opaquelocktoken:...'
>>> connector.locked(res.id)
(u'frodo', datetime.datetime(..., tzinfo=<UTC>), True)

We can still write and update:

>>> connector.add(res)
>>> del connector[res.id]


Edge case 6: Locking on a deleted resource, where the cache still has data
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Create resource:

>>> res.id = 'http://xml.zeit.de/testing/edge6'
>>> connector.add(res)
>>> connector[res.id].data.read()
'Pop goes the weasel!'


After deleting the resource via webdav it is still reachable in the connector
because it is cached:

>>> conn = connector.get_connection()
>>> result = conn.delete(connector._id2loc('http://xml.zeit.de/testing/edge6'))
>>> connector[res.id].data.read()
'Pop goes the weasel!'

Locking it will actually create a null resource lock:

>>> connector.lock(res.id, 'frodo', until=None)
'opaquelocktoken:...'

The resource is there because it's locked, but it's body is empty (and it has
a None content-type):

>>> connector[res.id]
<zeit.connector.resource.CachedResource object at 0x...>
>>> connector[res.id].data.read()
''
>>> connector[res.id].contentType is None
True

>>> connector.unlock(res.id)
u'opaquelocktoken:...'


Edge case 7: Getting the lock information when the lockinfo got lost
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

When the principal is known to the system, the lock will still appear to be
ours. To make this happen, we register an IAuthentication utility:


>>> import zope.authentication.interfaces
>>> class Principal(object):
...     pass
>>> class Auth(object):
...     zope.interface.implements(
...         zope.authentication.interfaces.IAuthentication)
...     def getPrincipal(self, id):
...         if id == 'gimli':
...             p = Principal()
...             p.id = id
...             return p
...         raise zope.authentication.interfaces.PrincipalLookupError()
...
>>> gsm = zope.component.getGlobalSiteManager()
>>> auth = Auth()
>>> gsm.registerUtility(auth)


When we don't know the principal, the resource will be "LockedByOtherSystem":

>>> res.id = 'http://xml.zeit.de/testing/edge7.1'
>>> connector.add(res)
>>> token = connector.lock(res.id, 'frodo', until=None)
>>> connector.locktokens.remove(res.id)
>>> connector.locked(res.id)
(u'frodo', datetime.datetime(9998, 12, 31, 23, 59, 59, 999999, tzinfo=<UTC>),
 False)
>>> del connector[res.id]
Traceback (most recent call last):
    ...
LockedByOtherSystemError: (u'frodo', datetime.datetime(...))
>>> token = connector.unlock(res.id, token)
>>> del connector[res.id]

When we know the principal, it is "our" lock:

>>> res.id = 'http://xml.zeit.de/testing/edge7.2'
>>> connector.add(res)
>>> token = connector.lock(res.id, 'gimli', until=None)
>>> connector.locktokens.remove(res.id)
>>> connector.locked(res.id)
(u'gimli', datetime.datetime(9998, 12, 31, 23, 59, 59, 999999, tzinfo=<UTC>),
 True)
>>> del connector[res.id]
>>> gsm.unregisterUtility(auth)
True

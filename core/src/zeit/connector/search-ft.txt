Search (functional test)
========================

>>> import zeit.connector.interfaces
>>> import zope.component
>>> connector = zope.component.getUtility(
...     zeit.connector.interfaces.IConnector)

The building blocks are search vars:

>>> from zeit.connector.search import SearchVar
>>> volume = SearchVar('volume', 'http://namespaces.zeit.de/CMS/document')
>>> year = SearchVar('year', 'http://namespaces.zeit.de/CMS/document')
>>> ressort = SearchVar('ressort', 'http://namespaces.zeit.de/CMS/document')
>>> modified = SearchVar(
...     'date-last-modified', 'http://namespaces.zeit.de/CMS/document')
>>> etag = SearchVar('getetag', 'DAV:')

Queries are built of basic terms involving search vars stitched together into
expressions:

>>> import StringIO
>>> rid = 'http://xml.zeit.de/testing/foo'
>>> connector[rid] = zeit.connector.resource.Resource(
...     rid, None, 'text',
...     StringIO.StringIO('Pop.'),
...     {('ressort', 'http://namespaces.zeit.de/CMS/document'): 'Inhaltsverzeichnis',
...      ('year', 'http://namespaces.zeit.de/CMS/document'): '2007',
...      ('volume', 'http://namespaces.zeit.de/CMS/document'): '07'},
...     contentType='text/plain')


>>> [res for res in connector.search([volume, ressort],
...  (year == '2007') & (volume == '07'))]
[(u'http://xml.zeit.de/testing/foo', '07', 'Inhaltsverzeichnis')]


We expect nothing has changed in the future

>>> import datetime
>>> import pytz
>>> future = (datetime.datetime.now(pytz.UTC) + datetime.timedelta(
...           seconds=360)).isoformat()
>>> list(connector.search([modified], (modified > future) & (modified < '20 ')))
[]

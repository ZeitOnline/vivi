==========================
Functional connector tests
==========================

Test the integration with zope 3.

>>> import zope.component.hooks
>>> old_site = zope.component.hooks.getSite()
>>> zope.component.hooks.setSite(getRootFolder())

Get the connector:

>>> import zope.component
>>> import zeit.connector.interfaces
>>> connector = zope.component.getUtility(
...     zeit.connector.interfaces.IConnector)
>>> connector
<zeit.connector.zopeconnector.ZopeConnector object at 0x...>


Get a folder:

>>> connector['http://xml.zeit.de/%s' % TESTFOLDER()]
<zeit.connector.resource.CachedResource object at 0x...>

The directory listing is empty:

>>> list(connector.listCollection('http://xml.zeit.de/%s' % TESTFOLDER()))
[]


There was a bug that the property changes where not visible when using
``changeProperties``. Now we get the properties back:

>>> from io import BytesIO
>>> id = 'http://xml.zeit.de/%s/prop-change' % TESTFOLDER()
>>> res = zeit.connector.resource.Resource(
...     id, 'propchange', 'text',
...     BytesIO(b'Pop goes the weasel!'),
...     contentType='text/plain')
>>> connector.add(res)
>>> connector.changeProperties(
...     id, {('colour', 'http://namespaces.zeit.de/test'): 'gr\xfcn'})
>>> res_got = connector[id]
>>> res_got.properties[('colour', 'http://namespaces.zeit.de/test')]
'gr\xfcn'
>>> del connector[id]
>>> list(connector.listCollection('http://xml.zeit.de/%s' % TESTFOLDER()))
[]



Transaction integration
=======================

Locking
-------

When an object is locked and the transaction is rolled back, the object will be
automatically unlocked.

>>> id = 'http://xml.zeit.de/%s/lockrollback' % TESTFOLDER()
>>> res = zeit.connector.resource.Resource(
...     id, 'lockrollback', 'text',
...     BytesIO(b'Pop goes the weasel!'),
...     contentType='text/plain')
>>> connector.add(res)
>>> connector.lock(res.id, 'zope.user', until=None)
'opaquelocktoken:...'
>>> connector.locked(res.id)
('zope.user', datetime.datetime(...), True)

Now rollback:

>>> import transaction
>>> transaction.abort()

The resource is no longer locked:

>>> connector.locked(res.id)
(None, None, False)


When the lock times out in between the clean up doesn't fail:

>>> import datetime
>>> import pytz
>>> until = datetime.datetime.now(pytz.UTC) + datetime.timedelta(seconds=2)
>>> token = connector.lock(res.id, 'zope.user', until=until)
>>> import time
>>> time.sleep(2)
>>> transaction.abort()
>>> connector.locked(res.id)
(None, None, False)

Make sure the resource stays locked on commit:

>>> connector.lock(res.id, 'zope.user', until=None)
'opaquelocktoken:...'
>>> transaction.commit()
>>> connector._invalidate_cache(res.id)
>>> connector.locked(res.id)
('zope.user', datetime.datetime(...), True)

Remove the resource to clean up:

>>> del connector[res.id]


Referrers
=========

When the interaction has an URL we set the referrer header:

>>> transaction.commit()
>>> import zope.publisher.browser
>>> import zope.security.management
>>> request = zope.publisher.browser.TestRequest()
>>> zope.security.management.newInteraction(request)


Enable debugging of the http data:

>>> import zeit.connector.dav.davbase
>>> zeit.connector.dav.davbase.DEBUG_CONNECTION = True

>>> print('x'); connector._invalidate_cache(
...     'http://xml.zeit.de/%s/' % TESTFOLDER())
x...Referer: http://127.0.0.1\r\n...

Reset:

>>> zope.security.management.endInteraction()
>>> zeit.connector.dav.davbase.DEBUG_CONNECTION = False


After tests we clean up:

>>> zope.component.hooks.setSite(old_site)

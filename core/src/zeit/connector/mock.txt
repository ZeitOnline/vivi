=======================================
Zope 3 Integration of the CMS Connector
=======================================

There will be a python class provided by Tomas and Ralf. This is the Zope 3
integration:

>>> import zeit.connector.interfaces
>>> import zope.component
>>> connector = zope.component.getUtility(zeit.connector.interfaces.IConnector)
>>> connector
<zeit.connector.mock.Connector object at 0x...>

IConnector Interface
====================

Verify the IConnector interface:

>>> import zope.interface.verify
>>> from zeit.connector.interfaces import IConnector
>>> zope.interface.verify.verifyClass(IConnector, connector.__class__)
True
>>> zope.interface.verify.verifyObject(IConnector, connector)
True

Browsing
========

The browsing interface basically allows listing collections:

>>> from pprint import pprint
>>> pprint(list(connector.listCollection('http://xml.zeit.de/')))
[(u'2006', u'http://xml.zeit.de/2006'),
 (u'2007', u'http://xml.zeit.de/2007'),
 (u'online', u'http://xml.zeit.de/online'),
 (u'politik.feed', u'http://xml.zeit.de/politik.feed'),
 (u'testcontent', u'http://xml.zeit.de/testcontent'),
 (u'wirtschaft.feed', u'http://xml.zeit.de/wirtschaft.feed')]

>>> entry = list(connector.listCollection(
...     'http://xml.zeit.de/online/2007/01'))[0]
>>> print entry
(u'4schanzentournee-abgesang',
 u'http://xml.zeit.de/online/2007/01/4schanzentournee-abgesang')

If the id is not valid a ValueError is raised:

>>> list(connector.listCollection(u'foobar'))
Traceback (most recent call last):
...
ValueError: The id u'foobar' is invalid.


Getting Resources
=================

Resources are retrieved by their unique ids. We retrieve the 4schzentournee read
above:

>>> unique_id = entry[1]
>>> resource = connector[unique_id]
>>> resource
<zeit.connector.resource.Resource object at 0x...>

>>> resource.id
u'http://xml.zeit.de/online/2007/01/4schanzentournee-abgesang'
>>> resource.type
'article'
>>> import zeit.connector.interfaces
>>> resource.properties[zeit.connector.interfaces.RESOURCE_TYPE_PROPERTY]
'article'
>>> resource.properties[
...     ('author', 'http://namespaces.zeit.de/CMS/document')]
' Ulrich Dehne'
>>> resource.properties[
...     ('year', 'http://namespaces.zeit.de/CMS/document')]
'2007'
>>> resource.properties[('getlastmodified', 'DAV:')]
u'Fri, 07 Mar 2008 12:47:16 GMT'

If a resource does not exist, a KeyError is raised:

>>> connector['http://xml.zeit.de/foobar']
Traceback (most recent call last):
...
KeyError: "The resource 'http://xml.zeit.de/foobar' does not exist."

It is also possible to get the root:

>>> connector['http://xml.zeit.de/']
<zeit.connector.resource.Resource object at 0x...>


Locking and Unlocking
=====================

Users can lock and unlock content. We continue to use the 4schanzentournee
resource. For that we need a principal and a target date:

>>> import datetime
>>> from zope.security.testing import Principal
>>> hans = Principal('hans')
>>> until = datetime.datetime.now() + datetime.timedelta(days=1)


Before we acquire the lock, the resource is not locked:

>>> connector.locked(unique_id)
(None, None, False)


After locking the resource is locked:

>>> connector.lock(unique_id, hans, until)
>>> locked_for, locked_until, mine = connector.locked(unique_id)
>>> locked_for.id
'hans'
>>> locked_until
datetime.datetime(...)


Note that hans has locked the resource. Dieter can override the lock:

>>> dieter = Principal('dieter')
>>> connector.lock(unique_id, dieter, until)
>>> locked_for, locked_until, mine = connector.locked(unique_id)
>>> locked_for.id
'dieter'



Adding Content to the Repository
================================

Item Assignment
+++++++++++++++

Adding content or changing works by item assignement to the connector. The key
is the unique Id of the object. Create a resource first:

>>> import StringIO
>>> from zeit.connector.resource import Resource
>>> resource = Resource(
...   'http://xml.zeit.de/online/2007/02/Seehofer',
...   'Seehofer', 'article', StringIO.StringIO('Seehofer schlaegt zurueck'),
...   properties={('resourcetype', 'DAV:'): 'article',
...               ('foo', 'foo-ns'): 'bar'},
...   contentType='text/plain')

Let's have a look into the collection `/online/2007/01`. It is empty so far:

>>> list(connector.listCollection('http://xml.zeit.de/online/2007/02'))
[]
>>> resource.id in connector
False


Add the `resource` to the connector:

>>> connector[resource.id] = resource
>>> resource.id in connector
True

We now can get the object back from the connector:

>>> from pprint import pprint
>>> resource_2 = connector[resource.id]
>>> print resource_2.data.read()
Seehofer schlaegt zurueck
>>> pprint(dict(resource_2.properties))
{('foo', 'foo-ns'): 'bar',
 ('getetag', 'DAV:'): '...',
 ('getlastmodified', 'DAV:'): u'... GMT',
 ('resourcetype', 'DAV:'): 'article',
 ('type', 'http://namespaces.zeit.de/CMS/meta'): 'article',
 ('uuid', 'http://namespaces.zeit.de/CMS/document'): '{urn:uuid:...}'}
>>> resource_2.contentType
'text/plain'

The getlastmodified property is updated, too:

>>> str(datetime.datetime.now().year) in resource_2.properties[
...     ('getlastmodified', 'DAV:')]
True

Check that the timezone is set correctly:

>>> import pytz
>>> datetime.datetime.now(pytz.UTC).strftime(' %H:') in resource_2.properties[
...     ('getlastmodified', 'DAV:')]
True

Also the collection contains the resource now:

>>> list(connector.listCollection('http://xml.zeit.de/online/2007/02'))
[(u'Seehofer', u'http://xml.zeit.de/online/2007/02/Seehofer')]


Add Method
++++++++++

Since the connector knows very well how to get the unique id from resource
objects there is a convinience method called `add`. So let's create another
resource and add id using the `add` method:

>>> resource = Resource(
...     'http://xml.zeit.de/online/2007/02/DaimlerChrysler',
...     'DaimlerChrysler', 'unkown',
...     StringIO.StringIO('Zwischen Angst und Schock'))
>>> connector.add(resource)

>>> pprint(list(connector.listCollection(
...     'http://xml.zeit.de/online/2007/02')))
[(u'DaimlerChrysler', u'http://xml.zeit.de/online/2007/02/DaimlerChrysler'),
 (u'Seehofer', u'http://xml.zeit.de/online/2007/02/Seehofer')]


Adding Collections
++++++++++++++++++

>>> collection_id = 'http://xml.zeit.de/online/2007/03'
>>> connector.add(resource)
>>> resource = Resource(
...     collection_id,
...     '03', 'collection',
...     StringIO.StringIO(''))
>>> connector.add(resource)

After we've hadded the collection we can query it:

>>> list(connector.listCollection(collection_id))
[]


But we also can get the resource:

>>> collection = connector[collection_id]
>>> collection.type
'collection'


We can also add new collections to the collection:


>>> collection_2_id = collection_id + '/foo'
>>> resource = Resource(
...     collection_2_id,
...     'foo', 'collection',
...     StringIO.StringIO(''))
>>> connector[collection_2_id] = resource
>>> list(connector.listCollection(collection_id))
[(u'foo', u'http://xml.zeit.de/online/2007/03/foo')]
>>> connector[collection_2_id].type
'collection'


Removing Content From the Repository
====================================

Removing words via the normal __delitem__ mechanismns. Let's look what we have
first:

>>> pprint(list(connector.listCollection('http://xml.zeit.de/')))
[(u'2006', u'http://xml.zeit.de/2006'),
 (u'2007', u'http://xml.zeit.de/2007'),
 (u'online', u'http://xml.zeit.de/online'),
 (u'politik.feed', u'http://xml.zeit.de/politik.feed'),
 (u'testcontent', u'http://xml.zeit.de/testcontent'),
 (u'wirtschaft.feed', u'http://xml.zeit.de/wirtschaft.feed')]

After remove the `politik.feed` it is also gone from the listing:

>>> del connector['http://xml.zeit.de/politik.feed']
>>> pprint(list(connector.listCollection('http://xml.zeit.de/')))
[(u'2006', u'http://xml.zeit.de/2006'),
 (u'2007', u'http://xml.zeit.de/2007'),
 (u'online', u'http://xml.zeit.de/online'),
 (u'testcontent', u'http://xml.zeit.de/testcontent'),
 (u'wirtschaft.feed', u'http://xml.zeit.de/wirtschaft.feed')]

>>> connector['http://xml.zeit.de/politik.feed']
Traceback (most recent call last):
...
KeyError: ...


Moving content in the repository
================================

Content could be moved by removind/adding. This donesn't work nicely with
folders though. So we implement a special method for moving:

>>> pprint(list(connector.listCollection('http://xml.zeit.de/')))
[(u'2006', u'http://xml.zeit.de/2006'),
 (u'2007', u'http://xml.zeit.de/2007'),
 (u'online', u'http://xml.zeit.de/online'),
 (u'testcontent', u'http://xml.zeit.de/testcontent'),
 (u'wirtschaft.feed', u'http://xml.zeit.de/wirtschaft.feed')]
>>> import zeit.connector.testing
>>> zeit.connector.testing.print_tree(connector, 'http://xml.zeit.de/2006')
http://xml.zeit.de/2006
http://xml.zeit.de/2006/49 collection
http://xml.zeit.de/2006/52 collection
http://xml.zeit.de/2006/DSC00109_2.JPG image

>>> connector.move('http://xml.zeit.de/2006', 'http://xml.zeit.de/2006-27')
>>> pprint(list(connector.listCollection('http://xml.zeit.de/')))
[(u'2006-27', u'http://xml.zeit.de/2006-27'),
 (u'2007', u'http://xml.zeit.de/2007'),
 (u'online', u'http://xml.zeit.de/online'),
 (u'testcontent', u'http://xml.zeit.de/testcontent'),
 (u'wirtschaft.feed', u'http://xml.zeit.de/wirtschaft.feed')]
>>> zeit.connector.testing.print_tree(connector, 'http://xml.zeit.de/2006-27')
http://xml.zeit.de/2006-27
http://xml.zeit.de/2006-27/49 collection
http://xml.zeit.de/2006-27/52 collection
http://xml.zeit.de/2006-27/DSC00109_2.JPG image


Overwriting content by moving is not allowed and raises an error:

>>> connector.move('http://xml.zeit.de/2006-27', 'http://xml.zeit.de/2007')
Traceback (most recent call last):
    ...
MoveError: Could not move http://xml.zeit.de/2006-27 to http://xml.zeit.de/2007, because target alread exists.


Let's move 2006-27 back:

>>> connector.move('http://xml.zeit.de/2006-27', 'http://xml.zeit.de/2006')
>>> zeit.connector.testing.print_tree(connector, 'http://xml.zeit.de/2006')
http://xml.zeit.de/2006
http://xml.zeit.de/2006/49 collection
http://xml.zeit.de/2006/52 collection
http://xml.zeit.de/2006/DSC00109_2.JPG image



Copying
=======

>>> zeit.connector.testing.print_tree(connector, 'http://xml.zeit.de/2006')
http://xml.zeit.de/2006
http://xml.zeit.de/2006/49 collection
http://xml.zeit.de/2006/52 collection
http://xml.zeit.de/2006/DSC00109_2.JPG image

>>> connector.copy('http://xml.zeit.de/2006', 'http://xml.zeit.de/2006-copy')
>>> zeit.connector.testing.print_tree(connector, 'http://xml.zeit.de/2006-copy')
http://xml.zeit.de/2006-copy
http://xml.zeit.de/2006-copy/49 collection
http://xml.zeit.de/2006-copy/52 collection
http://xml.zeit.de/2006-copy/DSC00109_2.JPG image

Clean this up again:

>>> del connector['http://xml.zeit.de/2006-copy']

Collections
===========

Creating collections works like creating any other resource. Create a resource
object first:

>>> collection_id = 'http://xml.zeit.de/testing/collection'
>>> coll = Resource(
...     collection_id, 'collection', 'collection', StringIO.StringIO(''))

Add the collection rssource to the dav and see we get it back:
>>> connector.add(coll)
>>> res = connector[collection_id]
>>> res.type
'collection'

Initially a collection is empty:

>>> list(connector.listCollection(collection_id))
[]


Remove the collection again:

>>> del connector[collection_id]

Existing collections also have a getlastmodified:

>>> pprint(dict(connector['http://xml.zeit.de/online/2007'].properties))
{('getlastmodified', 'DAV:'): u'Fri, 07 Mar 2008 12:47:16 GMT',
 ('type', 'http://namespaces.zeit.de/CMS/meta'): 'collection'}



Internal Id to Path Mapper
==========================

There is an internal method mapping Ids to paths on the filesystem:

>>> connector._path('http://xml.zeit.de/')
()
>>> connector._path('http://xml.zeit.de/foo')
(u'foo',)



Search
======

There is a search interface which we very bluntly mock. Define some search
variables:

>>> from zeit.connector.search import SearchVar
>>> author = SearchVar('author', 'http://namespaces.zeit.de/CMS/document')
>>> volume = SearchVar('volume', 'http://namespaces.zeit.de/CMS/document')
>>> year = SearchVar('year', 'http://namespaces.zeit.de/CMS/document')
>>> ressort = SearchVar('ressort', 'http://namespaces.zeit.de/CMS/document')


Do a search, note that the mock always returns the same but does print out the
query:

>>> list(connector.search(
...     [author, volume, ressort],
...     (year == '2007') & (volume == '07') & (author == 'pm')))
Searching:  (:and (:eq "http://namespaces.zeit.de/CMS/document" "year" "2007") 
                  (:eq "http://namespaces.zeit.de/CMS/document" "volume" "07")
                  (:eq "http://namespaces.zeit.de/CMS/document" "author" "pm"))
[(u'http://xml.zeit.de/online/2007/01/Somalia', 'pm', '07', None),
 (u'http://xml.zeit.de/online/2007/01/Saarland', 'pm', '07', None),
 (u'http://xml.zeit.de/2006/52/Stimmts', 'pm', '07', None)]

When we're searching for more attributes we'll get more None's in the metadata.
For a real connector there would be real values of course:

>>> list(connector.search([author, volume, ressort, year], (year == '2007')))
Searching:  (:eq "http://namespaces.zeit.de/CMS/document" "year" "2007") 
[(u'http://xml.zeit.de/online/2007/01/Somalia', 'pm', '07', None, None),
 (u'http://xml.zeit.de/online/2007/01/Saarland', 'pm', '07', None, None),
 (u'http://xml.zeit.de/2006/52/Stimmts', 'pm', '07', None, None)]


Resetting the mock
==================

To allow tests to become isolated after making changes we can reset the mock
connector.

Currently the mock holds data:

>>> pprint(connector._data)
{'http://xml.zeit.de/2006': ...}

After resetting, the data is gone:

>>> connector._reset()
>>> connector._data
{}


Please note that this is an a utility function that does not belong to the
IConnector interface and is only used for isolating tests.

Caches
======

Body cache
++++++++++

We are caching the bodies of resources. The cache removes objects a given time
after the last access, by default 30 days.

>>> import zeit.connector.cache
>>> cache = zeit.connector.cache.ResourceCache()

Let's set the cache timeout to 4 second, since we don't want to wait 30 days:

>>> cache.CACHE_TIMEOUT = 4
>>> cache.UPDATE_INTERVAL = 0.9


Validation
----------

For getting data from the cache, the cache needs the etag from the properties:

>>> properties = {('getetag', 'DAV:'): 'hurz'}

Initially the cache is empty and asking for a non  cached entry yields a
KeyError:

>>> cache.getData('some-id', properties)
Traceback (most recent call last):
    ...
KeyError: u"Object 'some-id' is not cached."


Set some data. `setData` returns either a StringIO or an open file handle. What
it returns depends on the size of the input data. For small data is returned as
StringIO:

>>> from StringIO import StringIO
>>> data = StringIO('datadata/end of line.')
>>> file_handle = cache.setData('some-id', properties, data)
>>> file_handle
<cStringIO.StringI object at 0x...>
>>> file_handle.read()
'datadata/end of line.'

We can get the data also via `getData` now which also returns a StringIO for
small objects:

>>> cache.getData('some-id', properties)
<cStringIO.StringI object at 0x...>

We have data in the cache. Since it's a small object it is stored as a
reference to a plain string:

>>> from zeit.connector.cache import get_storage_key
>>> cached = cache._data[get_storage_key('some-id')]
>>> cached
<zeit.connector.cache.Body object at 0x...>
>>> cached.data
'datadata/end of line.'
>>> cached.open('r')
<cStringIO.StringI object at 0x...>
>>> cached.open('r').read()
'datadata/end of line.'

Also the access times are noted in the cache:

>>> last_access = cache._last_access_time[get_storage_key('some-id')]
>>> isinstance(last_access, (int, long))
True
>>> cache._access_time_to_ids[last_access]
<BTrees.OIBTree.OITreeSet object at 0x...>
>>> list(cache._access_time_to_ids[last_access])
['some-id']


When we now access getData the access time will not be update since less than
1 second has passed:

>>> cache.getData('some-id', properties)
<cStringIO.StringI object at 0x...>
>>> cache._last_access_time[get_storage_key('some-id')] == last_access
True

Let's wait 1 second:

>>> import time
>>> time.sleep(1)

If we access now the time will be updated:

>>> cache.getData('some-id', properties)
<cStringIO.StringI object at 0x...>
>>> new_access = cache._last_access_time[get_storage_key('some-id')]
>>> new_access > last_access
True

Also the the time to id mapping has been updated:

>>> list(cache._access_time_to_ids[last_access])
[]
>>> cache._access_time_to_ids[new_access]
<BTrees.OIBTree.OITreeSet object at 0x...>
>>> list(cache._access_time_to_ids[new_access])
['some-id']

Removal of cached bodies by time out
------------------------------------

Add another resource to the cache to see how resources are removed from the
cache:

>>> data = StringIO('another text')
>>> cache.setData('another-id', properties, data)
<cStringIO.StringI object at 0x...>

We now have two elements in the cache:

>>> sorted(get_storage_key(k) for k in cache._last_access_time.keys())
['another-id', 'some-id']

Now sleep another 4 second and see the `some-id` will be gone after sweeping:

>>> time.sleep(1)
>>> cache.sweep()
>>> cache.getData('another-id', properties)
<cStringIO.StringI object at 0x...>
>>> sorted(get_storage_key(k) for k in cache._last_access_time.keys())
['another-id', 'some-id']

Still there ...

>>> time.sleep(1)
>>> cache.sweep()
>>> cache.getData('another-id', properties)
<cStringIO.StringI object at 0x...>
>>> sorted(get_storage_key(k) for k in cache._last_access_time.keys())
['another-id', 'some-id']

Still there ...

>>> time.sleep(1)
>>> cache.sweep()
>>> cache.getData('another-id', properties)
<cStringIO.StringI object at 0x...>
>>> sorted(get_storage_key(k) for k in cache._last_access_time.keys())
['another-id', 'some-id']

Now it's gone:

>>> time.sleep(1)
>>> cache.sweep()
>>> cache.getData('another-id', properties)
<cStringIO.StringI object at 0x...>
>>> sorted(get_storage_key(k) for k in cache._last_access_time.keys())
['another-id']

We don't have any data stored for the key now:

>>> cache._data[get_storage_key('some-id')]
Traceback (most recent call last):
    ...
KeyError: ...


Large data handling
-------------------

For large objects we store a blob. What a large object is, is determined by the
buffer size:

>>> BUFFER_SIZE = zeit.connector.cache.Body.BUFFER_SIZE

Create data which is large than that:


>>> large_data = 'Large' + ('Data' * BUFFER_SIZE)
>>> 
>>> file_handle = cache.setData(
...     'some-id', properties, StringIO(large_data))
>>> file_handle
<open file '...', mode 'rb' at 0x...>
>>> file_handle.read() == large_data
True

We can get the data also via `getData` which returns an open file handle:

>>> type(cache.getData('some-id', properties))
<type 'file'>
>>> cache.getData('some-id', properties)
<open file '...', mode 'rb' at 0x...>

Internally a blob is created in this case:

>>> body = cache._data[get_storage_key('some-id')]
>>> body
<zeit.connector.cache.Body object at 0x...>
>>> body.data
<ZODB.blob.Blob object at 0x...>

When the transaction is commited we'll get a file directly from the blob
storage. Make the blob commited:

>>> import transaction
>>> transaction.commit()

We get the commited data now:

>>> cache.getData('some-id', properties)
<open file '...', mode 'rb' at 0x...>
>>> cache.getData('some-id', properties).read() == large_data
True

Transaction integration
-----------------------

When a resource is just read from the cache, no part of the cache needs to be
written to the database (given that no timeouts had to be updated).

Create a new cache and attach it to the database root:

>>> cache = zeit.connector.cache.ResourceCache()
>>> getRootFolder()['cache'] = cache
>>> transaction.commit()

Add an object to the cache and commit:

>>> data = StringIO('Frodo went deep into Mordor.')
>>> properties = {('getetag', 'DAV:'): 'ent'}
>>> file_handle = cache.setData('mordor', properties, data)
>>> transaction.commit()

After commiting everything is "not changed" of course. Now get an the object
from the cache:

>>> file_handle = cache.getData('mordor', properties)

All the cache parts are still not changed:

>>> cache._p_changed
False
>>> cache._data._p_changed
False
>>> cache._last_access_time._p_changed
False
>>> cache._access_time_to_ids._p_changed
False
>>> [s for s in cache._access_time_to_ids.values() if s._p_changed]
[]


Conflict resolution
-------------------

Body conflict resolution works by comparing etags. When conflicting etags are
different the result state is "not cached". When the etags are equal, the state
is preserved.

Note that we don't handle the case where the etags are equal but the bodies are
different. We don't expect this to happen.

>>> import tempfile
>>> blob_dir = tempfile.mkdtemp()
>>> from zeit.connector.testing import get_storage
>>> from ZODB import DB
>>> db = DB(get_storage(blob_dir))
>>> transactionmanager_1 = transaction.TransactionManager()
>>> transactionmanager_2 = transaction.TransactionManager()
>>> connection_1 = db.open(transaction_manager=transactionmanager_1)
>>> root_1 = connection_1.root()

>>> c_1 = root_1["cache"] = zeit.connector.cache.ResourceCache()
>>> body = StringIO('A small file' * BUFFER_SIZE)
>>> dummy = c_1.setData('id', {('getetag', 'DAV:'): 'initial-etag'}, body)
>>> transactionmanager_1.commit()

>>> transactionmanager_2 = transaction.TransactionManager()
>>> connection_2 = db.open(transaction_manager=transactionmanager_2)
>>> root_2 = connection_2.root()
>>> c_2 = root_2['cache']

Different ETAGS:

>>> body1 = StringIO('Body 1' * BUFFER_SIZE)
>>> body2 = StringIO('Body 2' * BUFFER_SIZE)
>>> dummy = c_1.setData('id', {('getetag', 'DAV:'): 'etag1'}, body1)
>>> dummy = c_2.setData('id', {('getetag', 'DAV:'): 'etag2'}, body2)
>>> transactionmanager_2.commit()
>>> transactionmanager_1.commit()
>>> connection_1.sync()
>>> connection_2.sync()
>>> c_1.getData('id', {('getetag', 'DAV:'): 'etag1'})
Traceback (most recent call last):
    ...
KeyError: u"Object 'id' is not cached."
>>> c_2.getData('id', {('getetag', 'DAV:'): 'etag2'})
Traceback (most recent call last):
    ...
KeyError: u"Object 'id' is not cached."

The same ETAG also doesn't generate a conflict:

>>> dummy = c_1.setData('id', {('getetag', 'DAV:'): 'etag3'}, body)
>>> dummy = c_2.setData('id', {('getetag', 'DAV:'): 'etag3'}, body)
>>> transactionmanager_2.commit()
>>> transactionmanager_1.commit()
>>> connection_1.sync()
>>> connection_2.sync()
>>> c_1.getData('id', {('getetag', 'DAV:'): 'etag3'}).read()
'A small fileA small...'
>>> c_2.getData('id', {('getetag', 'DAV:'): 'etag3'}).read()
'A small fileA small...'


Property Cache
++++++++++++++

The property cache stores all the webdav proprties[#cleanup]_:

>>> cache = zeit.connector.cache.PropertyCache()

Validate the interface:

>>> import zope.interface.verify
>>> zope.interface.verify.verifyObject(
...     zeit.connector.interfaces.IPersistentCache,
...     cache)
True

Test the methods:

>>> cache['id'] = {'foo': 'bar'}
>>> dict(cache['id'])
{<WebDAVPropertyKey foo>: 'bar'}
>>> dict(cache.get('id'))
{<WebDAVPropertyKey foo>: 'bar'}
>>> cache.get('foo', "don't have that")
"don't have that"

>>> 'id' in cache
True
>>> 'blafasel' in cache
False
>>> list(cache.keys())
['id']

>>> del cache['id']
>>> cache['id']
Traceback (most recent call last):
    ...
KeyError: 'id'

>>> cache.get('id') is None
True
>>> list(cache.keys())
[]

Note that there is actually still the entry in the cache, but marked as
deleted:

>>> list(cache.keys(include_deleted=True))
['id']

To really remove there is the remove method, which also works for "deleted"
keys:

>>> cache.remove('id')
>>> list(cache.keys(include_deleted=True))
[]

The property cache does some magic to prevent extensive memory consumption. The
keys in the cache *values* are rather few, maybe 200. So it keeps track of the
different keys and stores/returns references to already passed ones.

>>> key = ('ns', 'name')
>>> properties = {key: 'somevalue'}
>>> cache['id'] = properties

Store another property set with another instance of "key":

>>> key2 = ('ns', 'name')
>>> key == key2
True
>>> key is key2
False

>>> cache['otherid'] = {key2: 'othervalue'}

When we get the properties of 'otherid' back, the key2 is the same instance as
key:

>>> key2_back = cache['otherid'].keys()[0]
>>> key2_back == key2 == key
True
>>> key2_back is key2
False

We can also directly set keys on the property dict:

>>> cache['id']['foo'] = 'zoot'
>>> cache['id']['foo']
'zoot'

Note that the key is also munged into a WebDAVPropertyKey:

>>> cache['id'].keys()
[<WebDAVPropertyKey foo>, <WebDAVPropertyKey ('ns', 'name')>]

Removing also works directly:

>>> del cache['id']['foo']

The cache keeps track of the used keys:

>>> import pprint
>>> pprint.pprint(zeit.connector.cache.WebDAVPropertyKey._instances)
{'foo': <WebDAVPropertyKey foo>,
 ('ns', 'name'): <WebDAVPropertyKey ('ns', 'name')>}


When the a value is set to the cache which is equal to the value it alreay
stores, the new value is not updated. We verify this by setting a new value
which is equal but not the same:

>>> dict(cache['id'])
{<WebDAVPropertyKey ('ns', 'name')>: 'somevalue'}
>>> new_properties =  {('ns', 'name'): u'somevalue'}

Setting ``new_properties`` does not update the ``somevalue`` to unicode:

>>> cache['id'] = new_properties
>>> dict(cache['id'])
{<WebDAVPropertyKey ('ns', 'name')>: 'somevalue'}


Note that internally no dictionaries are stored but a special object which also
does conflict resolution:

>>> cache._storage['id']
<zeit.connector.cache.Properties object at 0x...>



Conflict resolution
-------------------

The property cache resolves conflicts in a very brutal way as it considers the
cache stale when ever there was a conflict. Since it is only a cache we do not
loose any data here.

Note that the most common conflicts are value changes *in* the cache. We do not
change the conflict resolution of the underling btree.


#>>> db = DB(ConflictResolvingMappingStorage('test'))
#>>> transactionmanager_1 = transaction.TransactionManager()
#>>> transactionmanager_2 = transaction.TransactionManager()
#>>> connection_1 = db.open(transaction_manager=transactionmanager_1)
#>>> root_1 = connection_1.root()

>>> c_1 = root_1["cache"] = zeit.connector.cache.PropertyCache()
>>> c_1['id'] = {'foo': 'bar'}
>>> transactionmanager_1.commit()

>>> transactionmanager_2 = transaction.TransactionManager()
>>> connection_2 = db.open(transaction_manager=transactionmanager_2)
>>> root_2 = connection_2.root()
>>> c_2 = root_2['cache']

>>> c_1['id'] = {'foo': 'baz'}
>>> c_2['id'] = {'oink': 'chackalacka'}
>>> transactionmanager_2.commit()
>>> transactionmanager_1.commit()
>>> connection_1.sync()
>>> connection_2.sync()
>>> c_1['id']
Traceback (most recent call last):
    ...
KeyError: 'id'
>>> c_2['id']
Traceback (most recent call last):
    ...
KeyError: 'id'


When the conflicting state is *equal* it is kept, though:

>>> c_1['id'] = {'foo': 'baz'}
>>> c_2['id'] = {'foo': 'baz'}
>>> transactionmanager_2.commit()
>>> transactionmanager_1.commit()
>>> connection_1.sync()
>>> connection_2.sync()
>>> dict(c_1['id'])
{<WebDAVPropertyKey foo>: 'baz'}
>>> dict(c_2['id'])
{<WebDAVPropertyKey foo>: 'baz'}


The conflict resolution ignores the property {INTERNAL}cached-time when
determining if two property sets are equal. This is fairly save because:

1. The cached-time is only relevant when the resource is locked.

2. When the resource is locked, the lock timeout is indicated in seconds from
   the cached time. When the cached times differ much, the lock timeout will
   differ. Thus the properties are not equal.

Note that the cached time of the transaction wins which is commited last:

>>> import datetime
>>> import pytz
>>> c_1['id'][('cached-time', 'INTERNAL')] = datetime.datetime(
...     2008, 1, 1, tzinfo=pytz.UTC).isoformat()
>>> c_2['id'][('cached-time', 'INTERNAL')] = datetime.datetime(
...     2009, 4, 7, tzinfo=pytz.UTC).isoformat()
>>> transactionmanager_2.commit()
>>> transactionmanager_1.commit()
>>> connection_1.sync()
>>> connection_2.sync()
>>> dict(c_1['id'])
{<WebDAVPropertyKey ('cached-time', 'INTERNAL')>: '2008-01-01T00:00:00+00:00',
 <WebDAVPropertyKey foo>: 'baz'}
>>> dict(c_2['id'])
{<WebDAVPropertyKey ('cached-time', 'INTERNAL')>: '2008-01-01T00:00:00+00:00',
 <WebDAVPropertyKey foo>: 'baz'}


When there was an attribute set on the cache entry, it cannot be resolved any
longer:

>>> c_1['id'].foo = 'bar'
>>> c_2['id'][('hick', 'hack')] = 'huck'
>>> transactionmanager_2.commit()
>>> transactionmanager_1.commit()  # doctest: +IGNORE_EXCEPTION_DETAIL
Traceback (most recent call last):
    ...
ConflictError: database conflict error

>>> transactionmanager_1.abort()

Child name cache
++++++++++++++++

The childname cache just stores a mapping of unique id to a list of child
names:

>>> cache = zeit.connector.cache.ChildNameCache()
>>> cache['id'] = ['foo', 'bar', 'baz']

The data is returned as a ChildNames object which also sorts the ids:

>>> cache['id']
<zeit.connector.cache.ChildNames object at 0x...>
>>> list(cache['id'])
['bar', 'baz', 'foo']

When we remove things from the cache they're gone:

>>> del cache['id']
>>> cache['id']
Traceback (most recent call last):
    ...
KeyError: 'id'

>>> cache.get('id') is None
True

But actually the're just marked as deleted:

>>> cache._storage['id']
<zeit.connector.cache.ChildNames object at 0x...>
>>> list(cache._storage['id'])
[DeleteProperty]


When the a value is set to the cache which is equal to the value it alreay
stores, the new value is not updated. We verify this by setting a new value
which is equal but not the same:

>>> cache['id'] = ['foo', 'bar', 'baz']
>>> new_children =  ['foo', 'bar', u'baz']

Setting ``new_children`` does not update ``baz`` to unicode:

>>> cache['id'] = new_children
>>> list(cache['id'])
['bar', 'baz', 'foo']

Conflict resolution
-------------------

The conflict resolution works like the property cache:

>>> c_1 = root_1["cache"] = zeit.connector.cache.ChildNameCache()
>>> c_1['id'] = ('foo', 'bar')
>>> transactionmanager_1.commit()

>>> transactionmanager_2 = transaction.TransactionManager()
>>> connection_2 = db.open(transaction_manager=transactionmanager_2)
>>> root_2 = connection_2.root()
>>> c_2 = root_2['cache']

>>> c_1['id'] = ('baz',)
>>> c_2['id'] = ('oink', 'chackalacka')
>>> transactionmanager_2.commit()
>>> transactionmanager_1.commit()
>>> connection_1.sync()
>>> connection_2.sync()
>>> c_1['id']
Traceback (most recent call last):
    ...
KeyError: 'id'
>>> c_2['id']
Traceback (most recent call last):
    ...
KeyError: 'id'

When the conflicting state is *equal* it is kept, though:

>>> c_1['id'] = ('foo',)
>>> c_2['id'] = ('foo',)
>>> transactionmanager_2.commit()
>>> transactionmanager_1.commit()
>>> connection_1.sync()
>>> connection_2.sync()
>>> list(c_1['id'])
['foo']
>>> list(c_2['id'])
['foo']


Clean:

>>> import shutil
>>> shutil.rmtree(blob_dir)

.. [#cleanup] 

    We need to manually clear the key cache from previous tests runs due to
    isolation problems:

    >>> zeit.connector.cache.WebDAVPropertyKey._instances.clear()

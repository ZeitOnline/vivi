Invalidation events
===================

Invalidation events notify the connector and its caches that a resource has
changed.

>>> import zope.app.component.hooks
>>> old_site = zope.app.component.hooks.getSite()
>>> zope.app.component.hooks.setSite(getRootFolder())

Get the connector:

>>> import zope.component
>>> import zeit.connector.interfaces
>>> connector = zope.component.getUtility(
...     zeit.connector.interfaces.IConnector)
>>> connector
<zeit.connector.zopeconnector.ZopeConnector object at 0x...>


There are differen scenarios.

An object was created in dav. An invalidation event reloads this object and
inserts the id into the parent's child ids. That means that the connector will
not see objects which are not invalidated:

>>> testing = 'http://xml.zeit.de/testing/'
>>> inv = testing + 'inv1'
>>> inv2 = testing + 'inv2'
>>> list(connector.listCollection(testing))
[]
>>> conn = connector.get_connection()
>>> result = conn.put(connector._id2loc(inv), 'pop.', 'text/plain')
>>> result = conn.put(connector._id2loc(inv2), 'peep.', 'text/plain')
>>> list(connector.listCollection(testing))
[]
>>> zope.event.notify(zeit.connector.interfaces.ResourceInvaliatedEvent(inv))

We really only see inv1 here:

>>> list(connector.listCollection(testing))
[(u'inv1', u'http://xml.zeit.de/testing/inv1')]
>>> print connector[inv].data.read()
pop.
>>> print connector[inv2].data.read()
peep.

When an object changes the invalidaton will also tell the connector to reload:

>>> result = conn.put(connector._id2loc(inv), 
...                   'Mary had a little lamb.', 'text/plain')
>>> result = conn.put(connector._id2loc(inv2), 
...                   'Mary had a little ogre.', 'text/plain')
>>> connector[inv].data.read()
'pop.'
>>> zope.event.notify(zeit.connector.interfaces.ResourceInvaliatedEvent(inv))
>>> print connector[inv].data.read()
Mary had a little lamb.
>>> print connector[inv2].data.read()
peep.

When an object is remove in the dav the connector only sees this after an
invalidation event. The object id is removed from the parent's child ids:

>>> result = conn.delete(connector._id2loc(inv))
>>> result = conn.delete(connector._id2loc(inv2))
>>> list(connector.listCollection(testing))
[(u'inv1', u'http://xml.zeit.de/testing/inv1')]
>>> zope.event.notify(zeit.connector.interfaces.ResourceInvaliatedEvent(inv))
>>> list(connector.listCollection(testing))
[]
>>> connector[inv]
Traceback (most recent call last):
    ...
KeyError: "The resource u'http://xml.zeit.de/testing/inv1' does not exist."

Events non existing resource do not harm:

>>> zope.event.notify(zeit.connector.interfaces.ResourceInvaliatedEvent(
...     testing + 'not-there'))


Sending an invalidation event with an id which does not belong to the connector
at all doesn't harm either:

>>> zope.event.notify(zeit.connector.interfaces.ResourceInvaliatedEvent(
...     'the quick brown fox'))




Clean up:

>>> zope.app.component.hooks.setSite(old_site)

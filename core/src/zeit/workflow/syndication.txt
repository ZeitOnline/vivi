===========
Syndication
===========

When objects which are adaptable to IWorkflow are syndicated, the publication
and expiration date will be added to the feed.

Create a dummy content object:

>>> import zope.interface
>>> import zeit.cms.interfaces
>>> import zeit.workflow.interfaces
>>> 
>>> class Content(object):
...     zope.interface.implements(
...         zeit.workflow.interfaces.IWorkflowStatus,
...         zeit.cms.interfaces.ICMSContent)
...     uniqueId = 'content1'
...     released_from = None
...     released_to = None

Create a feed:

>>> import zeit.cms.syndication.feed
>>> feed = zeit.cms.syndication.feed.Feed()


Insert an object in the feed:

>>> content = Content()
>>> feed.insert(0, content)

There is no expiration/publication date in the feed, because we have not set
any:

>>> print feed.xml_source
<channel xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:py="http://codespeak.net/lxml/objectify/pytype">
  <title/>
  <container>
    <block href="content1" publication-date="" expires=""/>
  </container>
  <object_limit py:pytype="int">50</object_limit>
</channel>


When we set the expiration and/or publication date the change will be
reflected:

>>> import datetime
>>> import pytz
>>> content.released_from = datetime.datetime(
...     2008, 1, 5, 16, 0, tzinfo=pytz.UTC)
>>> content.released_to = datetime.datetime(2008, 1, 6, tzinfo=pytz.UTC)
>>> feed.updateMetadata(content)
>>> print feed.xml_source
<channel xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:py="http://codespeak.net/lxml/objectify/pytype">
  <title/>
  <container>
    <block href="content1" publication-date="2008-01-05T16:00:00+00:00" expires="2008-01-06T00:00:00+00:00"/>
  </container>
  <object_limit py:pytype="int">50</object_limit>
</channel>

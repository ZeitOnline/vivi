Workflow indicators
===================

Content workflow
++++++++++++++++

There is an viewlet manager which renders workflow indicators for content
objects (note that the ``view`` argument is not really relevant)[#setup]_:

>>> a_view = zope.component.getMultiAdapter(
...     (repository, request), name='view.html')
>>> viewlet_manager = zope.component.getMultiAdapter(
...     (content, request, a_view),
...     zope.viewlet.interfaces.IViewletManager,
...     name='zeit.cms.workflow-indicator')
>>> viewlet = viewlet_manager['status']
>>> viewlet
<zope.viewlet.metaconfigure.ContentStatus object at 0x...>
>>> viewlet.update()
>>> print viewlet.render()
<span title="Edited: no" class="content-status state-no">E</span>
<span title="Corrected: no" class="content-status state-no">C</span>
<span title="Refined: no" class="content-status state-no">R</span>
<span title="Images added: no" class="content-status state-no">I</span>


Change some states:

>>> import zeit.workflow.interfaces
>>> workflow = zeit.workflow.interfaces.IContentWorkflow(content)
>>> workflow.edited = True
>>> workflow.refined = zeit.workflow.interfaces.NotNecessary
>>> print viewlet.render()
<span title="Edited: yes" class="content-status state-yes">E</span>
<span title="Corrected: no" class="content-status state-no">C</span>
<span title="Refined: not necessary" class="content-status state-notnecessary">R</span>
<span title="Images added: no" class="content-status state-no">I</span>


Asset workflow
++++++++++++++

For assets there is also a viewlet registered, but it doesn't render anything:

Make the test content type an asset to test the workflow:

>>> import zope.interface
>>> import zeit.cms.interfaces
>>> import zeit.cms.testcontenttype.testcontenttype
>>> old_implements = list(zope.interface.implementedBy(
...     zeit.cms.testcontenttype.testcontenttype.TestContentType))
>>> zope.interface.classImplementsOnly(
...     zeit.cms.testcontenttype.testcontenttype.TestContentType,
...     zeit.cms.interfaces.IAsset)
>>> content = repository['testcontent']

Get a new viewlet manager:

>>> zeit.cms.interfaces.IAsset.providedBy(content)
True
>>> viewlet_manager = zope.component.getMultiAdapter(
...     (content, request, a_view),
...     zope.viewlet.interfaces.IViewletManager,
...     name='zeit.cms.workflow-indicator')
>>> viewlet = viewlet_manager['status']
>>> viewlet
<zope.viewlet.metaconfigure.AssetStatus object at 0x...>
>>> viewlet.update()
>>> viewlet.render()
u''

Reset the implements:

>>> zope.interface.classImplementsOnly(
...     zeit.cms.testcontenttype.testcontenttype.TestContentType,
...     *old_implements)

Clean up:

>>> zope.security.management.endInteraction()
>>> zope.app.component.hooks.setSite(old_site)


.. [#setup]

    >>> import zope.app.component.hooks
    >>> old_site = zope.app.component.hooks.getSite()
    >>> zope.app.component.hooks.setSite(getRootFolder())

    >>> import zeit.cms.repository.interfaces
    >>> repository = zope.component.getUtility(
    ...     zeit.cms.repository.interfaces.IRepository)
    >>> content = repository['testcontent']

    >>> import zope.publisher.browser
    >>> import zope.security.testing
    >>> import zeit.cms.browser.interfaces
    >>> request = zope.publisher.browser.TestRequest(
    ...     skin=zeit.cms.browser.interfaces.ICMSSkin)
    >>> request.setPrincipal(
    ...     zope.security.testing.Principal(u'zope.globalmgr'))
    >>> import zope.security.management
    >>> zope.security.management.newInteraction(request)


Automatic syndication
=====================

Objects may be automatically syndicated after they have been
published[#setup]_. 

The workflow can be accessed by the interface:

>>> import zeit.cms.interfaces
>>> content = zeit.cms.interfaces.ICMSContent('http://xml.zeit.de/testcontent')
>>> asw = zeit.workflow.interfaces.IAutoSyndicationWorkflow(content)

The content should not be syndicated automatically by default.

>>> asw.automatically_syndicate_into
()

It also was not automatically syndicated anywhere, yet:

>>> asw.was_automatically_syndicated_into
()

Where content is syndicated to is configured by rules. Currently there is only
one rule: If content has ICommonMetata['serie'] == 'news' it will be put to a
news channel:

>>> import zeit.cms.checkout.helper
>>> dummy = with_statement
>>> with zeit.cms.checkout.helper.checked_out(content) as co:
...     co.serie = u'News'
>>> asw.automatically_syndicate_into
(<zeit.cms.syndication.feed.Feed object at 0x...>,)
>>> asw.automatically_syndicate_into[0].uniqueId
u'http://xml.zeit.de/politik.feed'


Publish content:

>>> import zeit.cms.workflow.interfaces
>>> info = zeit.cms.workflow.interfaces.IPublishInfo(content)
>>> info.urgent = True
>>> publish = zeit.cms.workflow.interfaces.IPublish(content)
>>> job_id = publish.publish()
>>> tasks.process()
>>> info.published
True


The tuple ``automatically_syndicate_into`` is empty now, but the tuple
``was_automatically_syndicated_into`` indicates that the content was
syndicated:

>>> asw.automatically_syndicate_into
()
>>> asw.was_automatically_syndicated_into
(<zeit.cms.syndication.feed.Feed object at 0x...>,)
>>> asw.was_automatically_syndicated_into[0].uniqueId
u'http://xml.zeit.de/politik.feed'

>>> politik = zeit.cms.interfaces.ICMSContent(
...     'http://xml.zeit.de/politik.feed')
>>> content in politik
True
>>> politik.getPosition(content)
1


The politik channel was automaticall published by the implicit syndication:

>>> zeit.cms.workflow.interfaces.IPublishInfo(politik).published
True

When the content is published again, it is *not* added to the channel again.
Also the channel is not published automatically. Add another content object to
the channel, so ``content`` is no longer at the first position and retract
the politik channel:

>>> with zeit.cms.checkout.helper.checked_out(politik) as co:
...     co.insert(0, zeit.cms.interfaces.ICMSContent(
...         'http://xml.zeit.de/online/2007/01/Somalia'))
>>> politik = zeit.cms.interfaces.ICMSContent(
...     'http://xml.zeit.de/politik.feed')
>>> politik.getPosition(content)
2
>>> job_id = zeit.cms.workflow.interfaces.IPublish(politik).retract()
>>> tasks.process()
>>> zeit.cms.workflow.interfaces.IPublishInfo(politik).published
False

Publish content now:

>>> job_id = publish.publish()
>>> tasks.process()
>>> info.published
True
>>> politik.getPosition(content)
2
>>> zeit.cms.workflow.interfaces.IPublishInfo(politik).published
False


When content is no longer in the channel (because it was removed or simply
dropped out), the channel is not published either. The content is also not
added again:

>>> with zeit.cms.checkout.helper.checked_out(politik) as co:
...     co.remove(content)
>>> job_id = zeit.cms.workflow.interfaces.IPublish(politik).retract()
>>> tasks.process()
>>> zeit.cms.workflow.interfaces.IPublishInfo(politik).published
False
>>> job_id = publish.publish()
>>> tasks.process()
>>> info.published
True
>>> politik = zeit.cms.interfaces.ICMSContent(
...     'http://xml.zeit.de/politik.feed')
>>> content in politik
False
>>> zeit.cms.workflow.interfaces.IPublishInfo(politik).published
False


.. [#setup] 

    >>> import zeit.cms.testing
    >>> import zope.component
    >>> zeit.cms.testing.set_site()
    >>> principal = zeit.cms.testing.create_interaction()
    >>> import lovely.remotetask.interfaces
    >>> tasks = zope.component.getUtility(
    ...     lovely.remotetask.interfaces.ITaskService, 'general')



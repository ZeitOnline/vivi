Special dependencies
====================

Relateds
++++++++

When an object is published, its relateds are published along *iff* they have
no semantic changes but have changed in a non semantic manner::

    last-semantic-change < last-publish < last-non-semantic-change 
    

When we relate objects they're published together[#functional]_:

>>> content = repository['testcontent']
>>> somalia = repository['online']['2007']['01']['Somalia']
>>> import zeit.cms.related.interfaces
>>> with zeit.cms.checkout.helper.checked_out(content) as checked_out:
...     relateds = zeit.cms.related.interfaces.IRelatedContent(checked_out)
...     relateds.related = (somalia,)

Somalia is related by testcontent but has never been published. So when
publishing testcontent Somalia will not be publishd[#somalia-semantic-change]_:

>>> publish = zeit.cms.workflow.interfaces.IPublish(content)
>>> workflow = zeit.cms.workflow.interfaces.IPublishInfo(content)
>>> somalia_publish = zeit.cms.workflow.interfaces.IPublish(somalia)
>>> somalia_workflow = zeit.cms.workflow.interfaces.IPublishInfo(somalia)
>>> workflow.urgent = True
>>> workflow.published
False
>>> somalia_workflow.published
False
>>> job_id = publish.publish()
>>> tasks.process()
>>> workflow.published
True
>>> somalia_workflow.published
False

When somalia is published and changed by a related update it will be published
again when publishing testcontent.

>>> somalia_workflow.urgent = True
>>> job_id = somalia_publish.publish()
>>> tasks.process()
>>> somalia_workflow.published
True
>>> somalia_published_on = somalia_workflow.date_last_published
>>> somalia = repository['online']['2007']['01']['Somalia']
>>> dc = zope.dublincore.interfaces.IDCTimes(somalia)

Also wait bit to make sure the modification date is larger. This is necessary
because it doesn't have microseconds:

>>> import time
>>> time.sleep(2)

Make a non semantic change to "Somalia"

>>> with zeit.cms.checkout.helper.checked_out(
...     somalia, semantic_change=False):
...     pass
>>> publish = zeit.cms.workflow.interfaces.IPublish(content)
>>> workflow = zeit.cms.workflow.interfaces.IPublishInfo(content)

>>> import zeit.cms.content.interfaces
>>> import zope.dublincore.interfaces
>>> somalia = repository['online']['2007']['01']['Somalia']
>>> dc = zope.dublincore.interfaces.IDCTimes(somalia)
>>> sc = zeit.cms.content.interfaces.ISemanticChange(somalia)

Now the relation between the dates satisfies the auto-publish constraint:

>>> sc.last_semantic_change < somalia_published_on < dc.modified
True

Publishing testcontent will publish somalia now:

>>> job_id = publish.publish()
>>> tasks.process()
>>> somalia_workflow.date_last_published > somalia_published_on
True

If Somalia is not published it will of couse not published automatically, even
if the date relation constraint is satisfied:

>>> time.sleep(1)
>>> job_id = somalia_publish.retract()
>>> tasks.process()
>>> somalia = repository['online']['2007']['01']['Somalia']
>>> dc = zope.dublincore.interfaces.IDCTimes(somalia)
>>> sc = zeit.cms.content.interfaces.ISemanticChange(somalia)
>>> somalia_published_on = somalia_workflow.date_last_published
>>> sc.last_semantic_change < somalia_published_on < dc.modified
True
>>> job_id = publish.publish()
>>> tasks.process()
>>> somalia = repository['online']['2007']['01']['Somalia']
>>> somalia_workflow = zeit.cms.workflow.interfaces.IPublishInfo(somalia)
>>> somalia_workflow.published
False


The dependency publisher does not fail, if there is no last semantic change:

>>> ford = repository['online']['2007']['01']['Ford-Beerdigung']
>>> zeit.cms.content.interfaces.ISemanticChange(ford).last_semantic_change
>>> with zeit.cms.checkout.helper.checked_out(content) as checked_out:
...     relateds = zeit.cms.related.interfaces.IRelatedContent(checked_out)
...     relateds.related = (ford,)
>>> content = repository['testcontent']
>>> import zeit.workflow.dependency
>>> related_dependencies = zeit.workflow.dependency.Relateds(content)
>>> related_dependencies.get_dependencies()
[]

Even if the related was published:

>>> ford_workflow= zeit.cms.workflow.interfaces.IPublishInfo(ford)
>>> ford_workflow.urgent = True
>>> ford_publish = zeit.cms.workflow.interfaces.IPublish(ford)
>>> job_id = ford_publish.publish()
>>> tasks.process()
>>> related_dependencies.get_dependencies()
[]

Cleanup:

>>> zeit.workflow.publish.PUBLISHED_FUTURE_SHIFT = old_shift

.. [#functional]

    >>> import zeit.cms.testing
    >>> zeit.cms.testing.set_site()
    >>> principal = zeit.cms.testing.create_interaction()

    Do some imports and get the repository

    >>> import zope.component
    >>> import zeit.cms.repository.interfaces
    >>> import zeit.cms.workflow.interfaces
    >>> repository = zope.component.getUtility(
    ...     zeit.cms.repository.interfaces.IRepository)

    >>> import lovely.remotetask.interfaces
    >>> tasks = zope.component.getUtility(
    ...     lovely.remotetask.interfaces.ITaskService, 'general')
    
    >>> import zeit.cms.checkout.helper
    >>> import zeit.workflow.publish
    >>> old_shift = zeit.workflow.publish.PUBLISHED_FUTURE_SHIFT
    >>> zeit.workflow.publish.PUBLISHED_FUTURE_SHIFT = 0.1

.. [#somalia-semantic-change] Somalia needs a semantic change:

    >>> with zeit.cms.checkout.helper.checked_out(
    ...     somalia, semantic_change=True):
    ...     pass
    >>> somalia = repository['online']['2007']['01']['Somalia']

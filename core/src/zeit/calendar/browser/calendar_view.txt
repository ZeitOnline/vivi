=============
Calendar View
=============


Monthly Calendar
================

The calendar view provides some helper functionality::

    >>> from zope.publisher.browser import TestRequest
    >>> from zeit.calendar.browser.calendar_view import Calendar
    >>> class CalendarMock(object):
    ...
    ...     def getEvents(self, date):
    ...         if date.day == 12:
    ...             return ['this-could-be-an-event']
    ...         return None
    ...
    ...     def haveEvents(self, date):
    ...         if date.day == 12:
    ...             return True
    ...         return False
    ...

Request a calendar for 6/2006::

    >>> request = TestRequest(form={'year': 2001, 'month': 6})
    >>> calendar = Calendar(CalendarMock(), request)

According to the request we expect the calendar for 6/2001 back::

    >>> calendar.selected_year
    2001
    >>> calendar.selected_month
    6
    >>> from pprint import pprint
    >>> pprint(calendar.selected_month_calendar)
    [[None,
      None,
      None,
      None,
      {'date_str': '2001-06-01',
       'day': 1,
       'events': None,
       'have_events': False,
       'is_today': False},
      {'date_str': '2001-06-02',
       'day': 2,
       'events': None,
       'have_events': False,
       'is_today': False},
       ...
      {'date_str': '2001-06-10',
       'day': 10,
       'events': None,
       'have_events': False,
       'is_today': False}],
     [{'date_str': '2001-06-11',
       'day': 11,
       'events': None,
       'have_events': False,
       'is_today': False},
      {'date_str': '2001-06-12',
       'day': 12,
       'events': ['this-could-be-an-event'],
       'have_events': True,
       'is_today': False},
       ...
      {'date_str': '2001-06-28',
       'day': 28,
       'events': None,
       'have_events': False,
       'is_today': False},
      {'date_str': '2001-06-29',
       'day': 29,
       'events': None,
       'have_events': False,
       'is_today': False},
      {'date_str': '2001-06-30',
       'day': 30,
       'events': None,
       'have_events': False,
       'is_today': False},
      None]]

   
We can ask for the next/previous month/year. The values are relative to the
date given in the request::

    >>> calendar.forward
    datetime.date(2001, 7, 1)

    >>> calendar.backward
    datetime.date(2001, 5, 1)

    >>> calendar.fastforward
    datetime.date(2002, 6, 1)

    >>> calendar.fastbackward
    datetime.date(2000, 6, 1)



Weekly Calendar
===============

The weekly calendar is not really weekly but shows yesterday and the next
seven days::

    >>> from zeit.calendar.browser.calendar_view import Week
    >>> request = TestRequest(form={'year': 2001, 'month': 6, 'day': 13})
    >>> week = Week(CalendarMock(), request)
    >>> week
    <zeit.calendar.browser.calendar_view.Week object at 0x...>

We can get the day names. 2001-06-13 was a Wednesday. So our list starts with
Tuesday and ranges till the *next* Tuesday::

    >>> week.day_names
    ['Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun', 'Mon', 'Tue']

Get the events::

    >>> pprint(week.selected_week_calendar)
    [{'date_str': '2001-06-12',
      'day': 12,
      'events': ['this-could-be-an-event'],
      'have_events': True,
      'is_today': False},
     {'date_str': '2001-06-13',
      'day': 13,
      'events': None,
      'have_events': False,
      'is_today': False},
      ...
     {'date_str': '2001-06-19',
      'day': 19,
      'events': None,
      'have_events': False,
      'is_today': False}]

==============
Object widgets
==============

The object widgets are used to reference objects.


Create a mock repository:

>>> import zope.component
>>> import zope.interface
>>> import zeit.cms.interfaces
>>> import zeit.cms.repository.interfaces
>>>
>>> class Repository(object):
...     __parent__ = getRootFolder()
...     __name__ = 'repo'
...
...     def getContent(self, unique_id):
...         if unique_id.startswith('http://content'):
...             return Content()
...         if unique_id.startswith('http://exists'):
...             return object()
...         if not unique_id.startswith('http://'):
...             raise ValueError('Invalid id')
...         raise KeyError(unique_id)
...
>>> repository = Repository()
>>> gsm = zope.component.getGlobalSiteManager()
>>> gsm.registerUtility(
...     repository, zeit.cms.repository.interfaces.IRepository)

Create a simple content object:

>>> class Content(object):
...     zope.interface.implements(zeit.cms.interfaces.ICMSContent)
...     __parent__ = repository
...     __name__ = u'content'
...     uniqueId = 'http://content'


Create a field and bind it at an instance of `Content`:

>>> import zope.schema
>>> import zeit.cms.content.contentsource
>>> source = zeit.cms.content.contentsource.CMSContentSource()
>>> field = zope.schema.Choice(source=source)
>>> field.__name__ = 'reference'
>>> field = field.bind(Content())

Create an instance of the object reference widget:

>>> import zope.publisher.browser
>>> import zeit.cms.browser.widget
>>> request = zope.publisher.browser.TestRequest()
>>> widget = zeit.cms.browser.widget.ObjectReferenceWidget(
...     field, source, request)
>>> widget
<zeit.cms.browser.widget.ObjectReferenceWidget object at 0x...>

To browse the repository the widget needs to look up the default browsing
location. Create a mock adapter which returns the repository:

>>> def browsing_location_adapter(context, schema):
...     print "Returning location for", context
...     print "   ", schema
...     return repository
>>> import zeit.cms.browser.interfaces
>>> import zeit.cms.content.interfaces
>>> gsm.registerAdapter(
...     browsing_location_adapter,
...     (Content, zeit.cms.content.interfaces.ICMSContentSource),
...     zeit.cms.browser.interfaces.IDefaultBrowsingLocation)


Get the default browsing location now:

>>> widget.default_browsing_location
Returning location for <Content object at 0x...>
    <zeit.cms.content.contentsource.CMSContentSource object at 0x...>
<Repository object at 0x...>

The type filter token is used by the object browser to filter types:

>>> widget.type_filter_token
'all-types'


Render the widget:

>>> print widget()
Returning location for <Content object at 0x...>
    <zeit.cms.content.contentsource.CMSContentSource object at 0x...>
<div class="object-widget" id="field.reference.outerdiv">
  <input type="hidden" value="1"
         name="field.reference.present" />
  <input class="object-reference" type="text"
          id="field.reference" value=""
          name="field.reference" />
  <input title="Choose object" class="browse-objects" type="button" name="browseObjects" value="…" />
  <input title="Show object" class="show-referenced-object"
    type="button" name="showReferencedObject" value="→" />
</div>
<script>
  new ObjectReferenceWidget(
  'field.reference.outerdiv',
  'http://127.0.0.1/repo',
  'all-types',
  false);
  </script>



Set the value to an existing, valid value:

>>> request = zope.publisher.browser.TestRequest(
...     form={'field.reference': u'http://content'})
>>> widget = zeit.cms.browser.widget.ObjectReferenceWidget(
...     field, source, request)
>>> widget.getInputValue()
<Content object at 0x...>
>>> print widget()
Returning location for <Content object at 0x...>
    <zeit.cms.content.contentsource.CMSContentSource object at 0x...>
<div class="object-widget" id="field.reference.outerdiv">
  <input type="hidden" value="1" 
         name="field.reference.present" />
  <input class="object-reference" type="text"
         id="field.reference" value="http://content" 
         name="field.reference" />
  <input title="Choose object" class="browse-objects" type="button" name="browseObjects" value="…" />
  <input title="Show object" class="show-referenced-object"
    type="button" name="showReferencedObject" value="→" />
</div>
<script>
  new ObjectReferenceWidget(
  'field.reference.outerdiv',
  'http://127.0.0.1/repo',
  'all-types',
  false);
  </script>



Set the value to an existing but invalid value, so we get an validation error:

>>> request = zope.publisher.browser.TestRequest(
...     form={'field.reference': u'http://exists/blubs'})
>>> widget = zeit.cms.browser.widget.ObjectReferenceWidget(
...     field, source, request)
>>> widget.getInputValue()
Traceback (most recent call last):
    ...
WidgetInputError: ('reference', u'', <object object at 0x...>)


Note that the invalid value is rendered:

>>> print widget()
Returning location for <Content object at 0x...>
    <zeit.cms.content.contentsource.CMSContentSource object at 0x...>
<div class="object-widget" id="field.reference.outerdiv">
  <input type="hidden" value="1" 
         name="field.reference.present" />
  <input class="object-reference" type="text"
         id="field.reference" value="http://exists/blubs"
         name="field.reference" />
  <input title="Choose object" class="browse-objects" type="button" name="browseObjects" value="…" />
  <input title="Show object" class="show-referenced-object"
    type="button" name="showReferencedObject" value="→" />
</div>
<script>
  new ObjectReferenceWidget(
  'field.reference.outerdiv',
  'http://127.0.0.1/repo',
  'all-types',
  false);
  </script>



Test the validation. Set a non existent resource:
  
>>> request = zope.publisher.browser.TestRequest(
...     form={'field.reference': u'http://foo'})
>>> widget = zeit.cms.browser.widget.ObjectReferenceWidget(
...     field, source, request)
>>> widget.getInputValue()
Traceback (most recent call last):
    ...
ConversionError: (u'The object could not be found.', None)

The invalid value is still rendered though:

>>> print widget()
Returning location for <Content object at 0x...>
    <zeit.cms.content.contentsource.CMSContentSource object at 0x...>
<div class="object-widget" id="field.reference.outerdiv">
  <input type="hidden" value="1"
         name="field.reference.present" />
  <input class="object-reference" type="text"
         id="field.reference" value="http://foo"
         name="field.reference" />
  <input title="Choose object" class="browse-objects" type="button" name="browseObjects" value="…" />
  <input title="Show object" class="show-referenced-object"
    type="button" name="showReferencedObject" value="→" />
</div>
<script>
  new ObjectReferenceWidget(
  'field.reference.outerdiv',
  'http://127.0.0.1/repo',
  'all-types',
  false);
  </script>



There are also completely invalid ids:

>>> request = zope.publisher.browser.TestRequest(
...     form={'field.reference': u'invalid'})
>>> widget = zeit.cms.browser.widget.ObjectReferenceWidget(
...     field, source, request)
>>> widget.getInputValue()
Traceback (most recent call last):
    ...
ConversionError: (u'The given id is invalid.', None)



Clean up:

>>> gsm.unregisterAdapter(
...     browsing_location_adapter,
...     (Content, zeit.cms.content.interfaces.ICMSContentSource),
...     zeit.cms.browser.interfaces.IDefaultBrowsingLocation)
True
>>> gsm.unregisterUtility(
...     repository, zeit.cms.repository.interfaces.IRepository)
True


We have a special Datetime widget, which proivides buttons for in one day an
in one month:

>>> field = zope.schema.Datetime()
>>> widget = zeit.cms.browser.widget.DatetimeWidget(field, request)
>>> print widget()
<input class="textType" id="field." name="field." size="20" type="text" value=""  />
<input type="button" value="..." id="field._trigger">
<script type="text/javascript">
  Calendar.setup({
  inputField: 'field.',
  button: 'field._trigger',
  ifFormat: '%Y-%m-%d %H:%M:%S',
  showsTime: true
});
</script>
<input type="button" value="1W"
    onclick="javascript:var date = new Date();
        date.setDate(date.getDate() + 7);
        $('field.').value = date.print('%Y-%m-%d %H:%M:%S');" />
<input type="button" value="1M"
    onclick="javascript:var date = new Date();
        date.setMonth(date.getMonth() + 1);
        $('field.').value = date.print('%Y-%m-%d %H:%M:%S');" />

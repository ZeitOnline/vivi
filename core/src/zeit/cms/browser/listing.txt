===============
Folder Listings
===============

There is a general way to list folders as all listings should look the same.

Create a browser first:

>>> from z3c.etestbrowser.testing import ExtendedTestBrowser 
>>> browser = ExtendedTestBrowser()
>>> browser.addHeader('Authorization', 'Basic user:userpw')


The filelisting is to be found under /repository. To get a dojo based
FilteringTable open a specific folder:

>>> browser.open('http://localhost/++skin++cms/repository/2007/01')

We expect a normal file listing:

>>> browser.etree.xpath("//table[contains(@class, 'contentListing')]")
[<Element table...>]
>>> columns = browser.etree.xpath("//table/thead/tr/th")
>>> len(columns)
11


Hit counter
===========

When there is an adapter to IAccessCounter the information provided by the
adapter will be shown in listings. Right now there is no access counter, so
we just get an empty column:

>>> browser.open('http://localhost/++skin++cms/repository/online/2007/01')
>>> print browser.contents
<?xml ...
  <tbody>
  <tr class="odd">
    ... 
    <td>
      <span class="filename">4schanzentournee-abgesang</span>
    </td>
    <td>
      2008 3 7  12:47:16
    </td>
    <td>
    </td>
    ...
  </tr>
  ...


Now create an access counter which alwasy returns 42 for today an 31415 for
total hits:

>>> class AccessCounter(object):
...     hits = 42
...     total_hits = 31415
...     def __init__(self, context):
...         self.context = context
...
>>> import zope.component
>>> import zeit.cms.interfaces
>>> import zeit.cms.content.interfaces
>>> gsm = zope.component.getGlobalSiteManager()
>>> gsm.registerAdapter(
...     AccessCounter, (zeit.cms.interfaces.ICMSContent, ),
...     zeit.cms.content.interfaces.IAccessCounter)


Now we have 42 / 31415 accesses:

>>> browser.open('http://localhost/++skin++cms/repository/online/2007/01')
>>> print browser.contents
<?xml ...
  <tbody>
  <tr class="odd">
    ...
    <td>
      4schanzentournee-abgesang
    </td>
    <td>
      <span class="filename">4schanzentournee-abgesang</span>
    </td>
    <td>
      2008 3 7  12:47:16
    </td>
    <td>
      <span class="hitCounter">42 / 31415</span>
    </td>
    ...
  </tr>
  ...

When there are no hits today the rendering is different:

>>> AccessCounter.hits = None
>>> browser.open('http://localhost/++skin++cms/repository/online/2007/01')
>>> print browser.contents
<?xml ...
  <tbody>
  <tr class="odd">
    ...
    <td>
      <span class="filename">4schanzentournee-abgesang</span>
    </td>
    <td>
      2008 3 7  12:47:16
    </td>
    <td>
      <span class="hitCounter">∅ / 31415</span>
    </td>
    ...
  </tr>
  ...

When we have only hits from today, those are also displayed as total hits:

>>> AccessCounter.hits = 543
>>> AccessCounter.total_hits = None
>>> browser.open('http://localhost/++skin++cms/repository/online/2007/01')
>>> print browser.contents
<?xml ...
  <tbody>
  <tr class="odd">
   ...
    <td>
      <span class="filename">4schanzentournee-abgesang</span>
    </td>
    <td>
      2008 3 7  12:47:16
    </td>
    <td>
      <span class="hitCounter">543 / 543</span>
    </td>
    ...
  </tr>
  ...


Workflow indicator
==================

The workflow indicator has three states:

1. Unpublished -- we saw that above
2. Published
3. Published but with modifications

Published
---------

Let's indicate a published object:

>>> import zeit.cms.workflow.mock
>>> uid = 'http://xml.zeit.de/online/2007/01/4schanzentournee-abgesang'
>>> zeit.cms.workflow.mock._published[uid] = True
>>> browser.open('http://localhost/++skin++cms/repository/online/2007/01')
>>> print browser.contents
<?xml ...
  <tbody>
  <tr class="odd">
    ...
    <td>
      <div class="workflow-column"><span class="publish-state published" title="Published" /></div>
    </td>
    <td>
    </td>
    <td>
      4schanzentournee-abgesang
    </td>
    ...


When we have local modifications the we get the third indicator. Let's try some
"None"-cases before:

>>> import datetime
>>> import pytz
>>> import zeit.connector.interfaces
>>> connector = zope.component.getUtility(zeit.connector.interfaces.IConnector)
>>> connector._properties[uid][('getlastmodified', 'DAV:')] = (
...     datetime.datetime(2007, 12, 6, 12, 00, tzinfo=pytz.UTC).isoformat())

We don't know when the object was published. Assume it's fresh:

>>> browser.open('http://localhost/++skin++cms/repository/online/2007/01')
>>> print browser.contents
<?xml ...
  <tbody>
  <tr class="odd">
    ...
    <td>
      <div class="workflow-column"><span class="publish-state published" title="Published" /></div>
    </td>
    <td>
    </td>
    <td>
      4schanzentournee-abgesang
    </td>
    ...


Make sure the date is converted to CET (12:00 GMT -> 13:00 CET (no DST)):

>>> '2007 12 6  13:00:00' in browser.contents
True


With a publication date *after* the modifcation date it is also fresh:

>>> zeit.cms.workflow.mock._publish_times[uid] = datetime.datetime(
...     2007, 12, 6, 13, 00, tzinfo=pytz.UTC)
>>> browser.open('http://localhost/++skin++cms/repository/online/2007/01')
>>> print browser.contents
<?xml ...
  <tbody>
  <tr class="odd">
    ...
    <td>
      <div class="workflow-column"><span class="publish-state published" title="Published" /></div>
    </td>
    <td>
    </td>
    <td>
      4schanzentournee-abgesang
    </td>
    ...


With a publication time *before* the modifaction time it is not fresh:

>>> zeit.cms.workflow.mock._publish_times[uid] = datetime.datetime(
...     2007, 12, 6, 11, 00, tzinfo=pytz.UTC)
>>> browser.open('http://localhost/++skin++cms/repository/online/2007/01')
>>> print browser.contents
<?xml ...
  <tbody>
  <tr class="odd">
    ...
    <td>
      <div class="workflow-column"><span class="publish-state published-with-changes" title="Published but has changes" /></div>
    </td>
    <td>
    </td>
    <td>
      4schanzentournee-abgesang
    </td>
    ...


When the modification date is not known we also assume it is fresh. Note that
this case is rather constructed because in reality all objects have a
modification time.

>>> connector._properties[uid][('getlastmodified', 'DAV:')] = None
>>> browser.open('http://localhost/++skin++cms/repository/online/2007/01')
>>> print browser.contents
<?xml ...
  <tbody>
  <tr class="odd">
    ...
    <td>
      <div class="workflow-column"><span class="publish-state published" title="Published" /></div>
    </td>
    <td>
    </td>
    <td>
      4schanzentournee-abgesang
    </td>
    ...


Title
=====

The title of the listing is "Directory listing"

>>> browser = ExtendedTestBrowser()
>>> browser.addHeader('Authorization', 'Basic user:userpw')
>>> browser.open('http://localhost/++skin++cms/repository/online/2007/01')
>>> print browser.contents
<?xml...
    <title> 01 – Directory listing </title>
    ...

Clean up:

>>> gsm.unregisterAdapter(
...     AccessCounter, (zeit.cms.interfaces.ICMSContent, ),
...     zeit.cms.content.interfaces.IAccessCounter)
True

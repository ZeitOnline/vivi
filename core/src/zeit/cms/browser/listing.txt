===============
Folder Listings
===============

There is a general way to list folders as all listings should look the same.

Create a browser first:

>>> from zeit.cms.testing import Browser 
>>> browser = Browser(layer['wsgi_app'])
>>> browser.login('user', 'userpw')


The filelisting is to be found under /repository. To get a dojo based
FilteringTable open a specific folder:

>>> browser.open('http://localhost/++skin++cms/repository/2007/01')

We expect a normal file listing:

>>> browser.xpath("//table[contains(@class, 'contentListing')]")
[<Element table...>]
>>> columns = browser.xpath("//table/thead/tr/th")
>>> len(columns)
10


Breadcrums
==========

Similar to the filelisting, we expect that breadcrumbs are displayed at
the header bar:

>>> bc = browser.xpath('//ul[@id="breadcrumbs"]/li/a')
>>> bc
[<Element a ...>, <Element a ...>]
>>> bc[0].text
'repository'
>>> bc[1].text
'2007'


Workflow indicator
==================

The workflow indicator has three states:

1. Unpublished -- we saw that above
2. Published
3. Published but with modifications

Published
---------

Let's indicate a published object:

>>> import zeit.cms.workflow.mock
>>> uid = 'http://xml.zeit.de/online/2007/01/4schanzentournee-abgesang'
>>> zeit.cms.workflow.mock._published[uid] = True
>>> browser.open('http://localhost/++skin++cms/repository/online/2007/01')
>>> print(browser.contents)
<?xml ...
  <tbody>
  <tr class="odd">
    ...
    <td>
      <div class="workflow-column"><span class="publish-state published" title="Published"></span></div>
    </td>
    <td>
    </td>
    <td>
      4schanzentournee-abgesang
    </td>
    ...


When we have local modifications the we get the third indicator. Let's try some
"None"-cases before:

>>> import datetime
>>> import pytz
>>> import zeit.connector.interfaces
>>> import zope.component
>>> connector = zope.component.getUtility(zeit.connector.interfaces.IConnector)
>>> connector._properties[uid][('getlastmodified', 'DAV:')] = (
...     datetime.datetime(2007, 12, 6, 12, 00, tzinfo=pytz.UTC).isoformat())

We don't know when the object was published. Assume it's fresh:

>>> browser.open('http://localhost/++skin++cms/repository/online/2007/01')
>>> print(browser.contents)
<?xml ...
  <tbody>
  <tr class="odd">
    ...
    <td>
      <div class="workflow-column"><span class="publish-state published" title="Published"></span></div>
    </td>
    <td>
    </td>
    <td>
      4schanzentournee-abgesang
    </td>
    ...


Make sure the date is converted to CET (12:00 GMT -> 13:00 CET (no DST)):

>>> '2007 12 6  13:00:00' in browser.contents
True


With a publication date *after* the modifcation date it is also fresh:

>>> zeit.cms.workflow.mock._publish_times[uid] = datetime.datetime(
...     2007, 12, 6, 13, 00, tzinfo=pytz.UTC)
>>> browser.open('http://localhost/++skin++cms/repository/online/2007/01')
>>> print(browser.contents)
<?xml ...
  <tbody>
  <tr class="odd">
    ...
    <td>
      <div class="workflow-column"><span class="publish-state published" title="Published"></span></div>
    </td>
    <td>
    </td>
    <td>
      4schanzentournee-abgesang
    </td>
    ...


With a publication time *before* the modifaction time it is not fresh:

>>> zeit.cms.workflow.mock._publish_times[uid] = datetime.datetime(
...     2007, 12, 6, 11, 00, tzinfo=pytz.UTC)
>>> browser.open('http://localhost/++skin++cms/repository/online/2007/01')
>>> print(browser.contents)
<?xml ...
  <tbody>
  <tr class="odd">
    ...
    <td>
      <div class="workflow-column"><span class="publish-state published-with-changes" title="Published but has changes"></span></div>
    </td>
    <td>
    </td>
    <td>
      4schanzentournee-abgesang
    </td>
    ...


When the modification date is not known we also assume it is fresh. Note that
this case is rather constructed because in reality all objects have a
modification time.

>>> connector._properties[uid][('getlastmodified', 'DAV:')] = None
>>> browser.open('http://localhost/++skin++cms/repository/online/2007/01')
>>> print(browser.contents)
<?xml ...
  <tbody>
  <tr class="odd">
    ...
    <td>
      <div class="workflow-column"><span class="publish-state published" title="Published"></span></div>
    </td>
    <td>
    </td>
    <td>
      4schanzentournee-abgesang
    </td>
    ...


Title
=====

The title of the listing is "Directory listing"

>>> browser = Browser(layer['wsgi_app'])
>>> browser.login('user', 'userpw')
>>> browser.open('http://localhost/++skin++cms/repository/online/2007/01')
>>> print(browser.contents)
<?xml...
    <title> 01 â€“ Directory listing </title>
    ...

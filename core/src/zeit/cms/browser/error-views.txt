===========
Error Views
===========

We have some special views for exceptions which should not occour but do
anyway.

Create a testbrowser first

>>> from z3c.etestbrowser.testing import ExtendedTestBrowser 
>>> browser = ExtendedTestBrowser()
>>> browser.addHeader('Authorization', 'Basic user:userpw')


Locking errors
==============

It happens that a user is offered an action which he may not do because the
resource is locked. Create a view which raises the relevant exception:

>>> import zope.component
>>> import zope.interface
>>> import zope.publisher.interfaces.browser
>>> import zope.publisher.browser
>>> import zope.security.checker
>>> import zeit.connector.interfaces
>>>
>>> class Error(zope.publisher.browser.BrowserPage):
...
...     def __call__(self):
...         raise zeit.connector.interfaces.LockingError(
...             'http://id', 'locked')
...
>>> zope.security.checker.defineChecker(
...     Error, zope.security.checker.NamesChecker((
...         '__call__', 'browserDefault')))
>>> gsm = zope.component.getGlobalSiteManager()
>>> gsm.registerAdapter(
...     Error,
...     (zope.interface.Interface,
...      zope.publisher.interfaces.browser.IBrowserRequest),
...     provided=zope.publisher.interfaces.browser.IBrowserPage,
...     name="error.html")


>>> browser.open('http://localhost/++skin++cms/error.html')
Traceback (most recent call last):
    ...
HTTPError: HTTP Error 500: Internal Server Error

>>> print browser.contents
 <!DOCTYPE html ...
     <div class="error">
       The action you were trying to do could not be finished because the
       resource
       <span class="unique-id">http://id</span> was locked. </div>
      <pre>locked</pre>
     ...


Remove the view again:

>>> gsm.unregisterAdapter(
...     Error,
...     (zope.interface.Interface,
...      zope.publisher.interfaces.browser.IBrowserRequest),
...     provided=zope.publisher.interfaces.browser.IBrowserPage,
...     name="error.html")
True
>>> zope.security.checker.undefineChecker(Error)

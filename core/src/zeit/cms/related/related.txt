===============
Related content
===============


Content can be related. The default way is relating xml
content[#functionaltest]_:

>>> import zeit.cms.testcontenttype.testcontenttype
>>> content = zeit.cms.testcontenttype.testcontenttype.ExampleContentType()

Add content to repository:

>>> repository['content'] = content

Adapt it to IRelatedContent, currently there are no references:

>>> related = zeit.cms.related.interfaces.IRelatedContent(content)
>>> import zope.interface.verify
>>> zope.interface.verify.verifyObject(
...     zeit.cms.related.interfaces.IRelatedContent, related)
True
>>> zope.interface.verify.verifyObject(
...     zeit.cms.content.interfaces.IXMLRepresentation, related)
True
>>> related.related
()

The source has not changed:

>>> import lxml.etree
>>> print lxml.etree.tostring(content.xml, pretty_print=True)
<testtype xmlns:py="http://codespeak.net/lxml/objectify/pytype">
  <head>...
   </head>
  <body/>
</testtype>


Add a related content:

>>> related_content = (
...     zeit.cms.testcontenttype.testcontenttype.ExampleContentType())
>>> repository['related'] = related_content
>>> related.related = (related_content, )


Let's have a look at the source:

>>> print lxml.etree.tostring(content.xml, pretty_print=True)
<testtype xmlns:py="http://codespeak.net/lxml/objectify/pytype">
  <head>...
    <references>
      <reference ...
        type="intern" href="http://xml.zeit.de/related"...>
        <supertitle xsi:nil="true"/>
        <title xsi:nil="true"/>
        <text xsi:nil="true"/>
        <description xsi:nil="true"/>
        <byline xsi:nil="true"/>
        <breadcrumb_title xsi:nil="true"/>
      </reference>
    </references>
  </head>
  <body/>
</testtype>

>>> related.related
(<zeit.cms.testcontenttype.testcontenttype.ExampleContentType...>,)
>>> related.related[0].uniqueId
u'http://xml.zeit.de/related'


Assigning the same content object again doesn't change the xml:

>>> related.related = (related_content, )
>>> print lxml.etree.tostring(content.xml, pretty_print=True)
<testtype xmlns:py="http://codespeak.net/lxml/objectify/pytype">
  <head>...
    <references>
      <reference ...
        type="intern" href="http://xml.zeit.de/related"...>
        <supertitle xsi:nil="true"/>
        <title xsi:nil="true"/>
        <text xsi:nil="true"/>
        <description xsi:nil="true"/>
        <byline xsi:nil="true"/>
        <breadcrumb_title xsi:nil="true"/>
      </reference>
    </references>
  </head>
  <body/>
</testtype>


Let's add another related content:

>>> related_content2 = (
...     zeit.cms.testcontenttype.testcontenttype.ExampleContentType())
>>> repository['related2'] = related_content2
>>> related.related = (related_content, related_content2)
>>> print lxml.etree.tostring(content.xml, pretty_print=True)
<testtype xmlns:py="http://codespeak.net/lxml/objectify/pytype">
  <head>...
    <references>
      <reference ...
        type="intern" href="http://xml.zeit.de/related"...>
        ...
        <title xsi:nil="true"/>
        ...
      </reference>
      <reference ...
        type="intern" href="http://xml.zeit.de/related2"...>
        ...
        <title xsi:nil="true"/>
        ...
      </reference>
    </references>
  </head>
  <body/>
</testtype>



Metadata
========

Now what about the metadata? When the related object is adaptable to
ICommonMetadata some information is included in the XML:

>>> related_content.year = 2006
>>> related_content.volume = 19
>>> related_content.teaserTitle = 'I relate the title'
>>> related_content.teaserText = 'Dude.'
>>> repository['related'] = related_content

So far nothing has changed:

>>> print lxml.etree.tostring(content.xml, pretty_print=True)
<testtype xmlns:py="http://codespeak.net/lxml/objectify/pytype">
  <head>...
    <references>
      <reference ...
        type="intern" href="http://xml.zeit.de/related"...>
        ...
        <title xsi:nil="true"/>
        <text xsi:nil="true"/>
        <description xsi:nil="true"/>
        ...
      </reference>
      <reference ...
        type="intern" href="http://xml.zeit.de/related2"...>
        ...
        <title xsi:nil="true"/>
        <text xsi:nil="true"/>
        <description xsi:nil="true"/>
        ...
      </reference>
    </references>
  </head>
  <body/>
</testtype>



when we reassign the two objects the metadata will be reflected in the xml:

>>> related.related = (related_content, related_content2)
>>> print lxml.etree.tostring(content.xml, pretty_print=True)
<testtype xmlns:py="http://codespeak.net/lxml/objectify/pytype">
  <head>...
    <references>
      <reference ...
        type="intern" href="http://xml.zeit.de/related"
        ...year="2006" issue="19"...>
        ...
        <title py:pytype="str">I relate the title</title>
        <text py:pytype="str">Dude.</text>
        <description py:pytype="str">Dude.</description>
        ...
      </reference>
      <reference ... type="intern" href="http://xml.zeit.de/related2"...>
        ...
        <title xsi:nil="true"/>
        ...
        <description xsi:nil="true"/>
        ...
      </reference>
    </references>
  </head>
  <body/>
</testtype>


Since re-assigning is not suiteable for actual use there is an event handler
for checkin. Change some data again:

>>> related_content.year = 2007
>>> repository['related'] = related_content

After sending the event the metadata is updated:

>>> import zope.event
>>> import zope.security.testing
>>> import zeit.cms.checkout.interfaces
>>> zope.event.notify(
...     zeit.cms.checkout.interfaces.BeforeCheckinEvent(
...         content, None, zope.security.testing.Principal('hans.wurst')))
>>> print lxml.etree.tostring(content.xml, pretty_print=True)
<testtype xmlns:py="http://codespeak.net/lxml/objectify/pytype">
  <head>...
    <references>
      <reference ...
        type="intern" href="http://xml.zeit.de/related"
        ...year="2007" issue="19"...>
        ...
        <title py:pytype="str">I relate the title</title>
        <text py:pytype="str">Dude.</text>
        <description py:pytype="str">Dude.</description>
        ...
      </reference>
      <reference ...type="intern" href="http://xml.zeit.de/related2"...>
        ...
        <title xsi:nil="true"/>
        <text xsi:nil="true"/>
        <description xsi:nil="true"/>
        ...
      </reference>
    </references>
    ...
  </head>
  <body/>
</testtype>


When we remove the relateds they're of course removed from the XML:

>>> related.related = ()
>>> print lxml.etree.tostring(content.xml, pretty_print=True)
<testtype xmlns:py="http://codespeak.net/lxml/objectify/pytype">
  <head>
    <references/>...
  </head>
  <body/>
</testtype>


When we add an related which is not adaptable a useful error is raised:

>>> class Strange(object):
...     pass
>>> strange_thing = Strange()
>>> strange_thing.uniqueId = 'foo'
>>> related.related = (strange_thing,)
Traceback (most recent call last):
    ...
ValueError: Could not create XML reference type 'related' for foo
    (referenced by http://xml.zeit.de/content).


.. [#functionaltest] We need to set the site since we're a functional test:

    >>> import zeit.cms.testing
    >>> zeit.cms.testing.set_site()

    Do some imports and get the repository

    >>> import zope.component
    >>> import zeit.cms.repository.interfaces
    >>> repository = zope.component.getUtility(
    ...     zeit.cms.repository.interfaces.IRepository)

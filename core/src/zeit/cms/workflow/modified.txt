Modified
========

When an object is checked in the person who modified the object last is
noted[#functional]_.

Currently there was no one who modified:

>>> content = repository['testcontent']
>>> zeit.cms.workflow.interfaces.IModified(content).last_modified_by is None
True

Checkout and checkin again:

>>> import zeit.cms.checkout.interfaces
>>> manager = zeit.cms.checkout.interfaces.ICheckoutManager(content)
>>> checked_out = manager.checkout()
>>> manager = zeit.cms.checkout.interfaces.ICheckinManager(checked_out)
>>> manager.checkin()
<zeit.cms.testcontenttype.testcontenttype.TestContentType object at 0x...>

The last modifier is zope.user now:

>>> content = repository['testcontent']
>>> zeit.cms.workflow.interfaces.IModified(content).last_modified_by
u'zope.user'


The access time from IDCTimes can be accessed through IModified:

>>> zeit.cms.workflow.interfaces.IModified(content).date_last_modified
datetime.datetime(..., tzinfo=<UTC>)

An xml reference contains the date-last-modified:

>>> import lxml.etree
>>> import zeit.cms.content.interfaces
>>> node = zope.component.getAdapter(
...     content, zeit.cms.content.interfaces.IXMLReference, name='related')
>>> print lxml.etree.tostring(node, pretty_print=True),
<reference ... date-last-modified="...T...+00:00"...
>>> import zc.iso8601.parse
>>> zc.iso8601.parse.datetimetz(node.get('date-last-modified'))
datetime.datetime(..., tzinfo=<UTC>)


.. [#functional]

    >>> import zeit.cms.testing
    >>> zeit.cms.testing.set_site()
    >>> principal = zeit.cms.testing.create_interaction()

    >>> import zope.component
    >>> import zeit.cms.repository.interfaces
    >>> repository = zope.component.getUtility(
    ...     zeit.cms.repository.interfaces.IRepository)

Modified
========


>>> import zeit.cms.testing
>>> zeit.cms.testing.set_site()
>>> principal = zeit.cms.testing.create_interaction()
>>> import zope.component
>>> import zeit.cms.repository.interfaces
>>> repository = zope.component.getUtility(
...     zeit.cms.repository.interfaces.IRepository)

When an object is checked in the person who modified the object last is
noted.

Currently there was no one who modified:

>>> content = repository['testcontent']
>>> zeit.cms.workflow.interfaces.IModified(content).last_modified_by is None
True
>>> zeit.cms.workflow.interfaces.IModified(content).date_last_modified is None
True
>>> zeit.cms.workflow.interfaces.IModified(content).date_last_checkout is None
True

For checked out content there is a separate adapter.
Its modified depends on _p_mtime but falls back to the repository time:

>>> import zeit.cms.checkout.interfaces
>>> manager = zeit.cms.checkout.interfaces.ICheckoutManager(content)
>>> checked_out = manager.checkout()
>>> mod = zeit.cms.workflow.interfaces.IModified(checked_out)
>>> mod.date_last_modified == zeit.cms.workflow.interfaces.IModified(content).date_last_modified
True

After committing the object has its own modified:

>>> import pendulum
>>> import time
>>> import transaction
>>> before_commit_time = pendulum.now('UTC')
>>> time.sleep(0.25)
>>> transaction.commit()
>>> mod.date_last_modified
DateTime(...)
>>> mod.date_last_modified > before_commit_time
True

>>> manager = zeit.cms.checkout.interfaces.ICheckinManager(checked_out)
>>> manager.checkin()
<zeit.cms.testcontenttype.testcontenttype.ExampleContentType...>

The last modifier is zope.user now:

>>> content = repository['testcontent']
>>> zeit.cms.workflow.interfaces.IModified(content).last_modified_by
'zope.user'
>>> zeit.cms.workflow.interfaces.IModified(content).date_last_checkout
DateTime(..., tzinfo=Timezone('UTC'))


>>> zeit.cms.workflow.interfaces.IModified(content).date_last_modified
DateTime(..., tzinfo=Timezone('UTC'))


Clean up:

>>> zeit.cms.workflow.mock._publish_times.clear()

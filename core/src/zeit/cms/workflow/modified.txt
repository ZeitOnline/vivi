Modified
========

When an object is checked in the person who modified the object last is
noted[#functional]_.

Currently there was no one who modified:

>>> content = repository['testcontent']
>>> zeit.cms.workflow.interfaces.IModified(content).last_modified_by is None
True
>>> zeit.cms.workflow.interfaces.IModified(content).date_last_checkout is None
True

Checkout and checkin again:

>>> import zeit.cms.checkout.interfaces
>>> manager = zeit.cms.checkout.interfaces.ICheckoutManager(content)
>>> checked_out = manager.checkout()
>>> manager = zeit.cms.checkout.interfaces.ICheckinManager(checked_out)
>>> manager.checkin()
<zeit.cms.testcontenttype.testcontenttype.TestContentType object at 0x...>

The last modifier is zope.user now:

>>> content = repository['testcontent']
>>> zeit.cms.workflow.interfaces.IModified(content).last_modified_by
u'zope.user'
>>> zeit.cms.workflow.interfaces.IModified(content).date_last_checkout
datetime.datetime(..., tzinfo=<UTC>)


The access time from IDCTimes can be accessed through IModified:

>>> import zope.dublincore.interfaces
>>> dc = zope.dublincore.interfaces.IDCTimes(content).modified
>>> wf = zeit.cms.workflow.interfaces.IModified(content).date_last_modified
>>> dc == wf
True
>>> wf
datetime.datetime(..., tzinfo=<UTC>)


Clean up:

>>> zeit.cms.workflow.mock._publish_times.clear()

.. [#functional]

    >>> import zeit.cms.testing
    >>> zeit.cms.testing.set_site()
    >>> principal = zeit.cms.testing.create_interaction()

    >>> import zope.component
    >>> import zeit.cms.repository.interfaces
    >>> repository = zope.component.getUtility(
    ...     zeit.cms.repository.interfaces.IRepository)

File objects
============

File objects provide access to potentially large files in the cms. One goal is
to handle large files efficently, that is w/o loading them fully into RAM.

Flavours
++++++++

There are two flavours of files:

1. Files found in the repository: ``RepositoryFile``
2. Files found in the working copy of a user ``LocalFile``


RepositoryFile
--------------

The repository file is not modifyable. Therefore there is no need to actually
keep the data around. The data is retrieved directly from the repository when
required:

>>> import zeit.cms.repository.file
>>> f = zeit.cms.repository.file.RepositoryFile(
...     'http://xml.zeit.de/2006/DSC00109_2.JPG', 'image/jpeg')
>>> f
<zeit.cms.repository.file.RepositoryFile object at 0x...>

It provides the IFile and IAsset interfaces:

>>> import zope.interface.verify
>>> import zeit.cms.interfaces
>>> import zeit.cms.repository.interfaces
>>> zope.interface.verify.verifyObject(
...     zeit.cms.repository.interfaces.IFile, f)
True
>>> zope.interface.verify.verifyObject(
...     zeit.cms.interfaces.IAsset, f)
True


The file has a size:

>>> int(f.size)
882409

We can get the data via the ``open`` method:

>>> f.open()
<open file ..., mode 'rb' at 0x...>
>>> f.open('r')
<open file ..., mode 'rb' at 0x...>
>>> f.open().read(10)
'\xff\xd8\xff\xe1\x0c\xdaExif'


It is not possible to open the RepositoryFile for writing:

>>> f.open('w')
Traceback (most recent call last):
    ...
ValueError: w

The mime type is available via the ``mimeType`` attribute

>>> f.mimeType
'image/jpeg'


LocalFile
---------

The LocalFile actually stores data. 


>>> local = zeit.cms.repository.file.LocalFile(
...     'http://xml.zeit.de/2006/DSC00109_2.JPG', 'image/jpeg')
>>> local
<zeit.cms.repository.file.LocalFile object at 0x...>


The LocalFile also provides the IFile interface:

>>> zope.interface.verify.verifyObject(
...     zeit.cms.repository.interfaces.IFile, local)
True


>>> int(local.size)
882409

We can get the data via the ``open`` method:

>>> local.open()
<open file ..., mode 'rb' at 0x...>
>>> local.open('r')
<open file ..., mode 'rb' at 0x...>
>>> local.open().read(10)
'\xff\xd8\xff\xe1\x0c\xdaExif'

So far we have no local copy:

>>> local.local_data is None
True
>>> local.mimeType
'image/jpeg'

The LocalFile can be opened for writing:

>>> f_write = local.open('w')
>>> f_write.write('New data')
>>> f_write.close()
>>> local.mimeType = 'text/plain'

The file has stored the new data now:

>>> local.open().read()
'New data'
>>> int(local.size)
8

We have a local blob now:

>>> local.local_data
<ZODB.blob.Blob object at 0x...>


Local files can also be created w/o an existing file in the repository:

>>> local = zeit.cms.repository.file.LocalFile()

A freshly created file cannot be opened for reading:

>>> local.open('r')
Traceback (most recent call last):
    ...
ValueError: Cannot open for reading, no data available.

Writing works as usual:

>>> f_write = local.open('w')
>>> f_write.write(
...     'Eine wunderbare Heiterkeit hat meine ganze Seele eingenommen')
>>> f_write.close()
>>> local.open('r').read()
'Eine wunderbare Heiterkeit hat meine ganze Seele eingenommen'
>>> local.mimeType
''

A local file, which has been removed from the repository, but does not have
data by itself will return an empty file:

>>> local = zeit.cms.repository.file.LocalFile()
>>> local.uniqueId = 'http://xml.zeit.de/foo'
>>> f = local.open()
>>> f.read()
''


Integration
+++++++++++

Objects which are not categorised further are considered a file[#functional]_
when specified accordingly :

>>> import zope.app.appsetup.product
>>> cms_config = zope.app.appsetup.product.getProductConfiguration('zeit.cms')
>>> 'default-type' in cms_config
False
>>> cms_config['default-type'] = 'file'

>>> import zope.component
>>> repository = zope.component.getUtility(
...     zeit.cms.repository.interfaces.IRepository)
>>> f = repository['2006']['DSC00109_2.JPG']
>>> f
<zeit.cms.repository.file.RepositoryFile object at 0x...>
>>> f.open().read(10)
'\xff\xd8\xff\xe1\x0c\xdaExif'
>>> f.mimeType
''

When we adapt the RepositoryFile to ILocalContent we'll get a LocalFile:

>>> import zeit.cms.workingcopy.interfaces
>>> local = zeit.cms.workingcopy.interfaces.ILocalContent(f)
>>> local
<zeit.cms.repository.file.LocalFile object at 0x...>
>>> local.__name__
u'DSC00109_2.JPG'

When we change some data ...

>>> f_write = local.open('w')
>>> f_write.write('new data')
>>> f_write.close()
>>> local.mimeType = 'text/plain'

... and adapt to IRepositoryContent we'll have the file updated in the
repository:

>>> import zeit.cms.checkout.interfaces
>>> repository_file = zeit.cms.checkout.interfaces.IRepositoryContent(local)
>>> repository_file
<zeit.cms.repository.file.RepositoryFile object at 0x...>
>>> repository_file.open().read()
'new data'
>>> repository_file.mimeType
'text/plain'


Clean up:

>>> del cms_config['default-type']


.. [#functional]

    >>> import zeit.cms.testing
    >>> zeit.cms.testing.set_site()

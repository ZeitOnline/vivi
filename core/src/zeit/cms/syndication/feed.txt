==========
ZEIT Feeds
==========

Feeds contain an ordered list of documents:

>>> from zeit.cms.syndication.feed import Feed
>>> feed = Feed()
>>> feed
<zeit.cms.syndication.feed.Feed...>
>>> import zope.interface.verify
>>> import zeit.cms.syndication.interfaces
>>> zope.interface.verify.verifyObject(
...     zeit.cms.syndication.interfaces.IFeed, feed)
True

A feed is an asset:

>>> import zeit.cms.interfaces
>>> zeit.cms.interfaces.IAsset.providedBy(feed)
True


Setup functional test:

>>> import zeit.cms.testing
>>> zeit.cms.testing.set_site()


Addding and Removing
=====================


Feeds behave mostly like a list. An empty feed doen't contain any objects:

>>> list(feed.keys())
[]


We now will add objects to the feed. Let's create some fake object:

>>> import zope.annotation.interfaces
>>> import zope.interface
>>> class Article(object):
...     zope.interface.implements(
...         zeit.cms.interfaces.ICMSContent,
...         zope.annotation.interfaces.IAttributeAnnotatable)
...     def __init__(self, id=None):
...         self.uniqueId = id


>>> import mock
>>> rename_patch = mock.patch('zeit.cms.syndication.feed.IRenameInfo')
>>> RenameInfo = rename_patch.start()
>>> RenameInfo().previous_uniqueIds = ()

We add an article with id `art1` and get the id back form the `keys` method:

>>> article = Article('art1')
>>> feed.insert(0, article)
>>> list(feed.keys())
['art1']


Content is inserted in the right place:

>>> feed.insert(0, Article('art2'))
>>> list(feed.keys())
['art2', 'art1']
>>> feed.insert(0, Article('art3'))
>>> list(feed.keys())
['art3', 'art2', 'art1']


Entries can also be removed. Note that the actual identification is *only* by
an objects Unique Id:

>>> feed.remove(Article('art2'))
>>> list(feed.keys())
['art3', 'art1']

We can query the feed if an object is in it:

>>> article in feed
True
>>> Article('foobar') in feed
False


Let's also add an object from the repository:

>>> import zope.component
>>> import zeit.cms.repository.interfaces
>>> repository = zope.component.getUtility(
...     zeit.cms.repository.interfaces.IRepository)
>>> feed.insert(0, repository['testcontent'])
>>> list(feed.keys())
['http://xml.zeit.de/testcontent', 'art3', 'art1']
>>> list(feed)
[<zeit.cms.testcontenttype.testcontenttype.ExampleContentType...>,
 <zeit.cms.syndication.feed.FakeEntry...>,
 <zeit.cms.syndication.feed.FakeEntry...>]


When we remove the testcontent from the repository the testcontent in the feed
will also become a fake entry:

>>> del repository['testcontent']
>>> list(feed)
[<zeit.cms.syndication.feed.FakeEntry...>,
 <zeit.cms.syndication.feed.FakeEntry...>,
 <zeit.cms.syndication.feed.FakeEntry...>]

Remove the testcontent from the feed:

>>> feed.remove(list(feed)[0])



Size Limit
++++++++++

Feeds can be limited to a maximum amount of objects they contain. The default
is 50:

>>> feed.object_limit
50

We set the limit to 2 now and add `art2` again:

>>> feed.object_limit = 2
>>> feed.insert(0, Article('art2'))

The last entry `art1` has dropped out of the feed now:

>>> list(feed.keys())
['art2', 'art3']

If the feed is full, items cannot be added to the end:

>>> feed.insert(2, Article('art1'))
>>> list(feed.keys())
['art2', 'art3']


Error Cases
+++++++++++


It is not possible to add objects to a feed which do not have a uniqueId:

>>> article = Article()
>>> print article.uniqueId
None 
>>> feed.insert(0, article)
Traceback (most recent call last):
    ...
ValueError: Cannot add objects without uniqueId.


It is also not possible to add objects which are not ICMSConent:

>>> feed.insert(0, object())
Traceback (most recent call last):
    ...
TypeError: ('Could not adapt', <object...>, <InterfaceClass zeit.cms.interfaces.ICMSContent>)


Trying to remove an object which is not in the feed raises a ValueError:

>>> feed.remove(Article('nope'))
Traceback (most recent call last):
    ...
ValueError: 'nope' not in feed.



Creating Feeds From Resources
=============================

Feeds are cms content. So we also need to create them from resources:

>>> import StringIO
>>> from zeit.cms.connector import Resource
>>> from zeit.cms.syndication.feed import FeedType
>>> resource = Resource(
...    '/wirtschaft', 'wirtschaft', 'feed', 
...     StringIO.StringIO('''\
...     <channel xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
...       <container>
...         <block href="/2006/siemens" />
...       </container>
...     </channel>'''))
>>> feed = FeedType().content(resource)
>>> feed 
<zeit.cms.syndication.feed.Feed...>
>>> list(feed.keys())
['/2006/siemens']

Metadata object
===============

The metadata object is used to modify metadata of syndicated objects:

>>> feed = Feed()
>>> feed.insert(0, Article('first'))
>>> metadata = feed.getMetadata(Article('first'))
>>> metadata
<zeit.cms.syndication.feed.Entry...>
>>> metadata.pinned
False
>>> metadata.hidden
False
>>> metadata.__parent__ == feed
True


Pinning
+++++++

Pinning is a mechanism to keep contained objects at a certain position
regardles if other objects are added. Other objects will silently float
around.

Let's fill a feed with some objects:

>>> feed.insert(0, Article('second'))
>>> third = Article('third')
>>> feed.insert(0, third)
>>> feed.insert(0, Article('fourth'))
>>> list(feed.keys())
['fourth', 'third', 'second', 'first']
 
We pin the `third` article to its posistion now and add a fifth article. The
`third` article is still at the 2nd position:

>>> feed.getMetadata(third).pinned = True
>>> fifth = Article('fifth')
>>> feed.insert(0, fifth)
>>> list(feed.keys())
['fifth', 'third', 'fourth', 'second', 'first']


We pin the `fifth` now and insert another article. Both `fifth` and `third`
keep their places:

>>> feed.getMetadata(fifth).pinned = True
>>> feed.insert(0, Article('sixth'))
>>> list(feed.keys())
['fifth', 'third', 'sixth', 'fourth', 'second', 'first']


Now we unpin `third` and insert an article. `fifths` stays but `third` moves on
now:

>>> feed.getMetadata(third).pinned = False
>>> feed.insert(0, Article('seventh'))
>>> list(feed.keys())
['fifth', 'seventh', 'third', 'sixth', 'fourth', 'second', 'first']


The method `updateOrder` can be used to completely resort a feed:

>>> feed.updateOrder(['first', 'second', 'third', 'fourth', 'fifth',
...                   'sixth', 'seventh'])
>>> list(feed.keys())
['first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh']


If pinned entries are moved they are pinned to their new place. `fifth` is
still pinned:

>>> feed.insert(0, Article('eighth'))
>>> list(feed.keys())
['eighth', 'first', 'second', 'third', 'fifth', 'fourth', 'sixth', 'seventh']


When an invalid `order` is passed to `updateOrder` a ValueError is raised:

>>> feed.updateOrder(['a', 'b', 'c'])
Traceback (most recent call last):
    ...
ValueError: The order argument must contain the same keys as the feed.

>>> feed.updateOrder(['first', 'second', 'third', 'fourth', 'fifth',
...                   'sixth', 'seventh'])
Traceback (most recent call last):
    ...
ValueError: The order argument must contain the same keys as the feed.


Hiding and showing on the homepage
++++++++++++++++++++++++++++++++++

Sometimes it is necessary to syndicate an object but hide it from the homepage.
Normally an object is not hidden:

>>> feed.getMetadata(third).hidden
False

Hide:

>>> feed.getMetadata(third).hidden = True
>>> feed.getMetadata(third).hidden
True


Show again:

>>> feed.getMetadata(third).hidden = False
>>> feed.getMetadata(third).hidden
False

Big layout
++++++++++

The layout can be big:

>>> feed.getMetadata(third).big_layout = True
>>> feed.getMetadata(third).big_layout
True
>>> import lxml.etree
>>> print lxml.etree.tostring(feed.getMetadata(third).xml, pretty_print=True)
<block ...
    href="third" ...pinned="false" hp_hide="false" layout="big"/>

When the layout is not big, the attribute is removed:

>>> feed.getMetadata(third).big_layout = False
>>> print lxml.etree.tostring(feed.getMetadata(third).xml, pretty_print=True)
<block ...
    href="third" ...pinned="false" hp_hide="false"/>

Hidden relateds
+++++++++++++++

Relateds can be marked as hidden:


>>> feed.getMetadata(third).hidden_relateds = True
>>> feed.getMetadata(third).hidden_relateds
True
>>> import lxml.etree
>>> print lxml.etree.tostring(feed.getMetadata(third).xml, pretty_print=True)
<block ...
    href="third" ...pinned="false" hp_hide="false" hidden_relateds="true"/>

The default is that they're shown though:

>>> feed.getMetadata(third).hidden_relateds = False
>>> print lxml.etree.tostring(feed.getMetadata(third).xml, pretty_print=True)
<block ...
    href="third" ...pinned="false" hp_hide="false" hidden_relateds="false"/>


XML-Representation
==================

The XML representation of feeds contains some additional information from the
contained object. Let's first create a feed with a title and one simple object
in it:

>>> feed = Feed()
>>> feed.title = 'Politik'
>>> article = Article('art1')
>>> feed.insert(0, article)
>>> print feed.xml_source
<channel xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:py="http://codespeak.net/lxml/objectify/pytype">
  <title>Politik</title>
  <container>
    <block href="art1".../>
  </container>
  <object_limit>50</object_limit>
</channel>


When an object is adaptable to ICommonMetadata the relevant information will be
included. Setup an article with ICommonMetadata:

>>> from zeit.cms.content.interfaces import ICommonMetadata
>>> art2 = Article('art2')
>>> art2.supertitle = u'Frankreich'
>>> art2.teaserSupertitle = u'Frankreich'
>>> art2.teaserTitle = u'Keine Sieger'
>>> art2.teaserText = u'In Frankreich wird massiv gestreikt. Doch den'
>>> art2.byline = u'Von Alain-Xavier Wurst'
>>> art2.year = 2007
>>> art2.volume = 4
>>> art2.ressort = u'International'
>>> art2.breadcrumb_title = u'Streik'
>>> art2.serie = ICommonMetadata['serie'].source.factory.values['Autotest']

Provide the interface:

>>> import zope.interface
>>> zope.interface.directlyProvides(art2, ICommonMetadata)

Insert the article to the feed:

>>> feed.insert(0, art2)
>>> print feed.xml_source
<channel xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:py="http://codespeak.net/lxml/objectify/pytype">
  <title>Politik</title>
  <container>
    <block href="art2" uniqueId="art2" year="2007" issue="4" ressort="International" serie="Autotest">
      <supertitle py:pytype="str">Frankreich</supertitle>
      <title py:pytype="str">Keine Sieger</title>
      <text py:pytype="str">In Frankreich wird massiv gestreikt. Doch den</text>
      <description py:pytype="str">In Frankreich wird massiv gestreikt. Doch den</description>
      <byline py:pytype="str">Von Alain-Xavier Wurst</byline>
      <breadcrumb_title py:pytype="str">Streik</breadcrumb_title>
    </block>
    <block href="art1".../>
  </container>
  <object_limit>50</object_limit>
</channel>


We can change the teaser data and just call updateMetadata to apply the
changes:

>>> art2.teaserTitle = 'New Title'
>>> art2.supertitle = 'Fronkroisch'
>>> art2.teaserSupertitle = 'Fronkroisch'
>>> feed.updateMetadata(art2)
>>> print feed.xml_source
<channel xmlns:xsd="http://www.w3.org/2001/XMLSchema"...>
  <title>Politik</title>
  <container>
    <block href="art2" uniqueId="art2" year="2007" issue="4"...>
      <supertitle py:pytype="str">Fronkroisch</supertitle>
      <title py:pytype="str">New Title</title>
      ...
    </block>
    <block href="art1".../>
  </container>
  <object_limit>50</object_limit>
</channel>


An edge case are entries that do not point to actual CMS content, they are
ignored silently when updating metadata:

>>> article = Article('art1')
>>> feed = Feed()
>>> feed.insert(0, article)
>>> for x in feed: feed.updateMetadata(x)


Teardown
========

>>> rename_patch.stop()

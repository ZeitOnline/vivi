Cleaning up
===========

In the CMS there are a lot of objects created during a request. This makes it
quite harmful to keep the request object for much longer than the request
lasts.

One major "keeper" of the request is python's ``exc_info`` which per thread
stores the last exception. The exception holds a traceback which holds a frame.
When the frame happens to (directly or indirectly) reference the request it
would stay until the next exception occours.

There is a handler which cleans the exception at the end of each request now.

raise a exception to fill the ``exc_info``:

>>> raise ValueError(1)
Traceback (most recent call last):
    ...
ValueError: 1


>>> import sys
>>> sys.exc_info()
(<...exceptions.ValueError...>,
 ...ValueError...,
 <traceback object at 0x...>)


>>> import zope.app.publication.interfaces
>>> import zope.event
>>> zope.event.notify(
...     zope.app.publication.interfaces.EndRequestEvent(None, None))

The exc_info is empty now:

>>> sys.exc_info()
(None, None, None)


Another place where the request object stay referenced is zope.security where
the previous interaction is kept. Since we don't need this, we also remove it
after the request.

>>> import zope.security.management
>>> zope.security.management.thread_local.previous_interaction = "something"
>>> zope.event.notify(
...     zope.app.publication.interfaces.EndRequestEvent(None, None))
>>> zope.security.management.thread_local.previous_interaction
Traceback (most recent call last):
    ...
AttributeError: 'thread._local' object has no attribute 'previous_interaction'


Also, since we're creating so many objects, we let the garbace collection come
more often:

>>> import gc
>>> gc.get_threshold()
(700, 10, 5)

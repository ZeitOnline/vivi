Live properties
===============

Live properties operate directly on the dav server (NOTE: this is **not** the
same as live properties in the DAV sense. In DAV live properties are computed
properties).

Setup
+++++

>>> import zeit.cms.testing
>>> zeit.cms.testing.set_site()
>>> principal = zeit.cms.testing.create_interaction()
>>> import zope.component
>>> import zeit.cms.repository.interfaces
>>> import zeit.cms.workflow.interfaces
>>> repository = zope.component.getUtility(
...     zeit.cms.repository.interfaces.IRepository)

When we get the properties of an object from the repository we'll get live
properties:

>>> import zeit.connector.interfaces
>>> content = repository['testcontent']
>>> properties = zeit.connector.interfaces.IWebDAVProperties(content)
>>> properties
<zeit.cms.content.liveproperty.LiveProperties object at 0x...>


To set properties via the LiveProperty class properties have to be registered
as live. This is a safty belt to avoid accidently setting non-live properties.
Also this is required to make sure that live properties are not overwritten
when checking in an object:

>>> TEST = 'http://namespaces.zeit.de/CMS/testing'
>>> properties[('foo', TEST)] = 'bar'
Traceback (most recent call last):
    ...
Forbidden: ('foo', 'http://namespaces.zeit.de/CMS/testing')

Register foo/test as live property:

>>> import zeit.cms.content.interfaces
>>> from zeit.cms.content.interfaces import WRITEABLE_LIVE
>>> lp_manager = zope.component.getUtility(
...     zeit.cms.content.interfaces.ILivePropertyManager)
>>> lp_manager.is_writeable_live('foo', TEST)
False
>>> lp_manager.register_live_property('foo', TEST, WRITEABLE_LIVE)
>>> lp_manager.is_writeable_live('foo', TEST)
True

>>> properties[('foo', TEST)] = 'bar'
>>> properties[('foo', TEST)]
'bar'

Since foo/test is a live property now, it will not be overwritten when we check
in an object:

>>> import zeit.cms.checkout.interfaces
>>> manager = zeit.cms.checkout.interfaces.ICheckoutManager(content)
>>> checked_out = manager.checkout()
>>> checked_out_properties = zeit.connector.interfaces.IWebDAVProperties(
...     checked_out)
>>> checked_out_properties
<zeit.connector.resource.WebDAVProperties object at 0x...>
>>> checked_out_properties[('foo', TEST)] = 'new-value-in-checked-out'

Of course until now nothing has changed in the live-properties

>>> properties[('foo', TEST)]
'bar'

Check in:

>>> manager = zeit.cms.checkout.interfaces.ICheckinManager(checked_out)
>>> checked_in = manager.checkin()

The live property value has not changed:

>>> properties[('foo', TEST)]
'bar'


The repository itself has live properties:

>>> zeit.connector.interfaces.IWebDAVProperties(repository)
<zeit.cms.content.liveproperty.LiveProperties object at 0x...>

Duplicate writes
++++++++++++++++

When a live property is set to the value it currently has, there is no WebDAV
request:

>>> connector = zope.component.getUtility(zeit.connector.interfaces.IConnector)
>>> change_properties = connector.changeProperties
>>> def printing_change_props(id, properties):
...     print('Change: %s %s' % (id, properties))
...     change_properties(id, properties)
>>> connector.changeProperties = printing_change_props

>>> properties[('foo', TEST)] = 'New Value'
Change: http://xml.zeit.de/testcontent {('foo', 'http://namespaces.zeit.de/CMS/testing'): 'New Value'}

Setting the same value again does not make a DAV request:

>>> properties[('foo', TEST)] = 'New Value'


Clean up
++++++++

>>> del connector.changeProperties

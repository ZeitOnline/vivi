======
Fields
======

XML Tree
========

>>> from zeit.cms.content.field import XMLTree
>>> import zeit.cms.testing
>>> field = XMLTree()
>>> field.__name__ = 'xml'
>>> class Content(object):
...     pass
>>> content = Content()
>>> tree = field.fromUnicode('<container/>')
>>> field.set(content, tree)
>>> content.xml == tree
True

>>> content2 = Content()
>>> content.xml['child'] = 'child'
>>> content2.xml = content.xml['child']
>>> tree2 = field.fromUnicode('<child>MyNewValue</child>')
>>> field.set(content2, tree2)
>>> print(zeit.cms.testing.xmltotext(content.xml))
<container>
  <child>MyNewValue</child>
</container>


Replacing node when there are siblings present
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

>>> import lxml.objectify
>>> root = lxml.objectify.E.root()
>>> root.append(lxml.objectify.E.child())
>>> root.append(lxml.objectify.E.child())
>>> content = Content()
>>> field = XMLTree()
>>> field.__name__ = 'xml'
>>> field.set(content, root.child)
>>> field.set(content, lxml.objectify.E.new())
>>> print(zeit.cms.testing.xmltotext(root))
<root xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <new/>
  <child/>
</root>


Tidying broken input
~~~~~~~~~~~~~~~~~~~~

>>> field = XMLTree(tidy_input=True)
>>> field.__name__ = 'xml'
>>> tree = field.fromUnicode(
...     '<a href="http://www.youtube.com/v/oIr8-f2OWhs&hl=en_US&fs=1&">')
>>> print(zeit.cms.testing.xmltotext(tree))
<a href="http://www.youtube.com/v/oIr8-f2OWhs&amp;hl=en_US&amp;fs=1&amp;"/>
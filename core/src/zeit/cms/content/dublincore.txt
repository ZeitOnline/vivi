Dublincore
==========

Setup:

>>> import zeit.cms.testing
>>> zeit.cms.testing.set_site()
>>> import zeit.cms.interfaces
>>> content = zeit.cms.interfaces.ICMSContent(
...     'http://xml.zeit.de/testcontent')


There is a IDCTimes adapter for repository content:

>>> import zope.dublincore.interfaces
>>> dc = zope.dublincore.interfaces.IDCTimes(content)
>>> dc
<zeit.cms.content.dublincore.RepositoryDCTimes object at 0x...>
>>> dc.modified
datetime.datetime(2008, 3, 7, 12, 47, 16, tzinfo=<UTC>)
>>> dc.created is None
True

For checked out content there is a different one:

>>> import zeit.cms.checkout.interfaces
>>> p = zeit.cms.testing.create_interaction()
>>> checked_out = zeit.cms.checkout.interfaces.ICheckoutManager(
...     content).checkout()
>>> dc = zope.dublincore.interfaces.IDCTimes(checked_out)
>>> dc
<zeit.cms.content.dublincore.LocalDCTimes object at 0x...>
>>> dc.created is None
True

The modified depends on _p_mtime but falls back to the DAV modification time:

>>> dc.modified
datetime.datetime(2008, 3, 7, 12, 47, 16, tzinfo=<UTC>)

The modified can be set:

>>> import datetime
>>> import pytz
>>> dc.modified = datetime.datetime(2009, 1, 1, tzinfo=pytz.UTC)

But that value is only used if there is neither one in the DAV properties nor
on _p_mtime:

>>> dc.modified
datetime.datetime(2008, 3, 7, 12, 47, 16, tzinfo=<UTC>)
>>> import zeit.connector.interfaces
>>> del zeit.connector.interfaces.IWebDAVProperties(
...     checked_out)[('getlastmodified', 'DAV:')]
>>> dc.modified
datetime.datetime(2009, 1, 1, 0, 0, tzinfo=<UTC>)

After committing the object has its own modified:

>>> before_commit_time = datetime.datetime.now(pytz.UTC)
>>> import time  # wait a bit to be sure modified is > before_commit_time
>>> time.sleep(0.25)
>>> import transaction
>>> transaction.commit()
>>> dc.modified
datetime.datetime(...)
>>> dc.modified > before_commit_time
True

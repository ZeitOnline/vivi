=========
Templates
=========

There is a generic system for templates for content types. A central view
allows adding and editing of templates by an administrator.

Create a testbrowser and open the homepage:

>>> from zope.testbrowser.testing import Browser
>>> browser = Browser()
>>> browser.addHeader('Authorization', 'Basic globalmgr:globalmgrpw')
>>> browser.open('http://localhost/++skin++cms/' )

Open the template managment ui:

>>> browser.getLink('Templates').click()
>>> print browser.contents
<?xml ...
<!DOCTYPE ...
    <title> Templates </title>
    ...
    There are no template managers registered.
    ...


Let's create and register a template manager now. We do this through the python
api because there is no UI for that:

>>> import zope.component
>>> import zeit.cms.content.template
>>> root = getRootFolder()
>>> sm = zope.component.getSiteManager(root)
>>> root['a-template-manager'] = zeit.cms.content.template.TemplateManager()
>>> sm.registerUtility(
...     root['a-template-manager'],
...     zeit.cms.content.interfaces.ITemplateManager,
...     name='My content templates')

Commit transaction for testbrowser to see our changes:

>>> import transaction
>>> transaction.commit()


When we're opening the management UI now, we'll see our newly created template
manager:

>>> browser.getLink('Templates').click()
>>> print browser.contents
<?xml ...
<!DOCTYPE ...
    <title> Templates </title>
    ...
    <a href="...">My content templates</a>
    ...


Let's have a look at those templates:

>>> browser.getLink('My content templates').click()
>>> print browser.contents
<?xml ...
<!DOCTYPE ...
    <title> Templates </title>
    ...
    There are no objects in this folder.
    ...



Let's add a tempalte. Templates are not manager specific. They're just XML
files:


>>> menu = browser.getControl(name='add_menu')
>>> menu.displayValue = ['Template']
>>> url = menu.value[0]
>>> browser.open(menu.value[0])
>>> print browser.contents
<?xml ...
<!DOCTYPE ...
    <title> Add template </title>
    ...

Give the template a name, set some content and add it:

>>> browser.getControl('Title').value = 'some template'
>>> browser.getControl('Source').value = (
...     '<article><body><title>Oink</title></body></article>')
>>> browser.getControl('Add').click()

Now we're at the property edit form where we have one line of empty input
fields to create a new property:

>>> print browser.contents
<?xml ...
<!DOCTYPE ...
    <title> Edit webdav properties </title>
    ...
  <form action="webdav-properties.html" method="POST">
    <table class="properties">
      <thead>
        <tr>
          <th>Namespace</th>
          <th>Name</th>
          <th>Value</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>
            <input type="text" name="namespace:list" />
          </td>
          <td>
            <input type="text" name="name:list" />
          </td>
          <td>
            <textarea type="text" name="value:list"></textarea>
          </td>
        </tr>
      </tbody>
    </table>
    <input type="submit" name="dav.save" value="Save" />
  </form>
  ...


Set the default ressort:

>>> browser.getControl(name='namespace:list').value = (
...     'http://namespaces.zeit.de/CMS/document')
>>> browser.getControl(name='name:list').value = 'ressort'
>>> browser.getControl(name='value:list').value = 'Zuender'
>>> browser.getControl('Save').click()

The new property has been added now, but we have an empty line again:

>>> print browser.contents
<?xml ...
<!DOCTYPE ...
    <title> Edit webdav properties </title>
    ...
    <table class="properties">
      <thead>
        <tr>
          <th>Namespace</th>
          <th>Name</th>
          <th>Value</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>
            <input type="hidden" name="namespace:list"
                   value="http://namespaces.zeit.de/CMS/document" />
            http://namespaces.zeit.de/CMS/document
          </td>
          <td>
            <input type="hidden" name="name:list"
                   value="ressort" />
            ressort
          </td>
          <td>
            <textarea type="text" name="value:list">Zuender</textarea>
          </td>
        </tr>
        <tr>
          <td>
            <input type="text" name="namespace:list" />
          </td>
          <td>
            <input type="text" name="name:list" />
          </td>
          <td>
            <textarea type="text" name="value:list"></textarea>
          </td>
        </tr>
      </tbody>
    </table>
    <input type="submit" name="dav.save" value="Save" />
  </form>
  ...


Let's make sure we can still edit body and text:

>>> browser.getLink('Edit', index=1).click()
>>> print browser.contents
<?xml ...
<!DOCTYPE ...
    <title> Edit template </title>
    ...

>>> browser.getControl('Title').value
'some template'
>>> browser.getControl('Title').value = 'Oink template'
>>> browser.handleErrors = False
>>> browser.getControl('Apply').click()
>>> print browser.contents
<?xml ...
<!DOCTYPE ...
    <title> Edit template </title>
    ...Updated on ...


Let's have a look at the list of templates:

>>> browser.getLink('a-template-manager').click()
>>> print browser.contents
<?xml ...
<!DOCTYPE ...
    <title> Templates </title>
    ...
  <tbody>
  <tr class="odd">
    <td>
      <input class="hiddenType" id="selection_column.c29tZSB0ZW1wbGF0ZQ==..used" name="selection_column.c29tZSB0ZW1wbGF0ZQ==..used" type="hidden" value="" /> <input class="checkboxType" id="selection_column.c29tZSB0ZW1wbGF0ZQ==." name="selection_column.c29tZSB0ZW1wbGF0ZQ==." type="checkbox" value="on"  />
    </td>
    <td>
      <a href=".../some%20template/">Oink template</a>
    </td>
  </tr>
  </tbody>
</table>
...

Make sure there is a delete button:

>>> browser.getControl('Delete')
<SubmitControl name='delete' type='submit'>


Template source
===============

There is an abstract template source which helps creating real template
sources.

Get in sync with the browser test:

>>> transaction.abort()

The the site:

>>> import zope.app.component.hooks
>>> old_site = zope.app.component.hooks.getSite()
>>> zope.app.component.hooks.setSite(getRootFolder())

Create a source for the templates:

>>> source = zeit.cms.content.template.BasicTemplateSource(
...     'My content templates')

The source lists the available templates:

>>> list(source)
[<zeit.cms.content.template.Template object at 0x...>]
>>> template = list(source)[0]
>>> template.title
u'Oink template'

Make sure the interface is provided:

>>> import zope.interface.verify
>>> zope.interface.verify.verifyObject(
...     zeit.cms.content.interfaces.ITemplate, template)
True

We can get the titles by adapting the source:

>>> import zope.publisher.browser
>>> request = zope.publisher.browser.TestRequest()
>>> import zope.app.form.browser.interfaces
>>> terms = zope.component.getMultiAdapter(
...     (source, request),
...     zope.app.form.browser.interfaces.ITerms)
>>> term = terms.getTerm(template)
>>> term.title
u'Oink template'



Clean up:

>>> zope.app.component.hooks.setSite(old_site)
>>> sm.unregisterUtility(
...     root['a-template-manager'],
...     zeit.cms.content.interfaces.ITemplateManager,
...     name='My content templates')
True

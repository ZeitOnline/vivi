=======
Widgets
=======


XML source edit widget
======================

The xml source edit widget is there to edit objectified trees as XML source.

Create a schema:

>>> import zope.interface
>>> import zeit.cms.content.field
>>>
>>> class IContent(zope.interface.Interface):
...     xml = zeit.cms.content.field.XMLTree()

Create a content object:


>>> import lxml.objectify
>>> import zeit.cms.content.property
>>> class Content(object):
...     zope.interface.implements(IContent)
...     xml = lxml.objectify.XML('<art/><?foo?>')
...     snippet = zeit.cms.content.property.Structure('.title')
...
>>> content = Content()

We also need a a request:

>>> import zope.publisher.browser
>>> request = zope.publisher.browser.TestRequest()


To initialize the widget we need a bound field:

>>> field = IContent['xml'].bind(content)

Now create the widget:

>>> import zeit.cms.content.browser.widget
>>> widget = zeit.cms.content.browser.widget.XMLTreeWidget(field, request)
>>> widget
<zeit.cms.content.browser.widget.XMLTreeWidget object at 0x...>
>>> widget.setRenderedValue(content.xml)
>>> widget._getFormValue()
u'<art/>\r\n<?foo?>\r\n'


Editing sub-nodes
+++++++++++++++++

The widget also supports editing subnodes. That is that the data being edited
is not a full tree but a node in a tree.

>>> content.whole_tree = lxml.objectify.XML('<a><b/><editme><c/></editme></a>')
>>> content.xml = content.whole_tree.editme
>>> widget.setRenderedValue(content.xml)
>>> widget._getFormValue()
u'<editme>\r\n    <c/>\r\n</editme>\r\n'


Converting back to a tree
+++++++++++++++++++++++++

The widget converts the entered data back to a tree:

>>> widget._toFieldValue(u'<editedyou/>')
<Element editedyou at ...>


When the entered data is not valid xml a `ConversionError` is raised:

>>> widget._toFieldValue(u'<ed')
Traceback (most recent call last):
    ...
ConversionError: (ValidationError(XMLSyntaxError(u"Couldn't find end of Start Tag ed line 1, line 1, column 4",)), None)


Display field
+++++++++++++

XMLTrees can also be displayed:

>>> widget = zeit.cms.content.browser.widget.XMLTreeDisplayWidget(
...     field, request)
>>> widget()
u''

Set a tree as rendered value:

>>> widget.setRenderedValue(content.whole_tree)
>>> print widget()
<span class="h_tag">&lt;a&gt;</span><span class="h_default"><br/>
&nbsp;&nbsp;</span><span class="h_tag">&lt;b</span><span class="h_tagend">/&gt;</span><span class="h_default"><br/>
&nbsp;&nbsp;</span><span class="h_tag">&lt;editme&gt;</span><span class="h_default"><br/>
&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="h_tag">&lt;c</span><span class="h_tagend">/&gt;</span><span class="h_default"><br/>
&nbsp;&nbsp;</span><span class="h_tag">&lt;/editme&gt;</span><span class="h_default"><br/>
</span><span class="h_tag">&lt;/a&gt;</span><span class="h_default"><br/>
</span>


XML snippets
============

>>> class IContent(zope.interface.Interface):
...     snippet = zeit.cms.content.field.XMLSnippet()

To initialize the widget we need a bound field:

>>> field = IContent['snippet'].bind(content)

Now create the widget:

>>> import zeit.cms.content.browser.widget
>>> widget = zeit.cms.content.browser.widget.XMLSnippetWidget(field, request)
>>> widget
<zeit.cms.content.browser.widget.XMLSnippetWidget object at 0x...>
>>> widget.setRenderedValue(content.snippet)
>>> widget._getFormValue()
u''


>>> content.snippet = u'Foo <em>bar</em> baz'
>>> widget.setRenderedValue(content.snippet)
>>> widget._getFormValue()
u'Foo <em>bar</em> baz'

>>> widget.setRenderedValue(u'Foo &lt;bla <em>baz</em>')
>>> widget()
u'<textarea cols="60" id="field.snippet" name="field.snippet" rows="15" >Foo &amp;lt;bla &lt;em&gt;baz&lt;/em&gt;</textarea>'

>>> invalid_value = u'Fo <!bla <em>baz</em>'
>>> widget._toFieldValue(invalid_value)
u'Fo &lt;!bla <em>baz</em>'

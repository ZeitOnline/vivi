======================
XML source edit widget
======================

The xml source edit widget is there to edit objectified trees as XML source.

Create a schema:

>>> import zope.interface
>>> import zeit.cms.content.field
>>>
>>> class IContent(zope.interface.Interface):
...     xml = zeit.cms.content.field.XMLTree()

Create a content object:


>>> import lxml.objectify
>>> class Content(object):
...     zope.interface.implements(IContent)
...     xml = lxml.objectify.XML('<art/><?foo?>')
...
>>> content = Content()

We also need a a request:

>>> import zope.publisher.browser
>>> request = zope.publisher.browser.TestRequest()


To initialize the widget we need a bound field:

>>> field = IContent['xml'].bind(content)

Now create the widget:

>>> import zeit.cms.content.field
>>> widget = zeit.cms.content.field.XMLTreeWidget(field, request)
>>> widget
<zeit.cms.content.field.XMLTreeWidget object at 0x...>
>>> widget.setRenderedValue(content.xml)
>>> widget._getFormValue()
u'<art/><?foo?>'


Editing sub-nodes
=================

The widget also supports editing subnodes. That is that the data being edited
is not a full tree but a node in a tree.

>>> content.whole_tree = lxml.objectify.XML('<a><b/><editme><c/></editme></a>')
>>> content.xml = content.whole_tree.editme
>>> widget.setRenderedValue(content.xml)
>>> widget._getFormValue()
u'<editme>\r\n    <c/>\r\n</editme>'


Converting back to a tree
=========================
The widget converts the entered data back to a tree:

>>> widget._toFieldValue(u'<editedyou/>')
<Element editedyou at ...>


When the entered data is not valid xml a `ConversionError` is raised:

>>> widget._toFieldValue(u'<ed')
Traceback (most recent call last):
    ...
ConversionError: (line 1: Couldn't find end of Start Tag ed line 1, None)


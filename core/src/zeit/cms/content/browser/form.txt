Default form
============

The form automatically assigns year and volume from the global settings:

>>> import zope.publisher.browser
>>> request = zope.publisher.browser.TestRequest()
>>> import zeit.cms.content.browser.form
>>> form = zeit.cms.content.browser.form.CommonMetadataAddForm(
...    getRootFolder(), request)
>>> form.setUpWidgets()
>>> import pprint
>>> pprint.pprint(request.form)
{'form.year': '2008', 'form.volume': '26'}


Asset form
==========

The asset form is constructed from various places. XXX

When the user is on the asset form and checks out the asset form is also
displayed after checkout/checkin[#prepare-testcontent]_

>>> from zope.testbrowser.testing import Browser
>>> browser = Browser()
>>> browser.addHeader('Authorization', 'Basic user:userpw')
>>> browser.open('http://localhost/++skin++cms/repository/testcontent')
>>> browser.getLink('Assets').click()
>>> print browser.title.strip()
testcontent – Assets

We stay on the asset page when checking out:

>>> browser.getLink('Checkout').click()
>>> print browser.title.strip()
testcontent – Edit assets

And checking in:

>>> browser.getLink('Checkin').click()
>>> print browser.title.strip()
testcontent – Assets


Clean up:

>>> zope.interface.classImplementsOnly(
...     zeit.cms.testcontenttype.testcontenttype.TestContentType,
...     *old_implements)

.. [#prepare-testcontent] Let the test content provide IAssetViews:

    >>> import zope.interface
    >>> import zeit.cms.content.browser.interfaces
    >>> import zeit.cms.testcontenttype.testcontenttype
    >>> old_implements = list(zope.interface.implementedBy(
    ...     zeit.cms.testcontenttype.testcontenttype.TestContentType))
    >>> zope.interface.classImplements(
    ...     zeit.cms.testcontenttype.testcontenttype.TestContentType,
    ...     zeit.cms.content.browser.interfaces.IAssetViews)

Semantic change
===============

The SemanticChange adapter indicates the last semantic change
[#functional]_ [#liveprop]_:

>>> import zeit.cms.content.interfaces
>>> content = repository['testcontent']
>>> sc = zeit.cms.content.interfaces.ISemanticChange(content)
>>> sc.last_semantic_change is None
True

The last semantic change is set on creation:

>>> import zope.event
>>> import zope.lifecycleevent
>>> zope.event.notify(zope.lifecycleevent.ObjectCopiedEvent(content, content))
>>> sc.last_semantic_change is None
True
>>> zope.event.notify(zope.lifecycleevent.ObjectCreatedEvent(content))
>>> sc.last_semantic_change
datetime.datetime(..., tzinfo=<UTC>)

The last semantic change is set on checkin:

>>> import zeit.cms.checkout.helper
>>> with zeit.cms.checkout.helper.checked_out(content, semantic_change=True):
...     pass
>>> content = repository['testcontent']
>>> sc = zeit.cms.content.interfaces.ISemanticChange(content)
>>> sc.last_semantic_change
datetime.datetime(..., tzinfo=<UTC>)

Teardown
========

>>> liveprop = zope.component.getUtility(
...     zeit.cms.content.interfaces.ILivePropertyManager)
>>> liveprop.unregister_live_property(
...     'uuid', 'http://namespaces.zeit.de/CMS/document')
>>> liveprop.unregister_live_property(
...     'last-semantic-change', 'http://namespaces.zeit.de/CMS/document')


.. [#functional]

    >>> import zeit.cms.testing
    >>> zeit.cms.testing.set_site()
    >>> p = zeit.cms.testing.create_interaction()
    >>> dummy = with_statement

    >>> import zope.component
    >>> import zeit.cms.repository.interfaces
    >>> repository = zope.component.getUtility(
    ...     zeit.cms.repository.interfaces.IRepository)


.. [#liveprop]

    >>> liveprop = zope.component.getUtility(
    ...     zeit.cms.content.interfaces.ILivePropertyManager)
    >>> liveprop.register_live_property(
    ...     'uuid', 'http://namespaces.zeit.de/CMS/document')
    >>> liveprop.register_live_property(
    ...     'last-semantic-change', 'http://namespaces.zeit.de/CMS/document')

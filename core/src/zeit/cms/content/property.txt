==============
XML-Properties
==============

The xml properties map to elements or attributes in an xml document. There are
several of them. All have in common that they are execting the instance to have
an `xml` attribute being an `lxml.etree` tree.


ObjectPathProperty
==================

The ObjectPathProperty maps to an xml *element* defined by an object path.


Root as `xml`
-------------

Normally the document root is the `xml` attribute.  Create a test class:

>>> from zeit.cms.content.property import ObjectPathProperty
>>> import lxml.etree
>>> from unittest import mock
>>> import persistent
>>> class Content(persistent.Persistent):
...     xml = lxml.etree.fromstring('<a/>')
...     b = ObjectPathProperty('.b')
>>> content = Content()
>>> content._p_jar = mock.Mock()

Initially b is None, since the node doesn't exist:

>>> print(content.b)
None

Let's assign some values to b. Note that strings are always unicode:

>>> import zeit.cms.testing
>>> content.b = 'Foo'
>>> content.b
'Foo'
>>> print(zeit.cms.testing.xmltotext(content.xml))
<a>
    <b>Foo</b>
</a>


It is also possible to declare a field for the property:

>>> import zope.schema
>>> prop = ObjectPathProperty('.b', zope.schema.TextLine())
>>> content.xml.find('b').text = '1234'
>>> prop.__get__(content, None)
'1234'

Invalid values fall back to the default behaviour, i.e. don't use the field for
validation:

>>> prop = ObjectPathProperty('.b', zope.schema.TextLine(max_length=2))
>>> content.xml.find('b').text = '1234'
>>> prop.__get__(content, None)
'1234'

We can also get the field's default value instead of the mssing value when the
XML is empty:

>>> prop = ObjectPathProperty(
...     '.b', zope.schema.TextLine(default='foo'), use_default=True)
>>> content.xml.remove(content.xml.find('b'))
>>> prop.__get__(content, None)
'foo'


Arbitrary Element as `xml`
--------------------------

The `xml` attribute can also be a sub node of an xml tree. There is a special
object path of `None` to refer directly to the node specified by `xml`. Let's
create a test-class:

>>> xml_tree = lxml.etree.fromstring('<a><b/><c/><b/><b/></a>')
>>> class Content(persistent.Persistent):
...     xml = xml_tree.findall('b')[1]
...     b = ObjectPathProperty(None)
>>> content = Content()
>>> content._p_jar = mock.Mock()
>>> content._p_changed
False

Initially b is an empty string, since the node exist and is empty:

>>> content.b
''

Let's assign some values to b.

>>> content.b = 'example'
>>> content.b
'example'
>>> print(zeit.cms.testing.xmltotext(xml_tree))
<a>
    <b/>
    <c/>
    <b>example</b>
    <b/>
</a>
>>> content._p_changed
True


ObjectPathAttributeProperty
===========================

The ObjectPathAttributeProperty refers to a node via an object path and then to
an attribute of that node. Given the following XML we can access the attributes
via ObjectPathAttributeProperty:

>>> xml_tree = lxml.etree.fromstring(
...     '<doc><a href="url">link</a><count words="5" chars="20"/></doc>')

Let's define a content class using the XML. Word and character count are
integers. We are also referencing `sencences` which is
not in the document, yet:

>>> from zeit.cms.content.property import ObjectPathAttributeProperty
>>> from zc.sourcefactory.contextual import BasicContextualSourceFactory
>>> class ExampleSource(BasicContextualSourceFactory):
...     def getValues(self, context):
...         return ['one', 'two', 'three']
...
>>> class Content:
...     xml = xml_tree
...     url = ObjectPathAttributeProperty('.a', 'href')
...     words = ObjectPathAttributeProperty(
...         '.count', 'words', zope.schema.Int(default=0))
...     chars = ObjectPathAttributeProperty(
...         '.count', 'chars', zope.schema.Int())
...     sentences = ObjectPathAttributeProperty(
...         '.count', 'sentences', zope.schema.Int())
...     choice = ObjectPathAttributeProperty(
...         '.count', 'choice', zope.schema.Choice(source=ExampleSource()))
...     text = ObjectPathAttributeProperty(
...         '.', 'text', zope.schema.TextLine(required=False))
...     bool = ObjectPathAttributeProperty(
...         '.', 'bool', zope.schema.Bool(default=False, required=False))
...
>>> content = Content()

Access the values:

>>> content.url
'url'
>>> content.words
5
>>> content.chars
20
>>> content.sentences is None
True
>>> content.choice is None
True
>>> content.bool is None
True


Setting new values:

>>> content.url = 'http://www.zeit.de'
>>> content.words = 53
>>> content.sentences = 2
>>> content.choice = 'two'
>>> content.bool = True
>>> print(zeit.cms.testing.xmltotext(xml_tree))
<doc bool="True">
  <a href="http://www.zeit.de">link</a>
  <count words="53" chars="20" sentences="2" choice="two"/>
</doc>
>>> content.choice
'two'


Setting bool to false works as well:

>>> content.bool = False
>>> content.bool
False
>>> print(zeit.cms.testing.xmltotext(xml_tree))
<doc bool="False">
  <a href="http://www.zeit.de">link</a>
  <count words="53" chars="20" sentences="2" choice="two"/>
</doc>


Setting None will remove the attribute:

>>> content.text = 'some text'
>>> content.text
'some text'
>>> content.text = None
>>> content.text is None
True
>>> content.bool = None
>>> print(zeit.cms.testing.xmltotext(xml_tree))
<doc>
  <a href="http://www.zeit.de">link</a>
  <count words="53" chars="20" sentences="2" choice="two"/>
</doc>

Setting None again doens't harm:

>>> content.text = None



Referencing Resources
=====================

To reference other resources there are special properties which store the
unique id instead of object references.

Create a mock repository:


>>> import zeit.cms.interfaces
>>> import zope.component
>>> repository_objects = {}
>>> gsm = zope.component.getGlobalSiteManager()
>>> gsm.registerAdapter(
...     repository_objects.get,
...     (str,), zeit.cms.interfaces.ICMSContent)


Referencing a single resource
+++++++++++++++++++++++++++++


Create a content class which holds the reference and will also be used to be
referenced:

>>> class Content:
...     res = zeit.cms.content.property.SingleResource('.res')
...     def __init__(self):
...         self.xml = lxml.etree.fromstring('<foo/>')

Create our content object:

>>> content = Content()

Create an object which will be referenced:

>>> referenced_obj = Content()
>>> referenced_obj.uniqueId = 'http://xml.zeit.de/refed'

Add the referenced object to the repository:

>>> repository_objects[referenced_obj.uniqueId] = referenced_obj


Reference the object:

>>> content.res = referenced_obj

Let's have a look how the resource has been referenced:

>>> print(zeit.cms.testing.xmltotext(content.xml))
<foo>
  <res>http://xml.zeit.de/refed</res>
</foo>


Of course we also can get the resource back:

>>> content.res
<Content object at 0x...>
>>> content.res is referenced_obj
True

Deleting the reference is also possible:

>>> content.res = None
>>> content.res is None
True
>>> content.res = referenced_obj
>>> del content.res
>>> content.res is None
True

When the referenced object is deleted from the repository we will get None
back:

>>> content.res = referenced_obj
>>> repository_objects.clear()
>>> content.res is None
True


Clean up:

>>> gsm.unregisterAdapter(
...     repository_objects.get,
...     (str,), zeit.cms.interfaces.ICMSContent)
True



SimpleMultiProperty
===================

The `SimpleMultiProperty` is used for lists of simple values.


>>> class Content:
...     simpleproperty = zeit.cms.content.property.SimpleMultiProperty(
...         '.simpleproperty.node')
...     def __init__(self):
...         self.xml = lxml.etree.fromstring('<foo><head/></foo>')
>>> content = Content()

Set simpleproperty:

>>> content.simpleproperty = ('Hans', 'Klaus', 'Siegfried')
>>> print(zeit.cms.testing.xmltotext(content.xml))
<foo>
  <head/>
  <simpleproperty>
    <node>Hans</node>
    <node>Klaus</node>
    <node>Siegfried</node>
  </simpleproperty>
</foo>


>>> content.simpleproperty
('Hans', 'Klaus', 'Siegfried')





Structure
+++++++++

Create a content class:

>>> import zeit.cms.content.xmlsupport
>>> import zeit.cms.content.property
>>>
>>> class Content(zeit.cms.content.xmlsupport.XMLRepresentationBase):
...
...     default_template = '<foo xmlns:myns="namespace"/>'
...     title = zeit.cms.content.property.Structure('.title')

>>> content = Content()
>>> content.title = 'Foo <em>bar</em> baz'

>>> import lxml.etree
>>> print(zeit.cms.testing.xmltotext(content.xml))
<foo xmlns:myns="namespace">
  <title>Foo <em>bar</em> baz</title>
</foo>

Get the value:

>>> content.title
'Foo <em>bar</em> baz'


>>> content.title = 'Foo <em>Bar<a href="blaubs">click</a></em>'
>>> content.title
'Foo <em>Bar<a href="blaubs">click</a></em>'

>>> content.title = '<em>blah</em>'
>>> content.title.strip()
'<em>blah</em>'
>>> print(zeit.cms.testing.xmltotext(content.xml))
<foo xmlns:myns="namespace">
  <title>
    <em>blah</em>
  </title>
</foo>


Make sure a single < in the first text node is escaped:

>>> content.title = 'Foo &lt;bar <em>blubs</em>'
>>> content.title
'Foo &lt;bar <em>blubs</em>'

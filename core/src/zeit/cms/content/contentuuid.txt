===============================
Adding a UID to content objects
===============================

When checking in objects, unique ids (UIDs) are added
automatically[#functional]_.

We need an interaction as checkout manager needs to get the principal:

>>> import zeit.cms.testing
>>> principal = zeit.cms.testing.create_interaction()

We checkout a test content object:

>>> import zeit.cms.interfaces
>>> content = zeit.cms.interfaces.ICMSContent('http://xml.zeit.de/testcontent')

It won't have a unique id yet:

>>> import zeit.cms.content.interfaces
>>> uuid = zeit.cms.content.interfaces.IUUID(content).id
>>> uuid is None
True

We check out the test content object:

>>> from zeit.cms.checkout.interfaces import (
...     ICheckoutManager, ICheckinManager)
>>> checkout_manager = ICheckoutManager(content)
>>> checked_out = checkout_manager.checkout()

It still won't have the unique id:

>>> uuid = zeit.cms.content.interfaces.IUUID(checked_out).id
>>> uuid is None
True

Now we check in:

>>> checkin_manager = ICheckinManager(checked_out)
>>> checked_in = checkin_manager.checkin()

After the ckeckin, the unique id is added:

>>> uuid = zeit.cms.content.interfaces.IUUID(checked_in).id
>>> uuid
'{urn:uuid:1029cf63-5823-456c-bbd4-1a98cdfa25c7}'

Let's verify, that when we check it out and then in again, the unique id has
not changed:

>>> checked_out = checkout_manager.checkout()
>>> checkin_manager = ICheckinManager(checked_out)
>>> checked_in = checkin_manager.checkin()
>>> zeit.cms.content.interfaces.IUUID(checked_in).id == uuid
True

The XML content will contain the unique id:

>>> import lxml.etree
>>> print lxml.etree.tostring(checked_in.xml, pretty_print=True),
<testtype>
  <head>
    ...
    <attribute
        xmlns:py="http://codespeak.net/lxml/objectify/pytype"
        py:pytype="str"
        ns="http://namespaces.zeit.de/CMS/document"
        name="uuid">{urn:uuid:1029cf63-5823-456c-bbd4-1a98cdfa25c7}</attribute>...
  </head>
  <body/>
</testtype>


Once a content has a unique id it can be retrieved using the UUID. Due to
limited search capabilities in the tests we use the somalia article to show
this:

>>> co = ICheckoutManager(zeit.cms.interfaces.ICMSContent(
...     'http://xml.zeit.de/online/2007/01/Somalia')).checkout()
>>> somalia = ICheckinManager(co).checkin()

Usually, when looking up an object via UUID one only has the UUID as string:

>>> uuid = zeit.cms.content.interfaces.IUUID(somalia).id

The UUID can be adapted to IUUID to get an object which represents the UUID:
>>> uuid_obj = zeit.cms.content.interfaces.IUUID(uuid)

This object can be adapted then:

>>> content = zeit.cms.interfaces.ICMSContent(uuid_obj)
Searching:  (:eq "http://namespaces.zeit.de/CMS/document" "uuid" "{urn:uuid:8e6a97ba-131d-4cd0-90b2-f52feecaabb0}")

>>> print content.uniqueId
http://xml.zeit.de/online/2007/01/Somalia


Cleanup
=======

After the test we restore the old site:

.. [#functional] We need to set the site since we're a functional test:

    >>> import zeit.cms.testing
    >>> zeit.cms.testing.set_site()

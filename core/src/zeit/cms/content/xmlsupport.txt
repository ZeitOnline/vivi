=========
XML tests
=========

Mapping of DAV properties to xml
================================

A content which implements IDAVPropertiesInXML will have it's webdav properties
mapped to xml on change, checkin, checkout.

Let's mark testcontent as IDAVPropertiesInXML:

>>> import zope.interface
>>> import zeit.cms.content.interfaces
>>> import zeit.cms.testcontenttype.testcontenttype
>>> old_implements = list(zope.interface.implementedBy(
...     zeit.cms.testcontenttype.testcontenttype.TestContentType))
>>> zope.interface.classImplements(
...     zeit.cms.testcontenttype.testcontenttype.TestContentType,
...     zeit.cms.content.interfaces.IDAVPropertiesInXML)


Update on property change
-------------------------

When we set the title, an IDAVPropertyChangedEvent is issued. Thus the xml will
change and contain the property[#functional]_:

>>> content = repository['testcontent']
>>> import zeit.cms.checkout.interfaces
>>> content = zeit.cms.checkout.interfaces.ICheckoutManager(content).checkout()
>>> content.year = 2004
>>> import lxml.etree
>>> print lxml.etree.tostring(content.xml, pretty_print=True)
<testtype>
  <head>
    <attribute xmlns:py="http://codespeak.net/lxml/objectify/pytype"
        py:pytype="str"
        ns="http://namespaces.zeit.de/CMS/document" name="year">2004</attribute>
  </head>
  <body/>
</testtype>


Setting the value to None, which is the default of the field, will remove the
property:

>>> content.year = None
>>> print lxml.etree.tostring(content.xml, pretty_print=True)
<testtype>
  <head/>
  <body/>
</testtype>

Checkin handler
---------------

The checkin handler copies all webdav properties to the xml *before* the object
is checked in. It removes all existing head.attribute nodes before adding the
properties. Add some attributes to make sure they're removed:

>>> content.xml = lxml.objectify.XML(u"""\
...     <testtype>
...      <head>
...        <attribute xmlns:py="http://codespeak.net/lxml/objectify/pytype" py:pytype="str" ns="some-namespace" name="somename">somevalue</attribute>
...        <attribute xmlns:py="http://codespeak.net/lxml/objectify/pytype" py:pytype="str" ns="some-namespace" name="some-other-name">someothervalue</attribute>
...      </head><body/>
...    </testtype>""")


Let's add some properties under the hood. Note that properties in the DAV:
namespace are *not* mapped:

>>> import zeit.connector.interfaces
>>> properties = zeit.connector.interfaces.IWebDAVProperties(
...     repository['testcontent'])
>>> properties.register_live_property('am-i', 'under-the-hood')
>>> properties.register_live_property('foobar', 'DAV:')
>>> properties[('am-i', 'under-the-hood')] = '4711'
>>> properties[('foobar', 'DAV:')] = 'no-dav-sync'
>>> print lxml.etree.tostring(content.xml, pretty_print=True)
<testtype>
  <head>
    <attribute xmlns:py="http://codespeak.net/lxml/objectify/pytype" py:pytype="str" ns="some-namespace" name="somename">somevalue</attribute>
    <attribute xmlns:py="http://codespeak.net/lxml/objectify/pytype" py:pytype="str" ns="some-namespace" name="some-other-name">someothervalue</attribute>
  </head>
  <body/>
</testtype>


>>> content = zeit.cms.checkout.interfaces.ICheckinManager(content).checkin()
>>> print lxml.etree.tostring(content.xml, pretty_print=True)
<testtype>
  <head>
    <attribute xmlns:py="http://codespeak.net/lxml/objectify/pytype"
    py:pytype="str"
    ns="under-the-hood" name="am-i">4711</attribute>
    <attribute xmlns:py="http://codespeak.net/lxml/objectify/pytype"
        py:pytype="str" ns="http://namespaces.zeit.de/CMS/document"
        name="date-last-modified">...-...-...T...+00:00</attribute>
    <attribute xmlns:py="http://codespeak.net/lxml/objectify/pytype"
        py:pytype="str" ns="http://namespaces.zeit.de/CMS/workflow"
        name="id">ZEDE-<GUID></attribute>
    <attribute xmlns:py="http://codespeak.net/lxml/objectify/pytype"
        py:pytype="str" ns="http://namespaces.zeit.de/CMS/document"
        name="last_modified_by">bob</attribute>
    <attribute xmlns:py="http://codespeak.net/lxml/objectify/pytype"
        py:pytype="str" ns="http://namespaces.zeit.de/CMS/meta"
        name="type">testcontenttype</attribute>
  </head>
  <body/>
</testtype>

There was once a bug which prevented the editing of (checked out) documents
when they were no longer in the repository. Checkout testcontent again, then
delete it from the repository:

>>> content = repository['testcontent']
>>> content = zeit.cms.checkout.interfaces.ICheckoutManager(content).checkout()
>>> del repository['testcontent']

We can now still change the values here w/o getting an error:

>>> content.year = 2009
>>> content.year
2009


Clean up:

>>> zope.interface.classImplementsOnly(
...     zeit.cms.testcontenttype.testcontenttype.TestContentType,
...     *old_implements)
>>> zope.security.management.endInteraction()
>>> zope.app.component.hooks.setSite(old_site)

.. [#functional]

    >>> import zope.app.component.hooks
    >>> old_site = zope.app.component.hooks.getSite()
    >>> zope.app.component.hooks.setSite(getRootFolder())
    >>> import zope.security.management
    >>> import zope.security.testing
    >>> principal = zope.security.testing.Principal(u'bob')
    >>> participation = zope.security.testing.Participation(principal)
    >>> zope.security.management.newInteraction(participation)

    Get the repository:

    >>> import zope.component
    >>> import zeit.cms.repository.interfaces
    >>> repository = zope.component.getUtility(
    ...     zeit.cms.repository.interfaces.IRepository)

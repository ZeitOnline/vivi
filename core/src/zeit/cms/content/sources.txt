Sources
=======

>>> import zeit.cms.testcontenttype.testcontenttype
>>> content = zeit.cms.testcontenttype.testcontenttype.TestContentType()

Serie
+++++

The serie source returns the possible "serie" values:

>>> from pprint import pprint
>>> import zeit.cms.content.sources
>>> serie = zeit.cms.content.sources.SerieSource()
>>> serie = serie(content)
>>> attr = ('serienname', 'title', 'url', 'encoded', 'column', 'video')
>>> pprint([[getattr(x, a) for a in attr] for x in serie])
[[u'-', u'-', u'-', None, False, False],
 [u'Autotest', u'Autotest', u'zeitmagazin-autotest', None, False, False],
 [u'Bachelor Tagebuch',
  u'Bachelor Tagebuch',
  u'bachelor-tagebuch',
  u'Bachelor%20Tagebuch',
  False,
  False],
 [u'Chefsache', u'Chefsache', u'chefsache', None, True, False],
 [u'City Guide', u'City Guide', u'city-guide', u'City%20Guide', False, False],
 [u'Das Prinzip 50/50',
  u'Das Prinzip 50/50',
  u'das-prinzip-50-50',
  u'Das%20Prinzip%2050%2F50',
  False,
  False],
 [u'E-Mail aus Davos',
  u'E-Mail aus Davos',
  u'email-aus-davos',
  u'E-Mail%20aus%20Davos',
  False,
  False],
 [u'Faktomat', u'Faktomat', u'faktomat', None, False, False],
 [u'Geschafft!', u'Geschafft!', u'geschafft', None, False, False],
 [u'H\xf6r-Reise',
  u'H\xf6r-Reise',
  u'hoer-reise',
  u'H%C3%B6r-Reise',
  False,
  False],
 [u'Zeitl\xe4ufte',
  u'Zeitl\xe4ufte',
  u'zeitlaeufte',
  u'Zeitl%C3%A4ufte',
  False,
  False]]


Navigation
++++++++++

>>> navi = zeit.cms.content.sources.NavigationSource()
>>> navi = navi(content)
>>> pprint(list(navi))
[u'Deutschland',
 u'International',
 u'Wirtschaft',
 u'Finanzen',
 u'Wissen',
 u'Gesundheit',
 u'Computer',
 u'Bildung & Beruf',
 u'Studium',
 u'Campus',
 u'Zeit f\xfcr die Schule',
 u'Kultur',
 u'Feuilleton',
 u'Musik',
 u'Literatur',
 u'Leben',
 u'ZUENDER',
 u'Reisen',
 u'Reise',
 u'Sport',
 u'Spiele',
 u'Weblogs',
 u'Auto',
 u'Kunst',
 u'Multimedia',
 u'Video',
 u'------',
 u'ZEIT-Verlag',
 u'Akademie',
 u'Altersvorsorge',
 u'ranking',
 u'Hanser',
 u'visitfinland',
 u'chile-heute',
 u'baufritz',
 u'missionzukunft',
 u'campus-knigge',
 u'e-balance',
 u'bundeskunsthalle',
 u'angebote']


Titles and tokens are working, too:
 
>>> import zope.publisher.browser
>>> import zope.browser.interfaces
>>> request = zope.publisher.browser.TestRequest()
>>> terms = zope.component.getMultiAdapter(
...     (navi, request),
...     zope.browser.interfaces.ITerms)
>>> terms.getTerm('Kultur').title
u'Kultur'
>>> terms.getTerm('Kultur').token
'0494f194cae00d8dc3e982b89b046aa4'
>>> terms.getTerm('snafoo').title
'snafoo'
>>> terms.getTerm('sna"foo').title
'sna"foo'



SubNavigation
+++++++++++++

The sub navigation is dependent on the navigation.

There are different contexts: a content object, a container (add form) and an
ajax something.

>>> sub_ressort = zeit.cms.content.sources.SubNavigationSource()
>>> bound = sub_ressort(content)

Currently the content has *no* navigation/ressort element selected. This means
that we get *all* sub navigation elements

>>> pprint(sorted(list(bound)))
[u'Datenschutz',
 u'Integration',
 u'Joschka Fisher',
 u'Meinung',
 u'Nahost',
 u'US-Wahl']

Select 'Deutschland'. Since ITestContentType is an ICMSContent we still get
everything. This is actually not desired but is the only way we can avoid
saving the ressort first and then the subressort:

>>> content.ressort = u'Deutschland'
>>> pprint(sorted(list(bound)))
[u'Datenschutz',
 u'Integration',
 u'Joschka Fisher',
 u'Meinung',
 u'Nahost',
 u'US-Wahl']

When we use an object as context which does not provide ICMSContent but is
adaptable to ICommonMetadata we'll get filtered results:

>>> import zope.interface
>>> import zeit.cms.content.interfaces
>>> class Meta(object):
...     zope.interface.implements(
...         zeit.cms.content.interfaces.ICommonMetadata) 
>>> meta = Meta()
>>> meta.ressort = u'Deutschland'
>>> bound = sub_ressort(meta)
>>> pprint(sorted(list(bound)))
[u'Datenschutz', u'Integration', u'Joschka Fisher', u'Meinung']

Verify terms/titles:

>>> terms = zope.component.getMultiAdapter(
...     (bound, request),
...     zope.browser.interfaces.ITerms)

Currently we have selected "Detuschland":

>>> term = terms.getTerm('Meinung')
>>> term.token
'58943ab3ce913fa50e3c4566e2f10f7b'
>>> term.title
u'Meinung'


Terms for invalid values return the value as title:

>>> terms.getTerm('Foobar').title
'Foobar'

Set the ressort to None, i.e. not selected, yet. Also create a new source to
avoide the memoize:

>>> content.ressort = None
>>> sub_ressort = zeit.cms.content.sources.SubNavigationSource()
>>> bound = sub_ressort(content)
>>> terms = zope.component.getMultiAdapter(
...     (bound, request),
...     zope.browser.interfaces.ITerms)
>>> term = terms.getTerm('Meinung')
>>> term.token
'58943ab3ce913fa50e3c4566e2f10f7b'
>>> term.title
u'Meinung'

When the source is bound to an object which doesn't provide ICommonMetadata the
titles do still work:

>>> sub_ressort = zeit.cms.content.sources.SubNavigationSource()
>>> bound = sub_ressort(object())
>>> terms = zope.component.getMultiAdapter(
...     (bound, request),
...     zope.browser.interfaces.ITerms)
>>> term = terms.getTerm('Meinung')
>>> term.token
'58943ab3ce913fa50e3c4566e2f10f7b'
>>> term.title
u'Meinung'
>>> terms.getTerm('Foobar').title
'Foobar'


The subressort source can also be bound to a unicode which is interpreted as
ressort:

>>> bound = sub_ressort(u'Deutschland')
>>> sorted(bound)
[u'Datenschutz', u'Integration', u'Joschka Fisher', u'Meinung']
>>> bound = sub_ressort(u'Bildung & Beruf')
>>> sorted(bound)
[]


Products
++++++++

>>> products = zeit.cms.content.sources.ProductSource()(object())
>>> pprint([x.id for x in products])
[u'ZEI',
 u'ZMLB',
 u'TEST',
 u'ZTCS',
 u'ZTWI',
 u'ZTGS',
 u'tdb',
 u'tbd',
 u'KINZ',
 u'ZEDE']
>>> terms = zope.component.getMultiAdapter(
...     (products, request),
...     zope.browser.interfaces.ITerms)
>>> terms.getTerm(list(products)[-1]).title
u'Zeit Online'
>>> list(products)[-2].vgwortcode
u'1234abc'
>>> list(products)[-1].vgwortcode is None
True


Banners
+++++++

>>> pprint(list(zeit.cms.content.sources.BannerSource()))
[2]


Cache collector
+++++++++++++++

The cache collector collects every 100 calls. Register a log handler:

>>> import logging
>>> import StringIO
>>> log = StringIO.StringIO()
>>> log_handler = logging.StreamHandler(log)
>>> logging.root.addHandler(log_handler)
>>> old_log_level = logging.root.level
>>> logging.root.setLevel(logging.DEBUG)

Reset the collect counter to 0:

>>> zeit.cms.content.sources._collect_counter = 0

Call once, the log stays empty:

>>> zeit.cms.content.sources.collect_caches(object())
>>> log.getvalue()
''

The counter is increased by 1:

>>> zeit.cms.content.sources._collect_counter
1

Call the collect another 99 times:

>>> for i in range(99):
...     zeit.cms.content.sources.collect_caches(object())


The counter is back at 0 and collect was done once:

>>> zeit.cms.content.sources._collect_counter
0
>>> print log.getvalue()
Collecting caches.

Clean up:

>>> logging.root.setLevel(old_log_level)

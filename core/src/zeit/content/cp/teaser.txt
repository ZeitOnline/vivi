Teaser
======

Teaser objects contain the metadata of and a reference to an ICMSContent.

You can generate a teaser by adapting to `ITeaser`:

>>> import zeit.cms.testing
>>> zeit.cms.testing.set_site()
>>> principal = zeit.cms.testing.create_interaction()
>>> import zope.component
>>> import zeit.cms.repository.interfaces
>>> repository = zope.component.getUtility(
...     zeit.cms.repository.interfaces.IRepository)
>>> content = repository['testcontent']
>>> content.teaserTitle = 'Foo'
>>> teaser = zeit.content.cp.interfaces.ITeaser(content)
>>> teaser.teaserTitle
u'Foo'
>>> teaser.original_content
<zeit.cms.testcontenttype.testcontenttype.TestContentType object at 0x3b0c5b0>


Images
++++++

When retrieving the images for a teaser, we want to get the images of the
referenced article.

Create an article with images:

>>> import zeit.content.image.interfaces
>>> import zeit.content.image.tests
>>> import zeit.cms.checkout.interfaces
>>> group = zeit.content.image.tests.create_image_group()
>>> checked_out = zeit.cms.checkout.interfaces.ICheckoutManager(
...     content).checkout()
>>> images = zeit.content.image.interfaces.IImages(checked_out)
>>> images.images = (group, )
>>> content = zeit.cms.checkout.interfaces.ICheckinManager(
...     checked_out).checkin()

Create a teaser object from the article and look at its images:

>>> teaser = zeit.content.cp.interfaces.ITeaser(content)
>>> images = zeit.content.image.interfaces.IImages(teaser)
>>> images.images
(<zeit.content.image.imagegroup.ImageGroup object at 0x...>,)


Free teasers
++++++++++++

>>> import zope.security.management
>>> import zope.testbrowser.testing
>>> zope.security.management.endInteraction()
>>> browser = zope.testbrowser.testing.Browser()
>>> browser.addHeader('Authorization', 'Basic user:userpw')

Create a free teaser:

>>> zeit.content.cp.browser.testing.create_cp(browser)
>>> browser.open('contents')
>>> contents_url = browser.url
>>> browser.open(
...  'lead/@@landing-zone-drop?uniqueId=http://xml.zeit.de/testcontent')
>>> browser.open(contents_url)
>>> browser.getLink('Edit teaser list').click()
>>> lightbox_url = browser.url
>>> browser.getLink('Edit').click()
>>> browser.getControl('Teaser title').value = 'Local teaser title'
>>> browser.getControl('Apply only for this page').click()

The original object now notes that it is referenced:

>>> browser.open('http://localhost/++skin++cms/repository/testcontent')
>>> browser.getLink('References').click()
>>> print browser.contents
<...http://localhost/++skin++cms/repository/testcontent-2...

When the original object is changed, we receive a warning about the reference:

>>> browser.getLink('Checkout').click()
>>> browser.getControl('Title').value = 'New title'
>>> browser.getControl('Year').value = '2010'
>>> browser.getControl('Ressort').displayValue = ['Deutschland']
>>> browser.getControl(name='form.authors.0.').value = 'foo'
>>> browser.getControl('Apply').click()
>>> print browser.contents
<..."testcontent" is referenced by free teaser "testcontent-2"...



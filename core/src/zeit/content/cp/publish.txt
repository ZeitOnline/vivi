Automatic publishing
====================

Some setup to fill a centerpage[#functional]_:

>>> import zeit.content.cp.centerpage
>>> cp = zeit.content.cp.centerpage.CenterPage()
>>> lead = cp['lead']
>>> tm = cp['teaser-mosaic']
>>> import zeit.content.cp.interfaces
>>> import zope.component
>>> factory = zope.component.getAdapter(
...     lead, zeit.content.cp.interfaces.IElementFactory, name='teaser')
>>> teasers = factory()

>>> bar_factory = zope.component.getAdapter(
...     tm, zeit.content.cp.interfaces.IElementFactory, name='teaser-bar')
>>> teaser_bars = bar_factory()
>>> teaser_bar_factory = zope.component.getAdapter(
...     teaser_bars, zeit.content.cp.interfaces.IElementFactory, name='teaser')
>>> mosaic = teaser_bar_factory()

>>> import zeit.cms.repository.interfaces
>>> repository = zope.component.getUtility(
...     zeit.cms.repository.interfaces.IRepository)

>>> teasers.insert(0, repository['testcontent'])
>>> teasers.insert(1, repository['2007']['test'])
>>> mosaic.insert(0, repository['testcontent'])

When the workflow dependencies are computed, nothing is yielded right now as
neigher testcontent nor 2007/test is published:

>>> import zeit.workflow.interfaces
>>> zeit.workflow.interfaces.IPublicationDependencies(cp).get_dependencies()
[]


When testcontent is published it will be a dependency:

>>> import zeit.cms.checkout.helper
>>> import zeit.cms.content.interfaces
>>> import zeit.workflow.interfaces
>>> import zope.dublincore.interfaces
>>> content = repository['testcontent']
>>> workflow = zeit.cms.workflow.interfaces.IPublishInfo(content)
>>> workflow.published = True
>>> dc = zope.dublincore.interfaces.IDCTimes(content)
>>> with zeit.cms.checkout.helper.checked_out(
...     content, semantic_change=False) as co:
...     sc = zeit.cms.content.interfaces.ISemanticChange(co)
...     sc.last_semantic_change = dc.modified
>>> workflow.date_last_published = dc.modified
>>> zeit.workflow.interfaces.IPublicationDependencies(cp).get_dependencies()
[<zeit.cms.testcontenttype.testcontenttype.TestContentType object at 0x...>]


.. [#functional]

    >>> import zeit.cms.testing
    >>> zeit.cms.testing.set_site()
    >>> p = zeit.cms.testing.create_interaction()

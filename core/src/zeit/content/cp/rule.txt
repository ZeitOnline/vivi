Rules for blocks and areas
==========================

XXX this is supposed to be user documentation. writeme
[#functional]_

>>> import zeit.content.cp.centerpage
>>> import zope.component
>>> import zeit.content.cp.interfaces

>>> cp = zeit.content.cp.centerpage.CenterPage()
>>> teaser_factory = zope.component.getAdapter(
...     cp['lead'], zeit.content.cp.interfaces.IBlockFactory,
...     name='teaser')
>>> bar_factory = zope.component.getAdapter(
...     cp['teaser-mosaic'], zeit.content.cp.interfaces.IBlockFactory,
...     name='teaser-bar')

>>> from zeit.content.cp.rule import Rule


Validating the number of blocks in an area
++++++++++++++++++++++++++++++++++++++++++

>>> r = Rule("""
...     applicable(is_area and area == 'lead')
...     warning_unless(count > 6,
...                    u'In der Aufmacherfläche sollen mehr als 6 Teaserblöcke stehen')
...     error_unless(count > 2,
...                  u'In der Aufmacherfläche müssen mehr als 2 Teaserblöcke stehen')
...     """)
>>> r.apply(cp['lead'])
'error'
>>> r.message
u'In der Aufmacherfl\xc3\xa4che m\xc3\xbcssen mehr als 2 Teaserbl\xc3\xb6cke stehen'

>>> for i in range(3):
...     teaser = teaser_factory()

>>> r.apply(cp['lead'])
'warning'
>>> r.message
u'In der Aufmacherfl\xc3\xa4che sollen mehr als 6 Teaserbl\xc3\xb6cke stehen'

>>> for i in range(4):
...     teaser = teaser_factory()

>>> print r.apply(cp['lead'])
None
>>> print r.message
None


Validating the layout of a teaser bar
+++++++++++++++++++++++++++++++++++++

>>> teaserbar_1 = bar_factory()
>>> teaserbar_2 = bar_factory()

>>> r = Rule("""
...     applicable(is_block and area == 'teaser-mosaic' and position == 2)
...     error_unless(layout == 'dmr',
...                  u'Die zweite Teserleiste muss ein DMR sein')
...     """)
>>> r.apply(teaserbar_1)
>>> r.apply(teaserbar_2)
'error'

.. [#functional]

    >>> import zeit.cms.testing
    >>> zeit.cms.testing.set_site()

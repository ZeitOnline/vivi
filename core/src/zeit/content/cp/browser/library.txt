Module library
==============

The module library allows to create blocks. There are libraries to create
blocks in the informatives area and inside the teaser mosaic. Available modules
are transmitted in JSON[#setup]_:

>>> import json
>>> import pprint
>>> browser.open('informatives/@@block-factories.json')
>>> pprint.pprint(json.loads(browser.contents))
{u'factories': [{u'css': u'module represents-content-object cp-module',
                u'image': u'http://localhost/++skin++cms/fanstatic/zeit.content.cp/module-audio.png',
                u'title': u'Audioblock',
                u'type': u'audio'},
                ...
 u'template_url': u'http://localhost/++skin++cms/fanstatic/zeit.content.cp/block_factories.jsont'}


One can also ask for blocks which can be added on the CP in general:

>>> browser.open(cp_url)
>>> browser.open('contents')
>>> contents_url = browser.url
>>> browser.open('@@block-factories.json')
>>> pprint.pprint(json.loads(browser.contents))
{u'factories': [{u'css': u'module represents-content-object cp-module',
                u'image': u'http://localhost/++skin++cms/fanstatic/zeit.content.cp/module-audio.png',
                u'title': u'Audioblock',
                u'type': u'audio'},
                ...
  u'template_url': u'http://localhost/++skin++cms/fanstatic/zeit.content.cp/block_factories.jsont'}


Adding blocks works by drag and drop. We simulate this here.

In the informatives area is a landing zone to create a block:

>>> browser.open(contents_url)
>>> print browser.contents
<div...
 <div class="landing-zone action-cp-module-droppable"
      cms:create-block-url="http://localhost/++skin++cms/workingcopy/zope.user/island/feature/informatives/@@landing-zone-drop-module">
      ...

Create a cpextra block as first block in the informatives. The view returns
information about the created block:

>>> browser.open('http://localhost/++skin++cms/workingcopy/zope.user/'
...              'island/informatives/@@landing-zone-drop-module'
...              '?block_type=cpextra')
>>> result = json.loads(browser.contents)
>>> pprint.pprint(result['signals'])
[{u'args': [u'id-7ccff7a0-3758-416c-ad30-d0183a2543fd'],
  u'name': u'added',
  u'when': u'after-reload'},
 {u'args': [u'informatives',
            u'http://localhost/++skin++cms/workingcopy/zope.user/island/feature/informatives/@@contents'],
  u'name': u'reload',
  u'when': None}]
>>> print browser.headers
Status: 200 Ok
Content-Length: ...
Content-Type: text/json
...

>>> created_block_id = result['signals'][0]['args'][0]

The block is contained in the contents. A landing zone to create blocks *after*
it, is rendered too:

>>> browser.open(contents_url)
>>> print browser.contents
<div...
<div class="landing-zone action-cp-module-droppable"
     cms:create-block-url="http://localhost/++skin++cms/workingcopy/zope.user/island/feature/informatives/@@landing-zone-drop-module">
</div>
  <div ...class="block type-cpextra...id="id-c55fae1c-4bd9-4de3-9a50-ccaf6ccf5515">
    ...
  <div class="landing-zone action-cp-module-droppable"
       cms:create-block-url="http://localhost/++skin++cms/workingcopy/zope.user/island/feature/informatives/id-c55fae1c-4bd9-4de3-9a50-ccaf6ccf5515/@@landing-zone-drop-module">
  </div>
  ...

Add an audio block after the just created cpextra block now:

>>> browser.open(
...     'http://localhost/++skin++cms/workingcopy/zope.user/island/'
...     'informatives/%s/@@landing-zone-drop-module?block_type=audio' %
...     created_block_id)

>>> browser.open(contents_url)
>>> print browser.contents
<div...
<div class="landing-zone action-cp-module-droppable"
     cms:create-block-url="http://localhost/++skin++cms/workingcopy/zope.user/island/feature/informatives/@@landing-zone-drop-module">
</div>
  <div ...class="block type-cpextra...id="id-c55fae1c-4bd9-4de3-9a50-ccaf6ccf5515">
    ...
  <div class="landing-zone action-cp-module-droppable"
       cms:create-block-url="http://localhost/++skin++cms/workingcopy/zope.user/island/feature/informatives/id-c55fae1c-4bd9-4de3-9a50-ccaf6ccf5515/@@landing-zone-drop-module">
  </div>
  ...<div...class="block type-audio...


.. [#setup]

    >>> import z3c.etestbrowser.testing
    >>> import zeit.content.cp.browser.testing
    >>> browser = z3c.etestbrowser.testing.ExtendedTestBrowser()
    >>> browser.addHeader('Authorization', 'Basic user:userpw')
    >>> zeit.content.cp.browser.testing.create_cp(browser)
    >>> cp_url = browser.url

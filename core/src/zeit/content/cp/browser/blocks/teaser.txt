Teaser block
++++++++++++

Create a few test objects to play with:

>>> import zeit.content.cp.browser.blocks.testing
>>> zeit.content.cp.browser.blocks.testing.create_content(getRootFolder())

The teaser block contains a list of teasers. Let's first create a list of
teasers in the lead area:

>>> import zeit.cms.testing
>>> import zeit.content.cp.browser.testing
>>> browser = zeit.cms.testing.Browser(layer['wsgi_app'])
>>> browser.login('user', 'userpw')
>>> browser.xml_strict = True
>>> zeit.content.cp.browser.testing.create_cp(browser)
>>> browser.open('contents')
>>> contents_url = browser.url
>>> browser.open(
...  'body/lead/@@landing-zone-drop'
...  '?uniqueId=http://xml.zeit.de/testcontent&order=top')
>>> browser.open(contents_url)
>>> print(browser.contents)
<div ...
<div...class="...block type-teaser... id="id-<GUID>">
  <div class="block-inner">...
    <div class="teaser-contents action-content-droppable buttons"
         cms:drop-url="http://localhost/++skin++cms/workingcopy/zope.user/island/body/feature/lead/id-dde08c15-e09f-471f-8526-649672684a22/drop">
     ...
  <div class="teaser">...
    <div class="supertitle"></div>
    <div class="teaserTitle"></div>
    <div class="teaserText"></div>
    <span class="uniqueId">http://xml.zeit.de/testcontent</span>
  </div>
  ...

When a teaser is dragged on the teaser block, it replaces the current teaser:

>>> import lxml.cssselect
>>> browser.open(contents_url)
>>> select = lxml.cssselect.CSSSelector(
...     'div.type-teaser div[cms|drop-url]')
>>> nsmap = {'cms': 'http://namespaces.gocept.com/zeit-cms'}
>>> drop_url = browser.xpath(select.path, namespaces=nsmap)[0].get(
...     '{http://namespaces.gocept.com/zeit-cms}drop-url')
>>> import zeit.content.cp.centerpage
>>> zeit.content.cp.centerpage._test_helper_cp_changed = False
>>> url = '%s?uniqueId=http://xml.zeit.de/c1' % (drop_url,)
>>> browser.open(url)
>>> browser.open(contents_url)
>>> print(browser.contents)
<div ...
<div...class="...block type-teaser... id="id-<GUID>">
  <div class="block-inner">...
     ...<span class="position">1</span>...
    <div class="teaser-contents action-content-droppable buttons"
         cms:drop-url="http://localhost/++skin++cms/workingcopy/zope.user/island/body/feature/lead/id-dde08c15-e09f-471f-8526-649672684a22/drop">
         ...
  <div class="teaser">...
    <div class="supertitle"></div>
    <div class="teaserTitle">c1 teaser</div>
    <div class="teaserText"></div>
    <span class="uniqueId">http://xml.zeit.de/c1</span>
  </div>
  ...
>>> zeit.content.cp.centerpage._test_helper_cp_changed
True

Objects which are not adaptable to ICommonMetadata are also supported. That is
the CPE doesn't break, even when the object is removed from the repository
afterwards:

>>> url = '%s?uniqueId=http://xml.zeit.de/online/2007/01/Somalia' % (drop_url,)
>>> browser.open(url)
>>> browser.open(contents_url)



Layouts
+++++++

We create a new centerpage with a content type from the repository:

>>> zeit.content.cp.browser.testing.create_cp(browser, filename='foreign')
>>> browser.open('contents')
>>> contents_url = browser.url
>>> browser.open(
...     'body/lead/@@landing-zone-drop'
...     '?uniqueId=http://xml.zeit.de/testcontent'
...     '&order=top')

Then we need to create a test 'article' to be included in this CenterPage:

>>> browser.open('/repository/testcontent')
>>> browser.getLink('Checkout').click()
>>> browser.getControl('Teaser title').value = 'Foreign teaser'
>>> browser.getControl('Title').value = 'Auf den Spuren der Elfen'
>>> browser.getControl('Year').value = '2007'
>>> browser.getControl('Copyright (c)').value = 'DIE ZEIT'
>>> browser.getControl('Ressort').displayValue = ['Reisen']
>>> browser.getControl('Apply').click()
>>> browser.getLink('Checkin').click()
>>> 'Foreign teaser' in browser.contents
True

XXX work around https://github.com/zopefoundation/zope.testbrowser/issues/78
>>> def click_link(browser, text):
...    browser._response.body = browser._response.body.replace(b'<div ', b'<div xmlns:cms="http://namespaces.gocept.com/zeit-cms" ', 1)
...    browser.open(browser.xpath('//a[contains(., "%s")]/@href' % text)[0])


The layout can be selected at the edit box:

>>> zeit.content.cp.centerpage._test_helper_cp_changed = False
>>> browser.open(contents_url)
>>> browser.getLink('Edit block properties', index=0).click()
>>> click_link(browser, 'Großer Teaser mit Bild und Teaserliste')

It is marked in the edit box now:

>>> browser.open(contents_url)
>>> browser.getLink('Edit block properties', index=0).click()
>>> print(browser.contents)
<div...
<a...class="leader selected"...>...Großer Teaser mit Bild und Teaserliste...
>>> zeit.content.cp.centerpage._test_helper_cp_changed
True

Teasers often have an image which is displayed in the center page editor. The
shown image depends on the chosen layout. Create an image group and assign it
to the test-content:

>>> import zeit.cms.checkout.helper
>>> import zeit.cms.interfaces
>>> import zeit.cms.testing
>>> import zeit.content.image.interfaces
>>> import zeit.content.image.testing


>>> with zeit.cms.testing.site(getRootFolder()):
...     group = zeit.content.image.testing.create_image_group()
...     test_content = zeit.cms.interfaces.ICMSContent(
...         'http://xml.zeit.de/testcontent')
...     with zeit.cms.testing.interaction('zope.user'):
...         with zeit.cms.checkout.helper.checked_out(test_content) as co:
...             zeit.content.image.interfaces.IImages(co).image = group


The 450x200 image is used now:

>>> browser.open(contents_url)
>>> print(browser.contents)
<div ... class="teaser-contents action-content-droppable leader"...>
  <img...src="http://localhost/++skin++cms/repository/group/thumbnails/450x200/@@raw"...
  <div class="teaser-list">
    <div class="teaser">
      <div class="supertitle"></div>
      ...

When the image is not an image group, it will be just used:

>>> with zeit.cms.testing.site(getRootFolder()):
...     with zeit.cms.testing.interaction('zope.user'):
...         with zeit.cms.checkout.helper.checked_out(test_content) as co:
...             zeit.content.image.interfaces.IImages(co).image = (
...                 group['master-image.jpg'])
>>> browser.getLink('Edit block properties', index=0).click()
>>> click_link(browser, 'Großer Teaser')
>>> browser.open(contents_url)
>>> print(browser.contents)
<div ... class="teaser-contents action-content-droppable leader"...>
  <img...src="http://localhost/++skin++cms/repository/group/master-image.jpg/@@raw"...
  <div class="teaser-list">
    <div class="teaser">
      <div class="supertitle"></div>
      ...

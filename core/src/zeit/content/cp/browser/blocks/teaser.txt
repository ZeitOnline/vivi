Teaser block
++++++++++++

The teaser block contains a list of teasers. Let's first create a list of
teasers in the lead area[#fill-dav-with-content]_:

>>> import z3c.etestbrowser.testing
>>> import zeit.content.cp.browser.testing
>>> browser = z3c.etestbrowser.testing.ExtendedTestBrowser()
>>> browser.addHeader('Authorization', 'Basic user:userpw')
>>> browser.xml_strict = True
>>> zeit.content.cp.browser.testing.create_cp(browser)
>>> browser.open('contents')
>>> contents_url = browser.url
>>> browser.open(
...  'lead/@@landing-zone-drop?uniqueId=http://xml.zeit.de/testcontent')
>>> browser.open(contents_url)
>>> print browser.contents
<div ...
<div...class="block type-teaser... id="id-<GUID>">
  <div class="block-inner">...
    <div cms:drop-url="http://localhost/++skin++cms/workingcopy/zope.user/island/lead/id-dde08c15-e09f-471f-8526-649672684a22/drop"
     class="teaser-contents action-content-droppable leader">
     ...
  <div class="teaser">...
    <div class="supertitle"></div>
    <div class="teaserTitle"></div>
    <div class="teaserText"></div>
    <span class="uniqueId">http://xml.zeit.de/testcontent</span>
  </div>
  ...

When a teaser is dragged on the teaser block, it is added as the first teaser:

>>> import lxml.cssselect
>>> browser.open(contents_url)
>>> select = lxml.cssselect.CSSSelector(
...     'div.type-teaser div[cms|drop-url]')
>>> nsmap = {'cms': 'http://namespaces.gocept.com/zeit-cms'}
>>> drop_url = browser.etree.xpath(select.path, namespaces=nsmap)[0].get(
...     '{http://namespaces.gocept.com/zeit-cms}drop-url')
>>> import zeit.content.cp.centerpage
>>> zeit.content.cp.centerpage._test_helper_cp_changed = False
>>> url = '%s?uniqueId=http://xml.zeit.de/c1' % (drop_url,)
>>> browser.open(url)
>>> browser.open(contents_url)
>>> print browser.contents
<div ...
<div...class="block type-teaser... id="id-<GUID>">
  <div class="block-inner">...
     ...<span class="position">1</span>...
    <div cms:drop-url="http://localhost/++skin++cms/workingcopy/zope.user/island/lead/id-dde08c15-e09f-471f-8526-649672684a22/drop"
         class="teaser-contents action-content-droppable leader">
         ...
  <div class="teaser">...
    <div class="supertitle"></div>
    <div class="teaserTitle">c1 teaser</div>
    <div class="teaserText"></div>
    <span class="uniqueId">http://xml.zeit.de/c1</span>
  </div>
  <div class="teaser">...
    <div class="supertitle"></div>
    <div class="teaserTitle"></div>
    <div class="teaserText"></div>
    <span class="uniqueId">http://xml.zeit.de/testcontent</span>
  </div>
  ...
>>> zeit.content.cp.centerpage._test_helper_cp_changed
True

Objects which are not adaptable to ICommonMetadata are also supported. That is
the CPE doesn't break, even when the object is removed from the repository
afterwards:

>>> url = '%s?uniqueId=http://xml.zeit.de/online/2007/01/Somalia' % (drop_url,)
>>> browser.open(url)
>>> browser.open(contents_url)



Edit the teaser block
+++++++++++++++++++++

The teaser block can be edited:

>>> browser.getLink('Edit teaser list').click()
>>> lightbox_url = browser.url
>>> print browser.contents
<div class="lightbox-full teaser-list-edit-box">
  <ol id="teaser-list-edit-box-sorter"
      cms:url="http://localhost/++skin++cms/workingcopy/zope.user/island/lead/id-<GUID>">
    <li class="action-content-droppable...index=0...
    <li class="edit-bar teaser"
        cms:uniqueid="http://xml.zeit.de/online/2007/01/Somalia">
        ...
      <div title="http://xml.zeit.de/online/2007/01/Somalia">http://xml.zeit.de/online/2007/01/Somalia</div>
    </li>
    <li class="action-content-droppable...index=1...
    <li class="edit-bar teaser"
        cms:uniqueid="http://xml.zeit.de/c1">
        <a class="edit-link" title="Edit in place"
           ...
           href="http://localhost/++skin++cms/workingcopy/zope.user/island/lead/id-f36f26af-4b39-4101-b6c7-ba605610dc0d/++item++1/@@edit-teaser.html">
          <span class="action-title">Edit inline</span>
        </a>
        <a class="edit-object-link"
           title="Open in new window" target="_blank"
           href="http://localhost/++skin++cms/repository/c1/@@view.html">
          <span class="action-title">Open in new window</span>
        </a>
        <a class="delete-link" title="Delete"
          ...
           href="http://localhost/++skin++cms/workingcopy/zope.user/island/lead/id-f36f26af-4b39-4101-b6c7-ba605610dc0d/delete?uniqueId=http://xml.zeit.de/c1">
          <span class="action-title">Delete</span>
        </a>
        <div title="http://xml.zeit.de/c1">c1 teaser</div>
      </li>
      <li class="action-content-droppable...index=2...
      <li class="edit-bar teaser"
          cms:uniqueid="http://xml.zeit.de/testcontent">
          ...
        <div title="http://xml.zeit.de/testcontent"></div>
      </li>
    <li class="action-content-droppable...index=3...
  </ol>
  ...
</div>
...


Sorting
-------

Sorting works by passing the order of keys as a JSON encoded list to the
updateOrder view:

>>> import json
>>> zeit.content.cp.centerpage._test_helper_cp_changed = False
>>> order = ['http://xml.zeit.de/testcontent', 'http://xml.zeit.de/c1',
...          'http://xml.zeit.de/online/2007/01/Somalia']
>>> url = lightbox_url.replace('teaser.edit-contents', 'updateOrder')
>>> browser.open(url + '?keys=' + json.dumps(order))
>>> zeit.content.cp.centerpage._test_helper_cp_changed
True
>>> browser.open(lightbox_url)
>>> print browser.contents
<div...
    <li ... cms:uniqueid="http://xml.zeit.de/testcontent">
        ...
    <li ... cms:uniqueid="http://xml.zeit.de/c1">
        ...

Sort another time:

>>> order = ['http://xml.zeit.de/c1', 'http://xml.zeit.de/testcontent',
...          'http://xml.zeit.de/online/2007/01/Somalia']
>>> url = lightbox_url.replace('teaser.edit-contents', 'updateOrder')
>>> browser.open(url + '?keys=' + json.dumps(order))


Deleting entries
----------------

Delete the second entry:

>>> browser.open(lightbox_url)
>>> zeit.content.cp.centerpage._test_helper_cp_changed = False
>>> browser.getLink('Delete', index=1).click()
>>> zeit.content.cp.centerpage._test_helper_cp_changed
True
>>> browser.open(lightbox_url)
>>> print browser.contents
<div class="lightbox-full teaser-list-edit-box">
  <ol id="teaser-list-edit-box-sorter"
      cms:url="http://localhost/++skin++cms/workingcopy/zope.user/island/lead/id-<GUID>">
    <li class="action-content-droppable...
    <li class="edit-bar teaser" ...
        ...
      <div...>http://xml.zeit.de/online/2007/01/Somalia</div>
    </li>
    <li class="action-content-droppable...
  </ol>
...

The cp contents also has changed of course:

>>> browser.open(contents_url)
>>> print browser.contents
<div ...
<div...class="block type-teaser... id="id-<GUID>">
  <div class="block-inner">...
    <div cms:drop-url="http://localhost/++skin++cms/workingcopy/zope.user/island/lead/id-dde08c15-e09f-471f-8526-649672684a22/drop"
        class="teaser-contents action-content-droppable leader">
     ...
  <div class="teaser">...
    <div class="supertitle"></div>
    <div class="teaserTitle">c1 teaser</div>
    <div class="teaserText"></div>
    ...
  </div>
</div>
...


Layouts
+++++++

[#setup-layout-test-needs-real-content-type-with-image]_

The layout can be selected at the edit box:

>>> zeit.content.cp.centerpage._test_helper_cp_changed = False
>>> browser.open(contents_url)
>>> browser.getLink('Edit').click()
>>> browser.open('edit-properties')
>>> browser.getLink('Großer Teaser mit Bild und Teaserliste').click()

It is marked in the edit box now:

>>> browser.open(contents_url)
>>> browser.getLink('Edit').click()
>>> browser.open('edit-properties')
>>> print browser.contents
<div...
<a...class="leader selected"...>...Großer Teaser mit Bild und Teaserliste...
>>> zeit.content.cp.centerpage._test_helper_cp_changed
True

Teasers often have an image which is displayed in the center page editor. The
shown image depends on the chosen layout. Create an image group and assign it
to the test-content:

>>> dummy = with_statement
>>> import zeit.cms.checkout.helper
>>> import zeit.cms.interfaces
>>> import zeit.cms.testing
>>> import zeit.content.image.interfaces
>>> import zeit.content.image.testing


>>> with zeit.cms.testing.site(getRootFolder()):
...     group = zeit.content.image.testing.create_image_group()
...     test_content = zeit.cms.interfaces.ICMSContent(
...         'http://xml.zeit.de/testcontent')
...     with zeit.cms.testing.interaction('zope.user'):
...         with zeit.cms.checkout.helper.checked_out(test_content) as co:
...             zeit.content.image.interfaces.IImages(co).image = group


The 450x200 image is used now:

>>> browser.open(contents_url)
>>> print browser.contents
<div ...
       class="teaser-contents action-content-droppable leader">
  <img src="http://localhost/++skin++cms/repository/image-group/new-hampshire-450x200.jpg/@@raw" />
  <div class="teaser-list">
    <div class="teaser">
      <div class="supertitle"></div>
      ...

When we change the layout to "Kleiner Teaser" the image will not be used any
more:

>>> browser.getLink('Edit').click()
>>> browser.open('edit-properties')
>>> browser.getLink('Kleiner Teaser').click()
>>> browser.open(contents_url)
>>> print browser.contents
<div ...
       class="teaser-contents action-content-droppable buttons">
  <div class="teaser-list">
    <div class="teaser">
      <div class="supertitle"></div>
      ...


When the image is not an image group, it will be just used:

>>> with zeit.cms.testing.site(getRootFolder()):
...     with zeit.cms.testing.interaction('zope.user'):
...         with zeit.cms.checkout.helper.checked_out(test_content) as co:
...             zeit.content.image.interfaces.IImages(co).image = (
...                 group['obama-clinton-120x120.jpg'])
>>> browser.getLink('Edit').click()
>>> browser.open('edit-properties')
>>> browser.getLink('Großer Teaser').click()
>>> browser.open(contents_url)
>>> print browser.contents
<div ...
       class="teaser-contents action-content-droppable leader">
  <img src="http://localhost/++skin++cms/repository/image-group/obama-clinton-120x120.jpg/@@raw" />
  <div class="teaser-list">
    <div class="teaser">
      <div class="supertitle"></div>
      ...


Available layout
~~~~~~~~~~~~~~~~

The avaliable layouts are different for the position of the teaser block in the
lead area. The first teaser block has all layouts avaliable for selection,
all others only the one with the small image.

We need to add a second teaser block:

>>> browser.open(contents_url)
>>> browser.open(
...  'lead/@@landing-zone-drop?uniqueId=http://xml.zeit.de/testcontent')
>>> browser.open(contents_url)

>>> browser.getLink('Edit').click()
>>> browser.open('edit-properties')
>>> browser.getLink('Großer Teaser mit zwei Spalten')
<Link...>
>>> browser.getLink('Kleiner Teaser mit kleinem Bild und Teaserliste')
<Link...>

>>> browser.open(contents_url)
>>> browser.getLink('Edit', index=2).click()
>>> browser.open('edit-properties')
>>> browser.getLink('Kleiner Teaser mit kleinem Bild und Teaserliste')
<Link...>
>>> browser.getLink('Großer Teaser mit zwei Spalten')
Traceback (most recent call last):
  ...
LinkNotFoundError



.. [#fill-dav-with-content] Create a few test objects to play with:

    >>> import zeit.content.cp.browser.blocks.testing
    >>> zeit.content.cp.browser.blocks.testing.create_content(getRootFolder())

.. [#setup-layout-test-needs-real-content-type-with-image]:

    We create a new centerpage with a content type from the repository:

    >>> zeit.content.cp.browser.testing.create_cp(browser, filename='foreign')
    >>> browser.open('contents')
    >>> contents_url = browser.url
    >>> browser.open(
    ...     'lead/@@landing-zone-drop?uniqueId=http://xml.zeit.de/testcontent')

    Then we need to create a test 'article' to be included in this CenterPage:

    >>> browser.open('/++skin++cms/repository/testcontent')
    >>> browser.getLink('Checkout').click()
    >>> browser.getControl('Teaser title').value = u'Foreign teaser'
    >>> browser.getControl('Title').value = 'Auf den Spuren der Elfen'
    >>> browser.getControl('Year').value = '2007'
    >>> browser.getControl('Copyright (c)').value = 'ZEIT ONLINE'
    >>> browser.getControl('Ressort').displayValue = ['Reisen']
    >>> browser.getControl(name='form.authors.0.').value = 'Hans Sachs'
    >>> browser.getControl('Apply').click()
    >>> browser.getLink('Checkin').click()
    >>> 'Foreign teaser' in browser.contents
    True

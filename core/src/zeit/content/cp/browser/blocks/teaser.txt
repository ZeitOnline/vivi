Teaser block
++++++++++++

The teaser block contains a list of teasers. Let's first create a list of teasers
in the lead area:

>>> import z3c.etestbrowser.testing
>>> import zeit.content.cp.browser.tests
>>> browser = z3c.etestbrowser.testing.ExtendedTestBrowser()
>>> browser.addHeader('Authorization', 'Basic user:userpw')
>>> browser.xml_strict = True
>>> zeit.content.cp.browser.tests.create_cp(browser)
>>> browser.open('contents')
>>> contents_url = browser.url
>>> browser.getLink('Add block', index=0).click()
>>> browser.open(contents_url)
>>> browser.getLink('choose the block type').click()
>>> browser.getLink('List of teasers').click()

Set a title (although it's unclear if we really need this):

>>> browser.open(contents_url)
>>> browser.getLink('Edit').click()
>>> browser.getControl('Title').value = 'Foo'
>>> browser.getControl('Apply').click()

When a teaser is dragged on the teaser block, it is added as the first teaser.
Drag the first one[#fill-dav-with-content]_:

>>> import lxml.cssselect
>>> browser.open(contents_url)
>>> select = lxml.cssselect.CSSSelector(
...     'div.type-teaser div[cms|drop-url]')
>>> nsmap = {'cms': 'http://namespaces.gocept.com/zeit-cms'}
>>> drop_url = browser.etree.xpath(select.path, namespaces=nsmap)[0].get(
...     '{http://namespaces.gocept.com/zeit-cms}drop-url')
>>> url = '%s?uniqueId=http://xml.zeit.de/testcontent' % (drop_url,)
>>> import zeit.content.cp.centerpage
>>> zeit.content.cp.centerpage._test_helper_cp_changed = False
>>> browser.open(url)
>>> browser.open(contents_url)
>>> print browser.contents
<div ...
<div...class="block type-teaser... id="<GUID>">
  <div class="block-inner">
    <div cms:drop-url="http://localhost/++skin++cms/workingcopy/zope.user/island/lead/dde08c15-e09f-471f-8526-649672684a22/drop"
     class="action-content-droppable leader">
     ...
  <div class="teaser">...
    <div class="supertitle"></div>
    <div class="teaserTitle"></div>
    <div class="teaserText"></div>
    <div class="shortTeaserTitle"></div>
    <div class="shortTeaserText"></div>
  </div>
  ...

Make sure the data is stored on the centerpage:

>>> zeit.content.cp.centerpage._test_helper_cp_changed
True


Drag c1 onto the list, it becomes the first entry:

>>> url = '%s?uniqueId=http://xml.zeit.de/c1' % (drop_url,)
>>> browser.open(url)
>>> browser.open(contents_url)
>>> print browser.contents
<div ...
<div...class="block type-teaser... id="<GUID>">
  <div class="block-inner">
    <div cms:drop-url="http://localhost/++skin++cms/workingcopy/zope.user/island/lead/dde08c15-e09f-471f-8526-649672684a22/drop"
         class="action-content-droppable leader">
     ...
  <div class="teaser">...
    <div class="supertitle"></div>
    <div class="teaserTitle">c1 teaser</div>
    <div class="teaserText"></div>
    <div class="shortTeaserTitle">c1 teaser</div>
    <div class="shortTeaserText"></div>
  </div>
  <div class="teaser">...
    <div class="supertitle"></div>
    <div class="teaserTitle"></div>
    <div class="teaserText"></div>
    <div class="shortTeaserTitle"></div>
    <div class="shortTeaserText"></div>
  </div>
  ...


Edit the teaser block
+++++++++++++++++++++

The teaser block can be edited:

>>> browser.getLink('Edit teaser list').click()
>>> lightbox_url = browser.url
>>> print browser.contents
<h1>Foo</h1>
<div class="lightbox-full teaser-list-edit-box">
  <ol id="teaser-list-edit-box-sorter"
      cms:url="http://localhost/++skin++cms/workingcopy/zope.user/island/lead/<GUID>">
    <li class="edit-bar even"
        cms:uniqueid="http://xml.zeit.de/c1">
      <a class="edit-link"
         ...
         href="http://localhost/++skin++cms/workingcopy/zope.user/island/lead/f36f26af-4b39-4101-b6c7-ba605610dc0d/checkout-content?uniqueId=http://xml.zeit.de/c1">
        <span class="action-title">Edit</span>
      </a>
      <a class="delete-link" title="Delete"
        ...
         href="http://localhost/++skin++cms/workingcopy/zope.user/island/lead/f36f26af-4b39-4101-b6c7-ba605610dc0d/delete?uniqueId=http://xml.zeit.de/c1">
        <span class="action-title">Delete</span>
      </a>
      <div>c1 teaser</div>
    </li>
    <li class="edit-bar odd"
        cms:uniqueid="http://xml.zeit.de/testcontent">
      <a class="edit-link"
         ...
         href="http://localhost/++skin++cms/workingcopy/zope.user/island/lead/f36f26af-4b39-4101-b6c7-ba605610dc0d/checkout-content?uniqueId=http://xml.zeit.de/testcontent">
        <span class="action-title">Edit</span>
      </a>
      <a class="delete-link" title="Delete"
        ...
         href="http://localhost/++skin++cms/workingcopy/zope.user/island/lead/f36f26af-4b39-4101-b6c7-ba605610dc0d/delete?uniqueId=http://xml.zeit.de/testcontent">
        <span class="action-title">Delete</span>
      </a>
      <div></div>
    </li>
  </ol>
</div>
...


Sorting
-------

Sorting works by passing the order of keys as a JSON encoded list to the
updateOrder view:

>>> import cjson
>>> zeit.content.cp.centerpage._test_helper_cp_changed = False
>>> order = ['http://xml.zeit.de/testcontent', 'http://xml.zeit.de/c1']
>>> url = lightbox_url.replace('teaser.edit-contents', 'updateOrder')
>>> browser.open(url + '?keys=' + cjson.encode(order))
>>> zeit.content.cp.centerpage._test_helper_cp_changed
True
>>> browser.open(lightbox_url)
>>> print browser.contents
<h1>...
    <li ... cms:uniqueid="http://xml.zeit.de/testcontent">
        ...
    <li ... cms:uniqueid="http://xml.zeit.de/c1">
        ...

Restore the original order:

>>> order = ['http://xml.zeit.de/c1', 'http://xml.zeit.de/testcontent']
>>> url = lightbox_url.replace('teaser.edit-contents', 'updateOrder')
>>> browser.open(url + '?keys=' + cjson.encode(order))


Editing teasers
---------------

Editing teasers in the CP editor is a rather complex task.

* The lighbox opens another lightbox which contains the edit form.

* For being editable a content objects needs to be checked out. So the first
  request the lightbox does is actually only checking out the content object
  and redirects to the real edit form.

>>> browser.open(lightbox_url)
>>> browser.getLink('Edit').click()
>>> edit_url = browser.url
>>> browser.getControl('Teaser title').value = 'Test content teaser title'
>>> browser.getControl('Teaser text').value = 'Test content teaser text'
>>> browser.getControl('Apply for article').click()

# XXX make sure the widgets are the "counting" ones.


On successful save, the object is checked in automatically. The lightbox is
instructed to close itself:

>>> print browser.contents
<div...
<script language="javascript">
    self.clean = true;
    self.close();
</script>
...
>>> browser.open(edit_url)
Traceback (most recent call last):
    ...
HTTPError: HTTP Error 404: Not Found

The teasers of testcontent have been changed in the repository:

>>> browser.open('http://localhost/++skin++cms/repository/c1')
>>> print browser.contents
<?xml ...
 <span>Teaser title</span>
 ...
 <div class="widget">Test content teaser title</div>
 ...

When an object could not be checked out, the edit link is replaced by a lock:

>>> browser.open(lightbox_url)
>>> browser.getLink('Edit').click()
>>> browser.open(lightbox_url)
>>> print browser.contents
<h1>...
    <li class="edit-bar even" cms:uniqueid="http://xml.zeit.de/c1">
        <span class="locked-indicator"><img src="...


When the lightbox is closed the checked out object will be deleted. This is
completely hooked up in javascript and cannot be tested here.


Editing teasers locally
+++++++++++++++++++++++

Instead if editing the original article it is also possible to create a local
copy and edit that.

>>> browser.open(lightbox_url)
>>> browser.getLink('Edit').click()
>>> browser.getControl('Teaser title').value = 'Local teaser title'
>>> browser.getControl('Teaser text').value = 'Local teaser text'

To create the local copy, press the `Apply only for this page` button:

>>> zeit.content.cp.centerpage._test_helper_cp_changed = False
>>> browser.getControl('Apply only for this page').click()
>>> zeit.content.cp.centerpage._test_helper_cp_changed
True

The original article is unchanged:

>>> browser.open('http://localhost/++skin++cms/repository/c1')
>>> print browser.contents
<?xml ...
 <span>Teaser title</span>
 ...
 <div class="widget">Test content teaser title</div>
 ...

The teaser block now contains the local copy instead of the original article:

>>> browser.open(lightbox_url)
>>> print browser.contents
<...<div>Local teaser title</div>...

We can now only edit the local copy:

>>> browser.getLink('Edit').click()
>>> browser.getControl('Teaser title').value
'Local teaser title'
>>> browser.getControl('Teaser text').value
'Local teaser text'
>>> browser.getControl('Teaser title').value = 'Very local teaser title'
>>> browser.getControl('Apply only for this page')
Traceback (most recent call last):
LookupError: label 'Apply only for this page'
>>> browser.getControl('Apply for article').click()

The original article is still unchanged:

>>> browser.open('http://localhost/++skin++cms/repository/c1')
>>> print browser.contents
<?xml ...
 <span>Teaser title</span>
 ...
 <div class="widget">Test content teaser title</div>
 ...

Again, the teaser block has been updated:
>>> browser.open(lightbox_url)
>>> print browser.contents
<...<div>Very local teaser title</div>...


Deleting entries
----------------

Delete the second entry:

>>> browser.open(lightbox_url)
>>> zeit.content.cp.centerpage._test_helper_cp_changed = False
>>> browser.getLink('Delete', index=1).click()
>>> zeit.content.cp.centerpage._test_helper_cp_changed
True
>>> browser.open(lightbox_url)
>>> print browser.contents
<h1>Foo</h1>
<div class="lightbox-full teaser-list-edit-box">
  <ol id="teaser-list-edit-box-sorter"
      cms:url="http://localhost/++skin++cms/workingcopy/zope.user/island/lead/<GUID>">
    <li class="edit-bar even" ...
        ...
      <div>Test content teaser title</div>
    </li>
  </ol>
</div>
...

The cp contents also has changed of course:

>>> browser.open(contents_url)
>>> print browser.contents
<div ...
<div...class="block type-teaser... id="<GUID>">
  <div class="block-inner">
    <div cms:drop-url="http://localhost/++skin++cms/workingcopy/zope.user/island/lead/dde08c15-e09f-471f-8526-649672684a22/drop"
        class="action-content-droppable leader">
     ...
  <div class="teaser">...
    <div class="supertitle"></div>
    <div class="teaserTitle">Test content teaser title</div>
    <div class="teaserText">Test content teaser text</div>
    <div class="shortTeaserTitle">c1 teaser</div>
    <div class="shortTeaserText"></div>
  </div>
</div>
...



.. [#fill-dav-with-content] Create a few test objects to play with:

    >>> import zope.app.component.hooks
    >>> old_site = zope.app.component.hooks.getSite()
    >>> zope.app.component.hooks.setSite(getRootFolder())
    >>> import zope.component
    >>> from zeit.cms.repository.interfaces import IRepository
    >>> repository = zope.component.getUtility(IRepository)

    >>> import zeit.cms.testcontenttype.testcontenttype
    >>> c1 = zeit.cms.testcontenttype.testcontenttype.TestContentType()
    >>> c1.teaserTitle = c1.shortTeaserTitle = u'c1 teaser'
    >>> repository['c1'] = c1
    >>> c2 = zeit.cms.testcontenttype.testcontenttype.TestContentType()
    >>> c2.teaserTitle = c2.shortTeaserTitle = u'c2 teaser'
    >>> repository['c2'] = c2
    >>> c3 = zeit.cms.testcontenttype.testcontenttype.TestContentType()
    >>> c3.teaserTitle = c3.shortTeaserTitle = u'c3 teaser'
    >>> repository['c3'] = c3

    >>> zope.app.component.hooks.setSite(old_site)

Autopilot
+++++++++

A teaser block can be set on 'autopilot'. In this mode, it will retrieve teasers
from another CenterPage for display. To demonstrate this, we first create
another CenterPage:

>>> browser.handleErrors = False
>>> zeit.content.cp.browser.tests.create_cp(browser, filename='foreign')
>>> browser.open('contents')
>>> foreign_url = browser.url
>>> browser.getLink('Add block').click()
>>> browser.open(foreign_url)
>>> browser.getLink('choose the block type').click()
>>> browser.getLink('List of teasers').click()
>>> browser.open('http://localhost/++skin++cms/workingcopy/zope.user/foreign/')

Then we need to create a test 'article' to be included in this CenterPage:

>>> browser.open('http://localhost/++skin++cms/repository/testcontent/@@checkout')
>>> browser.open('http://localhost/++skin++cms/workingcopy/zope.user/testcontent/@@edit.html')
>>> browser.getControl('Teaser title').value = u'Foreign teaser'
>>> browser.getControl('Title').value = 'Auf den Spuren der Elfen'
>>> browser.getControl('Year').value = '2007'
>>> browser.getControl('Copyright (c)').value = 'ZEIT ONLINE'
>>> browser.getControl('Ressort').displayValue = ['Reisen']
>>> browser.getControl(name='form.authors.0.').value = 'Hans Sachs'
>>> browser.getControl('Apply').click()
>>> browser.open('http://localhost/++skin++cms/workingcopy/zope.user/testcontent/@@checkin')
>>> browser.open('http://localhost/++skin++cms/repository/testcontent/@@view.html')
>>> 'Foreign teaser' in browser.contents
True

XXX Since manual editing of teaser blocks is not implemented yet (#4805), we
inject the test article by writing raw XML:

>>> browser.open('http://localhost/++skin++cms/workingcopy/zope.user/foreign')
>>> browser.getLink('Source').click()
>>> xml = browser.getControl('XML Source').value
>>> import re
>>> xml = re.sub('<container (cp:type="teaser"[^>]*)/>',
... """<container \\1>
... <block href="http://xml.zeit.de/testcontent">
...   <teaser xmlns="http://xml.zeit.de/CMS/Teaser">
...     <title/>
...     <text/>
...   </teaser>
... </block>
... </container>
... """, xml)
>>> browser.getControl('XML Source').value = xml
>>> browser.getControl('Apply').click()
>>> 'testcontent' in browser.contents
True

We need to check in the CenterPage we want to reference to actually see the
teasers (of course):

>>> browser.open('http://localhost/++skin++cms/workingcopy/zope.user/foreign/@@checkin')


Currently the autopilot is not possible, because we have not referenced the
other cp:

>>> browser.open(contents_url)
>>> 'autopilot-not-possible' in browser.contents
True

It is not possible to switch on the autopilot when there is no centerpage
referenced:

>>> browser.open(contents_url)
>>> browser.getLink('Edit').click()
>>> browser.getControl('On Autopilot').selected = True
>>> browser.getControl('Apply').click()
>>> print browser.contents
<...Cannot activate autopilot without referenced centerpage...

Now we can switch our teaser block to autopilot when referencing the
centerpage:

>>> browser.getControl('Fetch teasers from').value = 'http://xml.zeit.de/online/2007/01/foreign'
>>> browser.getControl('Apply').click()
>>> print browser.contents
<...Updated on...

The teaser block displays a marker to show that it is on autopilot. It then
pulls in the first teaser of each teaser block from the referenced CenterPage's
lead region:

>>> browser.open(contents_url)
>>> 'autopilot-on' in browser.contents
True
>>> 'Foreign teaser' in browser.contents
True

We can now switch it of again:

>>> browser.getLink('Switch autopilot').click()
>>> browser.open(contents_url)
>>> 'autopilot-off' in browser.contents
True


When the autopilot is on and content is dropped on the block, the autopilot is
automatically switched off:

>>> zeit.content.cp.centerpage._test_helper_cp_changed = False
>>> browser.getLink('Switch autopilot').click()
>>> browser.open(contents_url)
>>> zeit.content.cp.centerpage._test_helper_cp_changed
True
>>> 'autopilot-on' in browser.contents
True
>>> url = '%s?uniqueId=http://xml.zeit.de/testcontent' % (drop_url,)
>>> zeit.content.cp.centerpage._test_helper_cp_changed = False
>>> browser.open(url)
>>> zeit.content.cp.centerpage._test_helper_cp_changed
True
>>> browser.open(contents_url)
>>> 'autopilot-on' in browser.contents
False
>>> 'autopilot-off' in browser.contents
True


Layouts
+++++++

The layout can be selected at the edit box:

>>> zeit.content.cp.centerpage._test_helper_cp_changed = False
>>> browser.open(contents_url)
>>> browser.getLink('Edit').click()
>>> browser.getLink('Großer Teaser mit Bild und Teaserliste').click()

It is marked in the edit box now:

>>> browser.open(contents_url)
>>> browser.getLink('Edit').click()
>>> print browser.contents
<div...
<a...class="leader selected"...>...Großer Teaser mit Bild und Teaserliste...
>>> zeit.content.cp.centerpage._test_helper_cp_changed
True

Teasers often have an image which is displayed in the center page editor. The
shown image depends on the chosen layout. Create an image group and assign it
to the test-content:

>>> dummy = with_statement
>>> import zeit.cms.checkout.helper
>>> import zeit.cms.interfaces
>>> import zeit.content.cp.browser.tests
>>> import zeit.content.image.interfaces
>>> import zeit.content.image.test

>>> with zeit.content.cp.browser.tests.site(getRootFolder()):
...     group = zeit.content.image.test.create_image_group()
...     test_content = zeit.cms.interfaces.ICMSContent(
...         'http://xml.zeit.de/testcontent')
...     with zeit.content.cp.browser.tests.interaction('zope.user'):
...         with zeit.cms.checkout.helper.checked_out(test_content) as co:
...             zeit.content.image.interfaces.IImages(co).images = (group,)


The 450x200 image is used now:

>>> browser.open(contents_url)
>>> print browser.contents
<div ...
       class="action-content-droppable leader">
       ...
  <div class="teaser-list">
    <div class="teaser">
      <img src="http://localhost/++skin++cms/repository/image-group/new-hampshire-450x200.jpg" />
      <div class="supertitle"></div>
      ...


When we change the layout to xxx the image will not be used any more:

>>> browser.getLink('Edit').click()
>>> browser.getLink('Kleiner Teaser').click()
>>> browser.open(contents_url)
>>> print browser.contents
<div ...
       class="action-content-droppable buttons">
       ...
  <div class="teaser-list">
    <div class="teaser">
      <div class="supertitle"></div>
      ...

Available layout
~~~~~~~~~~~~~~~~

The avaliable layouts are different for the position of the teaser block in the
leasers list. The first teaser block has all layouts avaliable for selection,
all others only the one with the small image.

We need to add a second teaser block:

>>> browser.open(contents_url)
>>> browser.getLink('Add block').click()
>>> browser.open(contents_url)
>>> browser.getLink('choose the block type').click()
>>> browser.getLink('List of teasers').click()
>>> browser.open(contents_url)

>>> browser.getLink('Edit').click()
>>> browser.getLink('Großer Teaser mit Bild und Teaserliste')
<Link text='[IMG] Gro\xc3\x9fer Teaser mit Bild und Teaserliste' ...>
>>> browser.getLink('Kleiner Teaser mit kleinem Bild und Teaserliste')
<Link text='[IMG] Kleiner Teaser mit kleinem Bild und Teaserliste' ...>

>>> browser.open(contents_url)
>>> browser.getLink('Edit', index=2).click()
>>> browser.getLink('Kleiner Teaser mit kleinem Bild und Teaserliste')
<Link text='[IMG] Kleiner Teaser mit kleinem Bild und Teaserliste' ...>
>>> browser.getLink('Großer Teaser mit Bild und Teaserliste')
Traceback (most recent call last):
  ...
LinkNotFoundError

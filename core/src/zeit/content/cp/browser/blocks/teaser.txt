Teaser block
++++++++++++

The teaser block contains a list of teasers. Let's first create a list of
teasers in the lead area[#fill-dav-with-content]_:

>>> import z3c.etestbrowser.testing
>>> import zeit.content.cp.browser.tests
>>> browser = z3c.etestbrowser.testing.ExtendedTestBrowser()
>>> browser.addHeader('Authorization', 'Basic user:userpw')
>>> browser.xml_strict = True
>>> zeit.content.cp.browser.tests.create_cp(browser)
>>> browser.open('contents')
>>> contents_url = browser.url
>>> browser.open(
...  'lead/@@landing-zone-drop?uniqueId=http://xml.zeit.de/testcontent')
>>> browser.open(contents_url)
>>> print browser.contents
<div ...
<div...class="block type-teaser... id="<GUID>">
  <div class="block-inner">...
    <div cms:drop-url="http://localhost/++skin++cms/workingcopy/zope.user/island/lead/dde08c15-e09f-471f-8526-649672684a22/drop"
     class="teaser-contents action-content-droppable leader">
     ...
  <div class="teaser">...
    <div class="supertitle"></div>
    <div class="teaserTitle"></div>
    <div class="teaserText"></div>
  </div>
  ...

When a teaser is dragged on the teaser block, it is added as the first teaser:

>>> import lxml.cssselect
>>> browser.open(contents_url)
>>> select = lxml.cssselect.CSSSelector(
...     'div.type-teaser div[cms|drop-url]')
>>> nsmap = {'cms': 'http://namespaces.gocept.com/zeit-cms'}
>>> drop_url = browser.etree.xpath(select.path, namespaces=nsmap)[0].get(
...     '{http://namespaces.gocept.com/zeit-cms}drop-url')
>>> import zeit.content.cp.centerpage
>>> zeit.content.cp.centerpage._test_helper_cp_changed = False
>>> url = '%s?uniqueId=http://xml.zeit.de/c1' % (drop_url,)
>>> browser.open(url)
>>> browser.open(contents_url)
>>> print browser.contents
<div ...
<div...class="block type-teaser... id="<GUID>">
  <div class="block-inner">...
    <div cms:drop-url="http://localhost/++skin++cms/workingcopy/zope.user/island/lead/dde08c15-e09f-471f-8526-649672684a22/drop"
         class="teaser-contents action-content-droppable leader">
     ...
  <div class="teaser">...
    <div class="supertitle"></div>
    <div class="teaserTitle">c1 teaser</div>
    <div class="teaserText"></div>
  </div>
  <div class="teaser">...
    <div class="supertitle"></div>
    <div class="teaserTitle"></div>
    <div class="teaserText"></div>
  </div>
  ...
>>> zeit.content.cp.centerpage._test_helper_cp_changed
True

Objects which are not adaptable to ICommonMetadata are also supported. That is
the CPE doesn't break, even when the object is removed from the repository
afterwards:

>>> url = '%s?uniqueId=http://xml.zeit.de/online/2007/01/Somalia' % (drop_url,)
>>> browser.open(url)
>>> browser.open(contents_url)



Edit the teaser block
+++++++++++++++++++++

The teaser block can be edited:

>>> browser.getLink('Edit teaser list').click()
>>> lightbox_url = browser.url
>>> print browser.contents
<div class="lightbox-full teaser-list-edit-box">
  <ol id="teaser-list-edit-box-sorter"
      cms:url="http://localhost/++skin++cms/workingcopy/zope.user/island/lead/<GUID>">
    <li class="action-content-droppable...index=0...
    <li class="edit-bar teaser"
        cms:uniqueid="http://xml.zeit.de/online/2007/01/Somalia">
        ...
      <div title="http://xml.zeit.de/online/2007/01/Somalia">http://xml.zeit.de/online/2007/01/Somalia</div>
    </li>
    <li class="action-content-droppable...index=1...
    <li class="edit-bar teaser"
        cms:uniqueid="http://xml.zeit.de/c1">
        <a class="edit-link" title="Edit in place"
           ...
           href="http://localhost/++skin++cms/workingcopy/zope.user/island/lead/f36f26af-4b39-4101-b6c7-ba605610dc0d/checkout-content?uniqueId=http://xml.zeit.de/c1">
          <span class="action-title">Edit inline</span>
        </a>
        <a class="edit-object-link"
           title="Edit in new window" target="_blank"
           href="http://localhost/++skin++cms/repository/c1/@@view.html">
          <span class="action-title">Edit object</span>
        </a>
        <a class="delete-link" title="Delete"
          ...
           href="http://localhost/++skin++cms/workingcopy/zope.user/island/lead/f36f26af-4b39-4101-b6c7-ba605610dc0d/delete?uniqueId=http://xml.zeit.de/c1">
          <span class="action-title">Delete</span>
        </a>
        <div title="http://xml.zeit.de/c1">c1 teaser</div>
      </li>
      <li class="action-content-droppable...index=2...
      <li class="edit-bar teaser"
          cms:uniqueid="http://xml.zeit.de/testcontent">
          ...
        <div title="http://xml.zeit.de/testcontent"></div>
      </li>
    <li class="action-content-droppable...index=3...
  </ol>
</div>
...


Sorting
-------

Sorting works by passing the order of keys as a JSON encoded list to the
updateOrder view:

>>> import cjson
>>> zeit.content.cp.centerpage._test_helper_cp_changed = False
>>> order = ['http://xml.zeit.de/testcontent', 'http://xml.zeit.de/c1',
...          'http://xml.zeit.de/online/2007/01/Somalia']
>>> url = lightbox_url.replace('teaser.edit-contents', 'updateOrder')
>>> browser.open(url + '?keys=' + cjson.encode(order))
>>> zeit.content.cp.centerpage._test_helper_cp_changed
True
>>> browser.open(lightbox_url)
>>> print browser.contents
<div...
    <li ... cms:uniqueid="http://xml.zeit.de/testcontent">
        ...
    <li ... cms:uniqueid="http://xml.zeit.de/c1">
        ...

Sort another time:

>>> order = ['http://xml.zeit.de/c1', 'http://xml.zeit.de/testcontent',
...          'http://xml.zeit.de/online/2007/01/Somalia']
>>> url = lightbox_url.replace('teaser.edit-contents', 'updateOrder')
>>> browser.open(url + '?keys=' + cjson.encode(order))


Editing teasers
---------------

Editing teasers in the CP editor is a rather complex task.

* The lighbox opens another lightbox which contains the edit form.

* For being editable a content objects needs to be checked out. So the first
  request the lightbox does is actually only checking out the content object
  and redirects to the real edit form.

>>> browser.open(lightbox_url)
>>> browser.getLink('Edit').click()
>>> edit_url = browser.url
>>> browser.getControl('Teaser title').value = 'Test content teaser title'
>>> browser.getControl('Teaser text').value = 'Test content teaser text'
>>> browser.getControl('Apply for article').click()

# XXX make sure the widgets are the "counting" ones.


On successful save, the object is checked in automatically. The lightbox is
instructed to close itself:

>>> print browser.contents
<div...
<script language="javascript">
    self.clean = true;
    self.close();
</script>
...
>>> browser.open(edit_url)
Traceback (most recent call last):
    ...
HTTPError: HTTP Error 404: Not Found

The teasers of testcontent have been changed in the repository:

>>> browser.open('http://localhost/++skin++cms/repository/c1')
>>> print browser.contents
<?xml ...
 <span>Teaser title</span>
 ...
 <div class="widget">Test content teaser title</div>
 ...

When an object could not be checked out, the edit link is replaced by a lock:

>>> browser.open(lightbox_url)
>>> browser.getLink('Edit').click()
>>> browser.open(lightbox_url)
>>> print browser.contents
<...
    <li class="edit-bar teaser" cms:uniqueid="http://xml.zeit.de/c1">
        <span class="locked-indicator"><img src="...


When the lightbox is closed the checked out object will be deleted. This is
completely hooked up in javascript and cannot be tested here.


Editing teasers locally
+++++++++++++++++++++++

Instead if editing the original article it is also possible to create a local
copy and edit that.

>>> browser.open(lightbox_url)
>>> browser.getLink('Edit').click()
>>> browser.getControl('Teaser title').value = 'Local teaser title'
>>> browser.getControl('Teaser text').value = 'Local teaser text'

To create the local copy, press the `Apply only for this page` button:

>>> zeit.content.cp.centerpage._test_helper_cp_changed = False
>>> browser.getControl('Apply only for this page').click()
>>> zeit.content.cp.centerpage._test_helper_cp_changed
True

The original article is unchanged:

>>> browser.open('http://localhost/++skin++cms/repository/c1')
>>> print browser.contents
<?xml ...
 <span>Teaser title</span>
 ...
 <div class="widget">Test content teaser title</div>
 ...

The teaser block now contains the local copy instead of the original article:

>>> browser.open(lightbox_url)
>>> print browser.contents
<...<div...>Local teaser title</div>...

We can now only edit the local copy:

>>> browser.getLink('Edit').click()
>>> browser.getControl('Teaser title').value
'Local teaser title'
>>> browser.getControl('Teaser text').value
'Local teaser text'
>>> browser.getControl('Teaser title').value = 'Very local teaser title'
>>> browser.getControl('Apply for article')
Traceback (most recent call last):
    ...
LookupError: label 'Apply for article'
>>> browser.getControl('Apply only for this page').click()

The original article is still unchanged:

>>> browser.open('http://localhost/++skin++cms/repository/c1')
>>> print browser.contents
<?xml ...
 <span>Teaser title</span>
 ...
 <div class="widget">Test content teaser title</div>
 ...

Again, the teaser block has been updated:
>>> browser.open(lightbox_url)
>>> print browser.contents
<...<div...>Very local teaser title</div>...


Deleting entries
----------------

Delete the second entry:

>>> browser.open(lightbox_url)
>>> zeit.content.cp.centerpage._test_helper_cp_changed = False
>>> browser.getLink('Delete', index=1).click()
>>> zeit.content.cp.centerpage._test_helper_cp_changed
True
>>> browser.open(lightbox_url)
>>> print browser.contents
<div class="lightbox-full teaser-list-edit-box">
  <ol id="teaser-list-edit-box-sorter"
      cms:url="http://localhost/++skin++cms/workingcopy/zope.user/island/lead/<GUID>">
    <li class="action-content-droppable...
    <li class="edit-bar teaser" ...
        ...
      <div...>Test content teaser title</div>
    </li>
    <li class="action-content-droppable...
  </ol>
</div>
...

The cp contents also has changed of course:

>>> browser.open(contents_url)
>>> print browser.contents
<div ...
<div...class="block type-teaser... id="<GUID>">
  <div class="block-inner">...
    <div cms:drop-url="http://localhost/++skin++cms/workingcopy/zope.user/island/lead/dde08c15-e09f-471f-8526-649672684a22/drop"
        class="teaser-contents action-content-droppable leader">
     ...
  <div class="teaser">...
    <div class="supertitle"></div>
    <div class="teaserTitle">Test content teaser title</div>
    <div class="teaserText">Test content teaser text</div>
  </div>
</div>
...


Layouts
+++++++

[#setup-layout-test-needs-real-content-type-with-image]_

The layout can be selected at the edit box:

>>> zeit.content.cp.centerpage._test_helper_cp_changed = False
>>> browser.open(contents_url)
>>> browser.getLink('Edit').click()
>>> browser.open('edit-properties')
>>> browser.getLink('Großer Teaser mit Bild und Teaserliste').click()

It is marked in the edit box now:

>>> browser.open(contents_url)
>>> browser.getLink('Edit').click()
>>> browser.open('edit-properties')
>>> print browser.contents
<div...
<a...class="leader selected"...>...Großer Teaser mit Bild und Teaserliste...
>>> zeit.content.cp.centerpage._test_helper_cp_changed
True

Teasers often have an image which is displayed in the center page editor. The
shown image depends on the chosen layout. Create an image group and assign it
to the test-content:

>>> dummy = with_statement
>>> import zeit.cms.checkout.helper
>>> import zeit.cms.interfaces
>>> import zeit.cms.testing
>>> import zeit.content.image.interfaces
>>> import zeit.content.image.tests


>>> with zeit.cms.testing.site(getRootFolder()):
...     group = zeit.content.image.tests.create_image_group()
...     test_content = zeit.cms.interfaces.ICMSContent(
...         'http://xml.zeit.de/testcontent')
...     with zeit.cms.testing.interaction('zope.user'):
...         with zeit.cms.checkout.helper.checked_out(test_content) as co:
...             zeit.content.image.interfaces.IImages(co).images = (group,)


The 450x200 image is used now:

>>> browser.open(contents_url)
>>> print browser.contents
<div ...
       class="teaser-contents action-content-droppable leader">
  <img src="http://localhost/++skin++cms/repository/image-group/new-hampshire-450x200.jpg" />
  <div class="teaser-list">
    <div class="teaser">
      <div class="supertitle"></div>
      ...

When we change the layout to "Kleiner Teaser" the image will not be used any
more:

>>> browser.getLink('Edit').click()
>>> browser.open('edit-properties')
>>> browser.getLink('Kleiner Teaser').click()
>>> browser.open(contents_url)
>>> print browser.contents
<div ...
       class="teaser-contents action-content-droppable buttons">
  <div class="teaser-list">
    <div class="teaser">
      <div class="supertitle"></div>
      ...


When the image is not an image group, it will be just used:

>>> with zeit.cms.testing.site(getRootFolder()):
...     with zeit.cms.testing.interaction('zope.user'):
...         with zeit.cms.checkout.helper.checked_out(test_content) as co:
...             zeit.content.image.interfaces.IImages(co).images = (
...                 group['obama-clinton-120x120.jpg'],)
>>> browser.getLink('Edit').click()
>>> browser.open('edit-properties')
>>> browser.getLink('Großer Teaser').click()
>>> browser.open(contents_url)
>>> print browser.contents
<div ...
       class="teaser-contents action-content-droppable leader">
  <img src="http://localhost/++skin++cms/repository/image-group/obama-clinton-120x120.jpg" />
  <div class="teaser-list">
    <div class="teaser">
      <div class="supertitle"></div>
      ...


Available layout
~~~~~~~~~~~~~~~~

The avaliable layouts are different for the position of the teaser block in the
lead area. The first teaser block has all layouts avaliable for selection,
all others only the one with the small image.

We need to add a second teaser block:

>>> browser.open(contents_url)
>>> browser.open(
...  'lead/@@landing-zone-drop?uniqueId=http://xml.zeit.de/testcontent')
>>> browser.open(contents_url)

>>> browser.getLink('Edit').click()
>>> browser.open('edit-properties')
>>> browser.getLink('Großer Teaser mit Bild und Teaserliste')
<Link text='[IMG] Gro\xc3\x9fer Teaser mit Bild und Teaserliste' ...>
>>> browser.getLink('Kleiner Teaser mit kleinem Bild und Teaserliste')
<Link text='[IMG] Kleiner Teaser mit kleinem Bild und Teaserliste' ...>

>>> browser.open(contents_url)
>>> browser.getLink('Edit', index=2).click()
>>> browser.open('edit-properties')
>>> browser.getLink('Kleiner Teaser mit kleinem Bild und Teaserliste')
<Link text='[IMG] Kleiner Teaser mit kleinem Bild und Teaserliste' ...>
>>> browser.getLink('Großer Teaser mit Bild und Teaserliste')
Traceback (most recent call last):
  ...
LinkNotFoundError



.. [#fill-dav-with-content] Create a few test objects to play with:

    >>> import zeit.content.cp.browser.blocks.tests
    >>> zeit.content.cp.browser.blocks.tests.create_content(getRootFolder())

.. [#setup-layout-test-needs-real-content-type-with-image]:

    We create a new centerpage with a content type from the repository:

    >>> zeit.content.cp.browser.tests.create_cp(browser, filename='foreign')
    >>> browser.open('contents')
    >>> contents_url = browser.url
    >>> browser.open(
    ...     'lead/@@landing-zone-drop?uniqueId=http://xml.zeit.de/testcontent')

    Then we need to create a test 'article' to be included in this CenterPage:

    >>> browser.open('/++skin++cms/repository/testcontent')
    >>> browser.getLink('Checkout').click()
    >>> browser.getControl('Teaser title').value = u'Foreign teaser'
    >>> browser.getControl('Title').value = 'Auf den Spuren der Elfen'
    >>> browser.getControl('Year').value = '2007'
    >>> browser.getControl('Copyright (c)').value = 'ZEIT ONLINE'
    >>> browser.getControl('Ressort').displayValue = ['Reisen']
    >>> browser.getControl(name='form.authors.0.').value = 'Hans Sachs'
    >>> browser.getControl('Apply').click()
    >>> browser.getLink('Checkin').click()
    >>> 'Foreign teaser' in browser.contents
    True

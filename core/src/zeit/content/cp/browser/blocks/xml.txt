XML block
=========

The XML block contains raw XML.  Let's first create an empty XML block in the
lead area:[#helper_functions]_

>>> import z3c.etestbrowser.testing
>>> import zeit.content.cp.browser.tests
>>> browser = z3c.etestbrowser.testing.ExtendedTestBrowser()
>>> browser.addHeader('Authorization', 'Basic user:userpw')
>>> browser.xml_strict = True
>>> zeit.content.cp.browser.tests.create_cp(browser)
>>> browser.open('contents')
>>> contents_url = browser.url
>>> browser.getLink('Add block', index=0).click()
>>> browser.open(contents_url)
>>> browser.getLink('choose the block type').click()
>>> browser.getLink('Raw XML').click()

A new block with an XML <container> element is created:

>>> browser.open(contents_url)
>>> print browser.contents
<...
<span class="h_tag">&lt;container</span>...<span class="h_tagend">/&gt;</span>...

Editing the XML
---------------

You can edit the XML content by clicking the Edit button:

>>> browser.open(contents_url)
>>> browser.getLink('Edit').click()
>>> browser.open('edit-properties')
>>> xml = browser.getControl(name="form.xml").value
>>> print xml
<container...  cp:type="xmlblock" cp:__name__="..."/>

>>> print update_xml('/>', '><foo/></container>')
<...
<div class="summary">Updated on...

>>> browser.open(contents_url)
>>> print browser.contents
<...
<span class="h_tag">&lt;container</span>...
...<span class="h_tag">&lt;foo</span><span class="h_tagend">/&gt;</span>...
...<span class="h_tag">&lt;/container&gt;</span>...

The XML is checked for validity:

>>> print update_xml('>', '')
<...
<span class="error">error parsing attribute name, line 2, column 1</span>...

Furthermore, there are three contraints defined, which must match.

First, the root element must be a <container>:

>>> print update_xml('container', 'bar')
<...
<span class="error">The root element must be &lt;container&gt;.</span>...

Second, the <container> element must have a cp:type:

>>> print update_xml('cp:type', 'cp:bar')
<...
<span class="error">cp:type must be 'xmlblock'.</span>...

And, last but not least, the <container> must have a name:

>>> print update_xml('cp:__name__', 'cp:bar')
<...
<span class="error">No or empty cp:__name__ attribute.</span>...

.. [#helper_functions]

    >>> def update_xml(m, r):
    ...     browser.open(contents_url)
    ...     browser.getLink('Edit').click()
    ...     browser.open('edit-properties')
    ...     xml = browser.getControl(name="form.xml").value
    ...     browser.getControl(name="form.xml").value = xml.replace(m, r)
    ...     browser.getControl('Apply').click()
    ...     return browser.contents

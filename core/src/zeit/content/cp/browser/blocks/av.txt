Video blocks
============

>>> import z3c.etestbrowser.testing
>>> import zeit.content.cp.browser.testing
>>> browser = z3c.etestbrowser.testing.ExtendedTestBrowser()
>>> browser.addHeader('Authorization', 'Basic user:userpw')
>>> browser.xml_strict = True
>>> zeit.content.cp.browser.testing.create_cp(browser)
>>> browser.open('contents')
>>> contents_url = browser.url
>>> browser.open('informatives/@@landing-zone-drop-module'
...              '?block_type=video')


Create a video:

>>> from zeit.content.video.video import Video
>>> import datetime
>>> import pytz
>>> import zeit.cms.repository.interfaces
>>> import zeit.cms.testing
>>> import zope.component
>>> with zeit.cms.testing.site(getRootFolder()):
...     with zeit.cms.testing.interaction():
...         repository = zope.component.getUtility(
...             zeit.cms.repository.interfaces.IRepository)
...         video = Video()
...         video.expires = datetime.datetime(2009, 5, 5, tzinfo=pytz.UTC)
...         repository['video'] = video

Editing the block
-----------------

>>> browser.open(contents_url)
>>> browser.getLink('Edit', index=1).click()
>>> browser.open('edit-properties')
>>> browser.getControl('Media Id').value = '12345'
>>> browser.getControl('Format').displayValue = ['small']
>>> browser.getControl('Expiration date').value = '2009-05-05'
>>> browser.getControl('Player').displayOptions
['Einzelvideo', 'Playlist']
>>> browser.getControl('Player').displayValue
['Einzelvideo']
>>> browser.getControl('Player').displayValue = ['Playlist']
>>> browser.getControl('Apply').click()
>>> print browser.contents
<...self.close();...

>>> browser.open(contents_url)
>>> browser.getLink('Edit', index=1).click()
>>> browser.open('edit-properties')
>>> browser.getControl('Media Id').value
'12345'
>>> browser.getControl('Format').displayValue
['small']
>>> browser.getControl('Expiration date').value
'2009-05-05 00:00:00'
>>> browser.getControl('Player').displayValue
['Playlist']

The video block also supports dropping of videos:

>>> edit_form_url = browser.url
>>> browser.open('@@drop?uniqueId=http://xml.zeit.de/video')
>>> import pprint
>>> import json
>>> pprint.pprint(json.loads(browser.contents)['signals'])
[{u'args': [u'id-<GUID>',
            u'http://localhost/++skin++cms/workingcopy/zope.user/island/feature/informatives/id-666b0a7d-3020-475c-b17d-b82a895e74de/@@contents'],
  u'name': u'reload',
  u'when': None}]
>>> browser.open(edit_form_url)
>>> browser.getControl('Media Id').value
'video'
>>> browser.getControl('Format').displayValue
['small']
>>> browser.getControl('Expiration date').value
'2009-05-05 00:00:00'
>>> browser.getControl('Player').displayValue
['Einzelvideo']


The video block also supports dropping of playlists.

>>> from zeit.content.video.playlist import Playlist
>>> with zeit.cms.testing.site(getRootFolder()):
...     with zeit.cms.testing.interaction():
...         repository['pls'] = Playlist()


Expiration date and player are updated automatically:

>>> browser.open('@@drop?uniqueId=http://xml.zeit.de/pls')
>>> pprint.pprint(json.loads(browser.contents)['signals'])
[{u'args': [u'id-<GUID>',
            u'http://localhost/++skin++cms/workingcopy/zope.user/island/feature/informatives/id-03ffb451-4719-419a-863a-2481451bf6be/@@contents'],
  u'name': u'reload',
  u'when': None}]
>>> browser.open(edit_form_url)
>>> browser.getControl('Media Id').value
'pls'
>>> browser.getControl('Format').displayValue
['small']
>>> browser.getControl('Expiration date').value
''
>>> browser.getControl('Player').displayValue
['Playlist']


It is not possible to drop other types:

>>> browser.open('@@drop?uniqueId=http://xml.zeit.de/testcontent')
Traceback (most recent call last):
    ...
HTTPError: HTTP Error 500: Internal Server Error
>>> print browser.contents
Only videos and playlists can be dropped on a video block.


Audio blocks
============

>>> browser.open(contents_url)
>>> browser.open('informatives/@@landing-zone-drop-module'
...              '?block_type=audio')



>>> browser.open(contents_url)
>>> browser.getLink('Edit', index=1).click()
>>> browser.open('edit-properties')
>>> browser.getControl('Media Id').value = '98765'
>>> browser.getControl('Format').displayValue = [
...     'large']
>>> browser.getControl('Player')
Traceback (most recent call last):
    ...
LookupError: label 'Player'...

An empty value for the expireation date means no expiration:

>>> browser.getControl('Expiration date').value = ''
>>> browser.getControl('Apply').click()
>>> print browser.contents
<...self.close();...


XML of an audio/video block
===========================

>>> browser.open(contents_url)
>>> browser.open('xml_source_edit.html')
>>> print browser.getControl('XML Source').value
<...
<container cp:type="audio" module="audio" cp:__name__="id-<GUID>">
  <audio audioID="98765" format="large"/>
</container>
<container cp:type="video" module="video" cp:__name__="id-<GUID>">
  <video videoID="pls" player="pls" expires="" format="small"/>
</container>...

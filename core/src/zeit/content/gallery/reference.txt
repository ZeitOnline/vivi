Gallery references
==================

A gallery can be referenced within every ICMSContent. Create a
gallery[#functional]_:

>>> from zeit.content.gallery.gallery import Gallery
>>> gallery = Gallery()
>>> import zeit.cms.repository.interfaces
>>> import zope.component
>>> repository = zope.component.getUtility(
...     zeit.cms.repository.interfaces.IRepository)
>>> repository['gallery'] = gallery
>>> gallery = repository['gallery']

Create a testcontent:

>>> import zeit.cms.testcontenttype.testcontenttype
>>> content = zeit.cms.testcontenttype.testcontenttype.TestContentType()

Adapting `content` to IGalleryReference enables us to reference gallery:

>>> import zeit.content.gallery.interfaces
>>> gref = zeit.content.gallery.interfaces.IGalleryReference(content)
>>> gref
<zeit.content.gallery.reference.GalleryReference object at 0x...>

Assign the gallery and the embedded gallery:

>>> gref.gallery = gallery
>>> gref.embedded_gallery = gallery


The gallery is now noted in the webdav properties of `content`:

>>> import zeit.connector.interfaces
>>> properties = zeit.connector.interfaces.IWebDAVProperties(content)
>>> import pprint
>>> pprint.pprint(dict(properties))
{('artbox_gallery', 'http://namespaces.zeit.de/CMS/document'): u'http://xml.zeit.de/gallery',
 ('biga-src', 'http://namespaces.zeit.de/CMS/document'): u'http://xml.zeit.de/gallery',
 ('date-last-modified', u'http://namespaces.zeit.de/CMS/document'): '...'}
 

The browse location of a gallery reference depends on the adapted object and
yields the container the object is in:

>>> repository['online']['content'] = content
>>> content = repository['online']['content']
>>> import zeit.cms.browser.interfaces
>>> loc = zope.component.getMultiAdapter(
...     (gref,
...      zeit.content.gallery.interfaces.IGalleryReference['gallery'].source),
...     zeit.cms.browser.interfaces.IDefaultBrowsingLocation)
>>> loc
<zeit.cms.repository.folder.Folder object at 0x...>
>>> loc.uniqueId
u'http://xml.zeit.de/online'


The gallery source is a utility:

>>> name = zeit.content.gallery.interfaces.IGalleryReference[
...     'gallery'].source.name
>>> name
'zeit.content.gallery'
>>> zope.component.getUtility( 
...     zeit.cms.content.interfaces.ICMSContentSource, name)
<zeit.content.gallery.interfaces.GallerySource object at 0x...>


An xml reference to content also indicates the gallery:

>>> import lxml.etree
>>> import zeit.cms.content.interfaces
>>> node = zope.component.getAdapter(
...     content, zeit.cms.content.interfaces.IXMLReference, name='related')
>>> print lxml.etree.tostring(node, pretty_print=True),
<reference ...type="intern" href="http://xml.zeit.de/online/content"...>
  ...
  <gallery type="intern" href="http://xml.zeit.de/gallery"...>
    <supertitle xsi:nil="true"/>
    ...
  </gallery>
</reference>

When the xml reference is produced a second time there is still only one
gallery node (used to be a bug which produced a new one each time):

>>> updater = zeit.cms.content.interfaces.IXMLReferenceUpdater(content)
>>> updater.update(node)
>>> len(node.findall('gallery'))
1


When the reference is removed the <gallery> tag is removed:

>>> import zeit.cms.checkout.helper
>>> with zeit.cms.checkout.helper.checked_out(content) as co:
...     gref = zeit.content.gallery.interfaces.IGalleryReference(co)
...     gref.gallery = None
>>> content = repository['online']['content']
>>> node = zope.component.getAdapter(
...     content, zeit.cms.content.interfaces.IXMLReference, name='related')
>>> '<gallery' in lxml.etree.tostring(node, pretty_print=True)
False


.. [#functional]

    >>> import zeit.cms.testing
    >>> zeit.cms.testing.set_site()
    >>> p = zeit.cms.testing.create_interaction()
    >>> dummy = with_statement

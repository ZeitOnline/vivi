Gallery Workflow
================

>>> import zeit.cms.testing
>>> zeit.cms.testing.set_site()
>>> import zope.component
>>> import zeit.cms.repository.interfaces
>>> import zeit.cms.workflow.interfaces
>>> repository = zope.component.getUtility(
...     zeit.cms.repository.interfaces.IRepository)
>>> principal = zeit.cms.testing.create_interaction()

The when a gallery is published the referenced image folder is published with
it automatically.

Create a gallery, an image folder, an image and associate the folder with the
gallery:

>>> import zeit.cms.repository.folder
>>> folder = zeit.cms.repository.folder.Folder()
>>> repository['image-folder'] = folder

>>> import zeit.content.image.image
>>> image = zeit.content.image.image.LocalImage()
>>> import os.path
>>> filename = os.path.join(os.path.dirname(__file__), 'browser', 'testdata', '01.jpg')
>>> test_data = open(filename, 'rb').read()
>>> _ = image.open('w').write(open(filename, 'rb').read())
>>> folder['01.jpg'] = image
>>> image = folder['01.jpg']

>>> from zeit.content.gallery.gallery import Gallery
>>> gallery = Gallery()
>>> gallery.image_folder = folder
>>> repository['online']['gallery'] = gallery
>>> gallery = repository['online']['gallery']


Currently neither the gallery nor the image follder is published:

>>> import zeit.cms.workflow.interfaces
>>> gallery_info = zeit.cms.workflow.interfaces.IPublishInfo(gallery)
>>> not not gallery_info.published
False
>>> image_info = zeit.cms.workflow.interfaces.IPublishInfo(image)
>>> not not image_info.published
False

When we publish the gallery now, the image is also published:

>>> import logging
>>> from six import StringIO
>>> logfile = StringIO()
>>> log_handler = logging.StreamHandler(logfile)
>>> logging.root.addHandler(log_handler)
>>> loggers = [None, 'zeit']
>>> oldlevels = {}
>>> for name in loggers:
...     logger = logging.getLogger(name)
...     oldlevels[name] = logger.level
...     logger.setLevel(logging.INFO)

>>> gallery_info.urgent = True
>>> gallery_info.can_publish()
'can-publish-success'
>>> publish = zeit.cms.workflow.interfaces.IPublish(gallery)
>>> tid = publish.publish()
>>> gallery_info.published
True
>>> image_info.published
True

The publis script also got all the folders and files:

>>> print(logfile.getvalue())
Running job ...
Publishing http://xml.zeit.de/online/gallery
...publish.sh:
Publishing test script
work/online/gallery
work/image-folder/
work/image-folder/01.jpg
work/image-folder/thumbnails/
work/image-folder/thumbnails/01.jpg
done.
Done http://xml.zeit.de/online/gallery (...s)


On retract the folder is also retracted:

>>> _ = logfile.seek(0)
>>> _ = logfile.truncate()
>>> tid = publish.retract()
>>> image_info.published
False
>>> gallery_info.published
False

Note that the script gets the reverse order for removing:

>>> print(logfile.getvalue())
Running job ...
Retracting http://xml.zeit.de/online/gallery
...retract.sh:
Retracting test script
work/image-folder/thumbnails/01.jpg
work/image-folder/thumbnails/
work/image-folder/01.jpg
work/image-folder/
work/online/gallery
done.
<BLANKLINE>
Done http://xml.zeit.de/online/gallery (...s)


Publishing w/o image folder
+++++++++++++++++++++++++++

When the image folder is removed before the gallery is published the gallery is
published w/o images:

Delete the folder and try to publish:

>>> import transaction
>>> del repository['image-folder']
>>> transaction.commit()
>>> _ = logfile.seek(0)
>>> _ = logfile.truncate()
>>> publish = zeit.cms.workflow.interfaces.IPublish(gallery)
>>> tid = publish.publish()
>>> gallery_info.published
True
>>> print(logfile.getvalue())
Running job ...
Publishing http://xml.zeit.de/online/gallery
...publish.sh:
Publishing test script
work/online/gallery
done.
Done http://xml.zeit.de/online/gallery (...s)


Clean up
++++++++

>>> logging.root.removeHandler(log_handler)
>>> for name in loggers:
...     logging.getLogger(name).setLevel(oldlevels[name])

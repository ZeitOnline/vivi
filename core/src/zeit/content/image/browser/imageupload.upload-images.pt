<tal:block i18n:domain="zeit.cms">
  <form name="imageupload" enctype="multipart/form-data" class="imageupload" method="POST">
    <label class="imageupload__drop">
      <input type="file" class="imageupload__input" multiple accept="image/*" name="files">
      <p i18n:translate="">Upload one or multiple images</p>
      <span class="imageupload__button imageupload__button--add" i18n:translate="">Select files</span>
    </label>
    <ul class="imageupload__gallery"></ul>
    <p><button class="imageupload__button imageupload__button--submit" i18n:translate="">Upload</button></p>
    <template class="imageupload__template">
        <li>
            <img/>
            <span class="imageupload__filename"></span>
            <progress max=100 value=0></progress>
            <button class="imageupload__button imageupload__button--remove" i18n:translate="">Remove</button>
            <span class="imageupload__error"></span>
        </li>
    </template>
  </form>
  <script>
  class ImageUpload {
    #form
    #dropArea
    #gallery
    #submitButton

    constructor(form) {
      this.#form = form
      this.#dropArea = form.querySelector('.imageupload__drop')
      this.#gallery = form.querySelector('.imageupload__gallery')
      this.#submitButton = form.querySelector('.imageupload__button--submit')

      this.#dropArea.addEventListener('dragenter', this, false)
      this.#dropArea.addEventListener('dragover', this, false)
      this.#dropArea.addEventListener('dragleave', this, false)
      this.#dropArea.addEventListener('drop', this, false)
      form.querySelector('[type="file"]').addEventListener('change', this, false)
      this.#gallery.addEventListener('click', this, false)
      this.#submitButton.addEventListener('click', this, false)
    }

    handleEvent(e) {
      switch (e.type) {
        case 'dragenter':
          this.highlight(true);
          e.preventDefault()
          e.stopPropagation()
          break;
        case 'drop':
          const {files} = e.dataTransfer
          this.handleFiles(files)
        case 'dragleave':
          e.preventDefault()
          e.stopPropagation()
          break;
        case 'dragover':
          e.preventDefault()
          e.stopPropagation()
          break;
        case 'change':
          this.handleFiles(e.currentTarget.files)
          break;
        case 'click':
          if (e.target == this.#submitButton) {
              e.preventDefault()
              this.uploadFiles()
          } else if (e.target.classList.contains('imageupload__button--remove')) {
              const li = e.target.closest('li')
              this.removeFile(li)
          }
          break;
      }
    }

    handleFiles(files) {
        for (let file of files) {
            this.addFile(file)
        }
    }

    addFile(file) {
      const li = this.#form.querySelector('.imageupload__template').content.cloneNode(true).firstElementChild
      li.querySelector('.imageupload__filename').textContent = file.name
      let reader = new FileReader()
      reader.readAsDataURL(file)
      reader.onloadend = () => li.querySelector('img').src = reader.result
      li.file = file
      this.#gallery.appendChild(li)
    }

    removeFile(li) {
        li.remove()
    }

    uploadFiles() {
      this.#form.classList.add('imageupload--uploading')
      this.#submitButton.disabled = true
      let uploads = []
      for (let li of this.#gallery.childNodes) {
        let errorSpan = li.querySelector('.imageupload__error')
        errorSpan.textContent = ''
        uploads.push(this.uploadFile(li.file, progress => li.querySelector('progress').value = progress).catch(error => {
            errorSpan.textContent = error
            throw error
        }))
      }
      Promise.all(uploads).then(results => {
        if (!results.length) { return; }
        let url = results[0] + results.slice(1).map(url => '&files=' + new URL(url).searchParams.get('files')).join("")
        window.location = url
      }, e => {
        // Swallow exception since we already displayed it at the li
      }).finally(() => {
        this.#form.classList.remove('imageupload--uploading')
        this.#submitButton.disabled = false
      });
    }

    uploadFile(file, updateProgress) {
      return new Promise((resolve, reject) => {
        const xhr = new XMLHttpRequest()
        xhr.open('POST', this.#form.action, true)
        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest')

        xhr.upload.addEventListener("progress", function(e) {
          updateProgress((e.loaded * 100.0 / e.total) || 100)
        })

        xhr.addEventListener('readystatechange', function(e) {
          if (xhr.readyState == 4 && xhr.status == 200) {
            updateProgress(100)
            resolve(xhr.responseText)
          }
          else if (xhr.readyState == 4 && xhr.status != 200) {
            reject(xhr.responseText)
          }
        })

        const formData = new FormData()
        formData.append('files', file)
        xhr.send(formData)
      })
    }
  }

  new ImageUpload(document.querySelector('.imageupload'));
  </script>
</tal:block>

===========
Syndication
===========

If objects which are adaptable to IImages are syndicated, the first image will
be added to the feed[#functional]_.

Get a content from the repository:

>>> import zope.component
>>> import zeit.cms.repository.interfaces
>>> repository = zope.component.getUtility(
...     zeit.cms.repository.interfaces.IRepository)
>>> content = repository['testcontent']

Also create a feed:

>>> import zeit.cms.syndication.feed
>>> feed = zeit.cms.syndication.feed.Feed()

Insert content to the feed:

>>> feed.insert(0, content)

We have not added any image, so no image is referenced:

>>> print feed.xml_source
<channel xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:py="http://codespeak.net/lxml/objectify/pytype">
  <title/>
  <container>
    <block href="http://xml.zeit.de/testcontent"...>
      <supertitle xsi:nil="true"/>
      <title xsi:nil="true"/>
      <text xsi:nil="true"/>
      <description xsi:nil="true"/>
      <byline xsi:nil="true"/>
      <short>
        <title xsi:nil="true"/>
        <text xsi:nil="true"/>
      </short>
      <homepage>
        <title xsi:nil="true"/>
        <text xsi:nil="true"/>
      </homepage>
      <references/>
    </block>
  </container>
  <object_limit py:pytype="int">50</object_limit>
</channel>


We will mostly want to reference image groups, so create one first:

>>> import zeit.content.image.tests
>>> group = zeit.content.image.tests.create_image_group()

Reference the image group[#needsinteraction]_:

>>> import zeit.cms.content.interfaces
>>> import zeit.cms.checkout.interfaces
>>> import zeit.content.image.interfaces
>>> checked_out = zeit.cms.checkout.interfaces.ICheckoutManager(
...     content).checkout()
>>> images = zeit.content.image.interfaces.IImages(checked_out)
>>> images.images = (group, )
>>> content = zeit.cms.checkout.interfaces.ICheckinManager(
...     checked_out).checkin()

Update the metadata of the feed. The image is now referenced:

>>> feed.updateMetadata(content)
>>> print feed.xml_source
<channel xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:py="http://codespeak.net/lxml/objectify/pytype">
  <title/>
  <container>
    <block href="http://xml.zeit.de/testcontent"...>
     ...
      <image base-id="http://xml.zeit.de/image-group" type="jpg"...>
        <bu xsi:nil="true"/>
        <copyright py:pytype="str">&#169;</copyright>
      </image>
    </block>
  </container>
  <object_limit py:pytype="int">50</object_limit>
</channel>

When more than one image is referenced, only the first one will be in the feed:

>>> import zope.component
>>> import zeit.cms.repository.interfaces
>>> repository = zope.component.getUtility(
...     zeit.cms.repository.interfaces.IRepository)
>>> images.images = (group, repository['2006']['DSC00109_2.JPG'],)
>>> checked_out = zeit.cms.checkout.interfaces.ICheckoutManager(
...     content).checkout()
>>> images = zeit.content.image.interfaces.IImages(checked_out)
>>> images.images = (group, )
>>> content = zeit.cms.checkout.interfaces.ICheckinManager(
...     checked_out).checkin()
>>> feed.updateMetadata(content)
>>> print feed.xml_source
<channel xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:py="http://codespeak.net/lxml/objectify/pytype">
  <title/>
  <container>
    <block href="http://xml.zeit.de/testcontent"...>
      ...
      <references/>
      <image base-id="http://xml.zeit.de/image-group" type="jpg"...>
        <bu xsi:nil="true"/>
        <copyright py:pytype="str">&#169;</copyright>
      </image>
    </block>
  </container>
  <object_limit py:pytype="int">50</object_limit>
</channel>


When we have no image referenced it is also removed from the channel:

>>> checked_out = zeit.cms.checkout.interfaces.ICheckoutManager(
...     content).checkout()
>>> images = zeit.content.image.interfaces.IImages(checked_out)
>>> images.images = ()
>>> content = zeit.cms.checkout.interfaces.ICheckinManager(
...     checked_out).checkin()
>>> feed.updateMetadata(content)
>>> print feed.xml_source,
<channel xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:py="http://codespeak.net/lxml/objectify/pytype">
  <title/>
  <container>
    <block href="http://xml.zeit.de/testcontent"...>
      ...
      <references/>
    </block>
  </container>
  <object_limit py:pytype="int">50</object_limit>
</channel>


When we change the metadata of the imagegroup the content is updated on
checkin of the imagegroup. Change the metadata of the group.

Before:

>>> checked_out = zeit.cms.checkout.interfaces.ICheckoutManager(
...     content).checkout()
>>> images = zeit.content.image.interfaces.IImages(checked_out)
>>> images.images = (group, )
>>> content = zeit.cms.checkout.interfaces.ICheckinManager(
...     checked_out).checkin()
>>> import lxml.etree
>>> print lxml.etree.tostring(repository['testcontent'].xml, pretty_print=True)
<testtype>
  <head>
    <image ...base-id="http://xml.zeit.de/image-group" 
        type="jpg"...>
      <bu xsi:nil="true"/>
      <copyright py:pytype="str">&#169;</copyright>
    </image>
    ...
  </head>
  <body/>
</testtype>

Now check out, change title and check in:

>>> checked_out = zeit.cms.checkout.interfaces.ICheckoutManager(
...     group).checkout()
>>> metadata = zeit.content.image.interfaces.IImageMetadata(checked_out)
>>> metadata.title = u"Image title"
>>> group = zeit.cms.checkout.interfaces.ICheckinManager(checked_out).checkin()
>>> import gocept.async.tests
>>> gocept.async.tests.process('events')

The content has changed automatically:

>>> print lxml.etree.tostring(
...     repository['testcontent'].xml, pretty_print=True),
<testtype>
  <head>
    <image ...title="Image title" base-id="http://xml.zeit.de/image-group" type="jpg"...>
      <bu xsi:nil="true"/>
      <copyright py:pytype="str">&#169;</copyright>
    </image>
    ...
  </head>
  <body/>
</testtype>


When a referenfced image group looses its type, the updater doesn't puke:

>>> import zeit.connector.interfaces
>>> connector = zope.component.getUtility(zeit.connector.interfaces.IConnector)
>>> connector.changeProperties(
...     'http://xml.zeit.de/image-group', {
...     zeit.connector.interfaces.RESOURCE_TYPE_PROPERTY: 'folder'})
>>> feed.updateMetadata(repository['testcontent'])
Traceback (most recent call last):
    ...
ValueError: Could not create xml reference 'image'
    for http://xml.zeit.de/image-group 
    which is referenced in http://xml.zeit.de/testcontent.


Reference index
===============

When an image is related to another object this is indexed. We can find this
out via the relations utility:

>>> import zeit.cms.relation.interfaces
>>> relations = zope.component.getUtility(
...     zeit.cms.relation.interfaces.IRelations)
>>> list(relations.get_relations(group, 'image_referenced_by'))
[<zeit.cms.testcontenttype.testcontenttype.TestContentType object at 0x...>]


There is also an adatper from IImage and IImageGroup to find the relating
objects:

>>> zeit.content.image.interfaces.IReferences(group).references
(<zeit.cms.testcontenttype.testcontenttype.TestContentType object at 0x...>,)
>>> zeit.content.image.interfaces.IReferences(
...     repository['2006']['DSC00109_2.JPG']).references
()

.. [#functional]

>>> import zeit.cms.testing
>>> zeit.cms.testing.set_site()

.. [#needsinteraction] Create interaction

    >>> principal = zeit.cms.testing.create_interaction()

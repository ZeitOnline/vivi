==========================================
Exporting to the Content-Drehscheibe (CDS)
==========================================

When publishing articles, they are exported to the `Tagesspiegel` if the export
flag is set. To export the article, it is saved to a `gocept.filestore`
directory upon publication in the CMS. The `zeit.cds` package then is run in a
cron job that regularly exports the articles in the filestore to the
Content-Drehscheibe FTP server.

Because we need to checkout and -in an article, we first need an interaction as
checkout manager:[#functional]_

>>> import zope.security.testing
>>> principal = zope.security.testing.Principal(u'zope.user')
>>> participation = zope.security.testing.Participation(principal)
>>> import zope.publisher.browser
>>> request = zope.publisher.browser.TestRequest()
>>> request.setPrincipal(principal)
>>> import zope.security.management
>>> zope.security.management.newInteraction(request)

We checkout a test content object:

>>> import zeit.cms.repository.interfaces
>>> import zope.component
>>> repository = zope.component.getUtility(
...     zeit.cms.repository.interfaces.IRepository)
>>> content = repository['online']['2007']['01']['Somalia']
>>> content
<zeit.content.article.article.Article object at 0x...>

For existing documents `export_cds` is not yet set:

>>> print content.export_cds
None

We will now check out and in the article, so the `export_cds` flag gets set.
Note, that we use the new `with` statement here, which has to be imported from
`__future__`. Due to some complications with doctests, this is done in the test
setup and not right here:

>>> dummy = with_statement
>>> import zeit.cms.checkout.helper
>>> with zeit.cms.checkout.helper.checked_out(content) as co:
...     co.export_cds = True

So now, the `export_cds` flag is set:

>>> print content.export_cds
True

We now publish the article (we set it to `urgent` to save some overhead
configuration) and run the tasks service, which processes the articles
asynchonously:

>>> import zeit.workflow.interfaces
>>> import zeit.cms.workflow.interfaces
>>> workflow = zeit.workflow.interfaces.IContentWorkflow(content)
>>> workflow.urgent = True
>>> publish = zeit.cms.workflow.interfaces.IPublish(content)
>>> publish.publish()
>>> import lovely.remotetask.interfaces
>>> tasks = zope.component.getUtility(
...     lovely.remotetask.interfaces.ITaskService, 'general')
>>> tasks.process()

Now, the publish process is finished and out article is published:

>>> workflow.published
True

A copy of the article is located in the CDS filestore, because the `export_cds`
flag was set to True:

>>> import zope.app.appsetup
>>> config = zope.app.appsetup.product.getProductConfiguration(
...     'zeit.content.article')
>>> store_dir = config['cds_filestore']
>>> import gocept.filestore
>>> fs = gocept.filestore.FileStore(store_dir)
>>> fs.list('new')
['.../347b85e0-0740-4e52-8f62-3192430b0417.xml']


Cleanup
=======

After the test we restore the old site:

>>> zope.security.management.endInteraction()
>>> zope.app.component.hooks.setSite(old_site)

.. [#functional] We need to set the site since we're a functional test:

    >>> import zope.app.component.hooks
    >>> old_site = zope.app.component.hooks.getSite()
    >>> zope.app.component.hooks.setSite(getRootFolder())

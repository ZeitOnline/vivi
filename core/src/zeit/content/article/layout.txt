==============
Article Layout
==============

>>> import zeit.cms.testing
>>> zeit.cms.testing.set_site()
>>> principal = zeit.cms.testing.create_interaction()

The centerpage referenced by an article as its layout is published when the
article is published.

>>> import zeit.content.article.article
>>> import zeit.content.cp.centerpage
>>> import zope.component
>>> import zeit.cms.repository.interfaces
>>> repository = zope.component.getUtility(
...     zeit.cms.repository.interfaces.IRepository)

>>> article = zeit.content.article.article.Article()
>>> repository['2007']['01']['article'] = article
>>> article = repository['2007']['01']['article']

>>> cp = zeit.content.cp.centerpage.CenterPage()
>>> repository['2007']['01']['cp'] = cp
>>> cp = repository['2007']['01']['cp']

>>> from zeit.content.article.interfaces import IArticle
>>> import zeit.cms.browser.form
>>> import zeit.cms.tagging.interfaces
>>> wl = zope.component.getUtility(
...     zeit.cms.tagging.interfaces.IWhitelist)
>>> with zeit.cms.checkout.helper.checked_out(article) as co:
...     zeit.cms.browser.form.apply_default_values(co, IArticle)
...     co.year = 2011
...     co.title = u'Mary had a little lamb'
...     co.ressort = u'Deutschland'
...     co.layout = cp
...     co.keywords = (wl['testtag'], wl['testtag2'], wl['testtag3'],)

After publishing the article, the centerpage is published, too:

>>> from zeit.cms.workflow.interfaces import IPublish, IPublishInfo
>>> from zeit.workflow.interfaces import IContentWorkflow
>>> from zeit.workflow.testing import run_publish
>>> IContentWorkflow(article).urgent = True
>>> job_id = IPublish(article).publish()
>>> run_publish()

Check that there were no errors during publishing:

>>> import zeit.objectlog.interfaces
>>> log = zope.component.getUtility(
...     zeit.objectlog.interfaces.IObjectLog)
>>> import zope.i18n
>>> [zope.i18n.translate(x.message) for x in log.get_log(article)]
[u'Checked in', u'Urgent: yes', u'Publication scheduled', u'Published']
>>> published_cp = IPublishInfo(cp).date_last_published
>>> published_article = IPublishInfo(article).date_last_published
>>> published_article
datetime.datetime(...)
>>> published_cp
datetime.datetime(...)

When publishing again, the centerpage is not published again, since it
is already published:

>>> job_id = IPublish(article).publish()
>>> run_publish()
>>> IPublishInfo(article).date_last_published == published_article
False
>>> IPublishInfo(cp).date_last_published == published_cp
True

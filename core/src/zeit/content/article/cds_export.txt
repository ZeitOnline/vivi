==========================================
Exporting to the Content-Drehscheibe (CDS)
==========================================

When publishing articles, they are exported to the `Tagesspiegel` if
the export flag is set. To export the article, it is saved to a
`gocept.filestore` directory upon publication in the CMS. The
`zeit.cds` package then is run in a cron job that regularly exports
the articles in the filestore to the Content-Drehscheibe FTP server.

Setup
-----

In order to be able to check out and in articles and go through the workflow,
we need to set up an interaction based on the request: [#functional]_

>>> p = zeit.cms.testing.create_interaction(u'zope.user')

Below we want to use the ``with`` statement, which in Python 2.5 has
to be imported from ``__future__`` to make function. We've done most
of the setup in the test setup already, but we still need to do this
here to enable it:

>>> dummy = with_statement

Now we can check out a test content object that we'll aim to export upon
publication:

>>> import zeit.cms.repository.interfaces
>>> import zope.component
>>> repository = zope.component.getUtility(
...     zeit.cms.repository.interfaces.IRepository)
>>> content = repository['online']['2007']['01']['Somalia']
>>> content
<zeit.content.article.article.Article...>

export_cds flag not set
-----------------------

When the ``export_cds flag`` is not set, publishing an article will
have no effect on the cds filestore.

We start out with an empty cds filestore:

>>> import zeit.content.article.cds
>>> fs = zeit.content.article.cds.get_cds_filestore('cds-export')
>>> fs.list('new')
[]

Unset `export_cds`.

>>> import zeit.content.article.interfaces
>>> cdswf = zeit.content.article.interfaces.ICDSWorkflow(content)
>>> cdswf.export_cds = False


We want to publish the article. The first step is to set it to
``urgent`` (this is the easiest way to publish within the workflow
system):

>>> import zeit.workflow.interfaces
>>> import zeit.cms.workflow.interfaces
>>> workflow = zeit.workflow.interfaces.IContentWorkflow(content)
>>> workflow.urgent = True

Now we can proceed to publish the article:

>>> publish = zeit.cms.workflow.interfaces.IPublish(content)
>>> tid = publish.publish()

At this point the article is not yet published. We need to run an
asynchronous task which takes care of that:

>>> zeit.cms.workflow.interfaces.IPublishInfo(content).published
True

Since the ``export_cds`` flag wasn't set, the article does not show up
in the cds filestore:

>>> fs.list('new')
[]


export_cds flag not set with ZEDE product
-----------------------------------------

Only if the content object has the product_id 'ZEDE', the default is to export
to the CDS:

>>> content = repository['online']['2007']['01']['saddam-exekution']
>>> import zeit.cms.tagging.interfaces
>>> wl = zope.component.getUtility(
...     zeit.cms.tagging.interfaces.IWhitelist)
>>> with zeit.cms.checkout.helper.checked_out(content) as co:
...     co.product = zeit.cms.content.sources.Product(u'ZEI')
...     co.ressort = u'International'
...     co.keywords = (
...         wl.get('testtag'), wl.get('testtag2'), wl.get('testtag3'),)
>>> cdswf = zeit.content.article.interfaces.ICDSWorkflow(content)
>>> print cdswf.export_cds
None
>>> from zeit.content.article.interfaces import IArticle
>>> import zeit.cms.browser.form
>>> with zeit.cms.checkout.helper.checked_out(content) as co:
...     co.product = zeit.cms.content.sources.Product(u'ZEDE')
>>> cdswf = zeit.content.article.interfaces.ICDSWorkflow(content)
>>> cdswf.export_cds
True

export_cds flag set to true
---------------------------

We will now set the ``export_cds`` flag to ``True``:

>>> content = repository['online']['2007']['01']['elterngeld-schlieben']
>>> with zeit.cms.checkout.helper.checked_out(content) as co:
...     co.keywords = (
...         wl.get('testtag'), wl.get('testtag2'), wl.get('testtag3'),)
>>> cdswf = zeit.content.article.interfaces.ICDSWorkflow(content)
>>> cdswf.export_cds = True

Let's verify it's really set:

>>> print cdswf.export_cds
True

We now publish the article. The first step is to set it to ``urgent`` (this
is the easiest way to publish within the workflow system):

>>> workflow = zeit.workflow.interfaces.IContentWorkflow(content)
>>> workflow.urgent = True

Now we can proceed to publish the article:

>>> publish = zeit.cms.workflow.interfaces.IPublish(content)
>>> tid = publish.publish()

Now, the publish process is finished and the article is published:

>>> workflow.published
True

Since the ``export_cds`` flag was set for this article, a copy of the
article can be found in the CDS filestore, ready for FTP-ing to the CDS:

>>> fs.list('new')
['.../{urn:uuid:347b85e0-0740-4e52-8f62-3192430b0417}.xml']


Dependencies
------------

Dependent objects are not exported to the CDS:

>>> import transaction
>>> class Dep(zeit.workflow.dependency.DependencyBase):
...     def get_dependencies(self):
...         return (repository['online']['2007']['01']['eta-zapatero'],)
...
>>> gsm = zope.component.getGlobalSiteManager()
>>> gsm.registerAdapter(
...     Dep,
...     (zeit.cms.interfaces.ICMSContent,),
...     zeit.workflow.interfaces.IPublicationDependencies,
...     name='dep')
>>> transaction.commit()
>>> tid = publish.publish()
>>> len(fs.list('new'))
1
>>> gsm.unregisterAdapter(
...     Dep,
...     (zeit.cms.interfaces.ICMSContent,),
...     zeit.workflow.interfaces.IPublicationDependencies,
...     name='dep')
True


.. [#functional] We need to set the site since we're a functional test:

    >>> import zeit.cms.testing
    >>> zeit.cms.testing.set_site()

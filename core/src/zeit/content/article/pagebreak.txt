Page breaks
===========

[#needsinteraction]_

>>> import StringIO
>>> import lxml.etree
>>> import zeit.content.article.article
>>> import zeit.wysiwyg.interfaces


XML->HTML
---------

The division appears *between* the paragraphs, so one divsion is invisible:

>>> source = '''\
... <article>
...   <head/>
...   <body>
...     <title>Title</title>
...     <division type="page">
...       <p>1</p>
...       <p>2</p>
...     </division>
...   </body>
... </article>'''
>>> article = zeit.content.article.article.Article(StringIO.StringIO(source))
>>> converter = zeit.wysiwyg.interfaces.IHTMLConverter(article)
>>> print converter.to_html(article.xml['body'])
<p>1</p>
<p>2</p>

but from two on, <division> is converted to a <div class="page-break">:

>>> source = '''\
... <article>
...   <head/>
...   <body>
...     <title>Title</title>
...     <division type="page">
...       <p>1</p>
...       <p>2</p>
...     </division>
...     <division type="page" teaser="Teaser">
...       <p>3</p>
...       <p>4</p>
...     </division>
...   </body>
... </article>'''
>>> article = zeit.content.article.article.Article(StringIO.StringIO(source))
>>> converter = zeit.wysiwyg.interfaces.IHTMLConverter(article)
>>> print converter.to_html(article.xml['body']),
<p>1</p>
<p>2</p>
<div class="inline-element page-break">
  <div class="teaser">Teaser</div>
</div>
<p> </p>
<p>3</p>
<p>4</p>
>>> article.paragraphs
4

When there is no teaser attribute on the ``<division>`` the teaser will be
empty:

>>> source = '''\
... <article>
...   <head/>
...   <body>
...     <title>Title</title>
...     <division type="page">
...       <p>1</p>
...       <p>2</p>
...     </division>
...     <division type="page">
...       <p>3</p>
...       <p>4</p>
...     </division>
...   </body>
... </article>'''
>>> article = zeit.content.article.article.Article(StringIO.StringIO(source))
>>> converter = zeit.wysiwyg.interfaces.IHTMLConverter(article)
>>> print converter.to_html(article.xml['body']),
<p>1</p>
<p>2</p>
<div class="inline-element page-break">
  <div class="teaser"></div>
</div>
<p> </p>
<p>3</p>
<p>4</p>


HTML->XML
---------

One division should always exist:

>>> article = zeit.content.article.article.Article()
>>> converter = zeit.wysiwyg.interfaces.IHTMLConverter(article)
>>> converter.from_html(article.xml['body'], """\
...   <p>1</p>
...   <p>2</p>
... """)
>>> print lxml.etree.tostring(article.xml['body'], pretty_print=True)
<body xmlns:py="http://codespeak.net/lxml/objectify/pytype">
  <division type="page">
    <p>1</p>
    <p>2</p>
  </division>
</body>

and multiple ones are converted accordingly:

>>> article = zeit.content.article.article.Article()
>>> converter = zeit.wysiwyg.interfaces.IHTMLConverter(article)
>>> converter.from_html(article.xml['body'], """\
...   <p>1</p>
...   <p>2</p>
...   <div class="page-break inline-element">
...     <div class="teaser">Teaser</div>
...   </div>
...   <p>3</p>
...   <p>4</p>
... """)
>>> print lxml.etree.tostring(article.xml['body'], pretty_print=True)
<body xmlns:py="http://codespeak.net/lxml/objectify/pytype">
  <division type="page">
    <p>1</p>
    <p>2</p>
  </division>
  <division teaser="Teaser" type="page">
    <p>3</p>
    <p>4</p>
  </division>
</body>


When the teaser is empty, the teaser attribute is empty:

>>> article = zeit.content.article.article.Article()
>>> converter = zeit.wysiwyg.interfaces.IHTMLConverter(article)
>>> converter.from_html(article.xml['body'], """\
...   <p>1</p>
...   <p>2</p>
...   <div class="page-break inline-element">
...     <div class="teaser"></div>
...   </div>
...   <p>3</p>
...   <p>4</p>
... """)
>>> print lxml.etree.tostring(article.xml['body'], pretty_print=True)
<body xmlns:py="http://codespeak.net/lxml/objectify/pytype">
  <division type="page">
    <p>1</p>
    <p>2</p>
  </division>
  <division teaser="" type="page">
    <p>3</p>
    <p>4</p>
  </division>
</body>


Page breaking only applies to Articles, not to other content types:

>>> import zeit.cms.testcontenttype.testcontenttype
>>> article = zeit.cms.testcontenttype.testcontenttype.TestContentType()
>>> converter = zeit.wysiwyg.interfaces.IHTMLConverter(article)
>>> converter.from_html(article.xml['body'], """\
...   <p>1</p>
...   <p>2</p>
... """)
>>> print lxml.etree.tostring(article.xml['body'], pretty_print=True)
<body xmlns:py="http://codespeak.net/lxml/objectify/pytype">
  <p>1</p>
  <p>2</p>
</body>

If the HTML does not supply any page breaks, an appropriate amount is inserted
according to IArticleMetadata.pageBreak:

>>> article = zeit.content.article.article.Article()
>>> article.pageBreak = 2
>>> converter = zeit.wysiwyg.interfaces.IHTMLConverter(article)
>>> converter.from_html(article.xml['body'], """\
...   <p>1</p>
...   <p>2</p>
...   <p>3</p>
...   <p>4</p>
... """)
>>> print lxml.etree.tostring(article.xml['body'], pretty_print=True)
<body xmlns:py="http://codespeak.net/lxml/objectify/pytype">
  <division type="page">
    <p>1</p>
    <p>2</p>
  </division>
  <division type="page">
    <p>3</p>
    <p>4</p>
  </division>
</body>

Only <p> tags count toward the page break:

>>> article = zeit.content.article.article.Article()
>>> article.pageBreak = 2
>>> converter = zeit.wysiwyg.interfaces.IHTMLConverter(article)
>>> converter.from_html(article.xml['body'], """\
...   <p>1</p>
...   <h3>Heading</h3>
...   <p>2</p>
...   <p>3</p>
... """)
>>> print lxml.etree.tostring(article.xml['body'], pretty_print=True)
<body xmlns:py="http://codespeak.net/lxml/objectify/pytype">
  <division type="page">
    <p>1</p>
    <intertitle>Heading</intertitle>
    <p>2</p>
  </division>
  <division type="page">
    <p>3</p>
  </division>
</body>

If the HTML contains page breaks, those are preserved and no additional ones
are added:

>>> article = zeit.content.article.article.Article()
>>> article.pageBreak = 2
>>> converter = zeit.wysiwyg.interfaces.IHTMLConverter(article)
>>> converter.from_html(article.xml['body'], """\
...   <p>1</p>
...   <div class="inline-element page-break">foo</div>
...   <p>2</p>
...   <p>3</p>
...   <p>4</p>
... """)
>>> print lxml.etree.tostring(article.xml['body'], pretty_print=True)
<body xmlns:py="http://codespeak.net/lxml/objectify/pytype">
  <division type="page">
    <p>1</p>
  </division>
  <division teaser="" type="page">
    <p>2</p>
    <p>3</p>
    <p>4</p>
  </division>
</body>


.. [#needsinteraction]
    >>> import zeit.cms.testing
    >>> principal = zeit.cms.testing.create_interaction()

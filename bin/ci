#!/bin/bash

set -xe

function prepare_credentials() {
    k8s_cluster="$1"
    export GCLOUD_CREDENTIALS="$(mktemp).json"
    set +x; echo -E "${GCP_SERVICE_ACCOUNT}" > $GCLOUD_CREDENTIALS; set -x
    export CLOUDSDK_CONFIG="$(mktemp -d)"
    export DOCKER_CONFIG="$(mktemp -d)"
    export KUBECONFIG="$(mktemp)"
    trap "rm -rf $GCLOUD_CREDENTIALS $CLOUDSDK_CONFIG $DOCKER_CONFIG $KUBECONFIG" EXIT
    gcloud --quiet auth activate-service-account --key-file=$GCLOUD_CREDENTIALS
    gcloud --quiet auth configure-docker europe-west3-docker.pkg.dev
    # Writes to $KUBECONFIG, where kubectl expects it.
    gcloud container clusters get-credentials $k8s_cluster \
           --project="zeitonline-main" --zone="europe-west3-a"
}


DEPLOYMENT=$WORKSPACE/../$(basename $WORKSPACE)-deployment

COMMAND=${1:-test-app}
case $COMMAND in
    test-app)
        pre-commit run --all-files --show-diff-on-failure
        prepare_credentials staging  # for docker pull dav-server
        bin/ci setup-batou
        bin/ci test-app-run
    ;;
    setup-batou)
        if [ ! -d $DEPLOYMENT ]; then
            git clone ssh://git@github.com/ZeitOnline/vivi-deployment $DEPLOYMENT
            cd $DEPLOYMENT
        else
            cd $DEPLOYMENT
            git fetch
        fi

        BATOU_BRANCH=$(echo -e "${ghprbPullLongDescription}" | \
            sed -ne '/JENKINS_BATOU_BRANCH=/s/JENKINS_BATOU_BRANCH=//p' | \
            tr --delete '\r\n')
        if [ -z "$BATOU_BRANCH" ]; then
          BATOU_BRANCH=main
        fi
        git reset --hard origin/$BATOU_BRANCH

        if [ ! -e $DEPLOYMENT/work/source ]; then
          mkdir -p $DEPLOYMENT/work/source
        fi
        ln -sfT $WORKSPACE $DEPLOYMENT/work/source/vivi
    ;;
    test-app-run)
        cd $WORKSPACE
        rm -f report*.xml coverage.xml cobertura.xml
        cd $DEPLOYMENT/work/source
        rm -f report*.xml coverage.xml cobertura.xml .coverage

        cd $DEPLOYMENT
        ./batou deploy jenkins

        export GOCEPT_SELENIUM_JUNIT_ATTACH=True

        set +e
        shift
        $DEPLOYMENT/bin/test -n 6 -m 'not selenium' -r a \
            --cov=. --cov-report= \
            --junitxml=report.xml "$@"
        TEST_RESULT=$?

        $DEPLOYMENT/bin/test -n 4 -m 'selenium' -r aR \
            --cov=. --junitxml=report_selenium.xml \
            --cov-append --cov-report=html --cov-report=xml \
            --reruns=3 --reruns-delay=1 "$@"
        SELENIUM_RESULT=$?
        if [ "$TEST_RESULT" = "0" ]; then
            TEST_RESULT=$SELENIUM_RESULT
        fi
        if [ "$SELENIUM_RESULT" = "0" ]; then
            rm -f geckodriver.log
        fi

        cp $DEPLOYMENT/work/source/report*.xml $WORKSPACE
        if [ -f $DEPLOYMENT/work/source/coverage.xml ]; then
            # github pr coverage plugin has hardcoded filenames, sigh.
            mv $DEPLOYMENT/work/source/coverage.xml $WORKSPACE/cobertura.xml
        fi
        cp -R $DEPLOYMENT/work/source/coverage-report $WORKSPACE

        $DEPLOYMENT/bin/sv shutdown
        exit $TEST_RESULT
    ;;
    *)
        echo "Unrecognized command: $COMMAND"
        exit 1
    ;;
esac
